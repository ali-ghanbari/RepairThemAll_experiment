{
  "repair_end": "2018-12-01 12:11:53.805308", 
  "repair_begin": "2018-12-01 11:57:25.733019", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_331/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:51.619785357 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                squaredSecondary = new double[secondary.length];\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,8 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = 0.0;\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "updateSigma(tau);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2496/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:35.067257762 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                updateSigma(tau);\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1273/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:00.273535566 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2058/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:18.838665236 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1303/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:08.293567618 -0500\n@@ -1103,7 +1103,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1398,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            squaredSecondary = new double[secondary.length];\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_608/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:07.988793971 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,14 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            if (dMin1 > 0.0) {\n+\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\ttType -= 11;\n+\t\t\t} else {\n+\t\t\t\ttau *= 0.25;\n+\t\t\t\ttType -= 12;\n+\t\t\t}\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1474/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:00.029782177 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1397,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_657/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:18.884879392 -0500\n@@ -1131,14 +1131,9 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2246/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:19.310929132 -0500\n@@ -941,7 +941,9 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    if (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1059,7 +1061,12 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                if (tType == -18) {\n+\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t} else {\n+\t\t\t\t\tg = 0.25;\n+\t\t\t\t}\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1141,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_601/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:06.232779418 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1396,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "cachedVt.setRowVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1041/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:03.913312178 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,14 +1133,9 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            Arrays.sort(realEigenvalues);\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2055/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:18.170662312 -0500\n@@ -333,7 +333,10 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -868,7 +871,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "Arrays.sort(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2130/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:50.034801572 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1378,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_707/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:32.728959270 -0500\n@@ -1052,11 +1052,11 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin = Math.min(dMin, dN1);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "cachedVt.setRowVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_586/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:02.520746170 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1052,7 +1051,16 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                if (cachedV == null) {\n+\t\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1142,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1084/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:12.737346922 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            g = 0.25;\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n@@ -1401,7 +1397,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2373/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:03.711121969 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    tType = -5;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1101,8 +1102,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "findEigenVectors();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_979/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:48.593252082 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        findEigenVectors();\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "dqd(start,deflatedEnd);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_684/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:27.240936909 -0500\n@@ -1086,9 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   tType = -5;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1101,8 +1099,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1130,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_421/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:17.360093744 -0500\n@@ -1088,9 +1088,9 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "cachedV=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_496/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:40.756497044 -0500\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    cachedV = null;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,8 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dMin1 = -work[4 * start + pingPong];\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_183/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:02.686671690 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_871/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:20.485142612 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    dMin2 = 0;\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_418/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:10.984031506 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1405,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2452/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:24.631212600 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_999/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:52.993269312 -0500\n@@ -1131,14 +1131,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1405,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1762/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:24.366160377 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,9 +1377,7 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "j-=4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_821/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:06.461088407 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            j -= 4;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "if ((dMin <= 0) || (deflatedEnd < end)) {\n  if (flipIfWarranted(deflatedEnd,1)) {\n    dMin2=Math.min(dMin2,work[l - 1]);\n    work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));\n    work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));\n    qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));\n    dMin=-0.0;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2180/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:02.458855748 -0500\n@@ -1086,8 +1086,19 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   if ((dMin <= 0) || (deflatedEnd < end)) {\n+\t\t\t\t\t\tif (flipIfWarranted(deflatedEnd, 1)) {\n+\t\t\t\t\t\t\tdMin2 = Math.min(dMin2, work[l - 1]);\n+\t\t\t\t\t\t\twork[l - 1] = Math.min(work[l - 1], Math.min(\n+\t\t\t\t\t\t\t\t\twork[3 + pingPong], work[7 + pingPong]));\n+\t\t\t\t\t\t\twork[l - 2 * pingPong] = Math.min(work[l - 2\n+\t\t\t\t\t\t\t\t\t* pingPong], Math.min(work[6 + pingPong],\n+\t\t\t\t\t\t\t\t\twork[6 + pingPong]));\n+\t\t\t\t\t\t\tqMax = Math.max(qMax, Math.max(work[3 + pingPong],\n+\t\t\t\t\t\t\t\t\twork[7 + pingPong]));\n+\t\t\t\t\t\t\tdMin = -0.0;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1145,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_543/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:51.712636206 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = Math.min(work[j4 - 1], eMin);\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1078/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:11.373341545 -0500\n@@ -1060,7 +1060,6 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n             }\n         }\n \n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_384/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:03.599949134 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1400,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1789/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:31.626192651 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,8 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            tau = 0;\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2029/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:11.694633949 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1196/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:39.373452332 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1656/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:56.746037212 -0500\n@@ -1052,14 +1052,16 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                sigmaLow = 0;\n+                cachedD = null;\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1094/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:15.141356403 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1606/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:44.989984596 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_982/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:49.257254681 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2349/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:57.595095447 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1399,14 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            if (tType == -6) {\n+\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t} else if (tType == -18) {\n+\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t} else {\n+\t\t\t\tg = 0.25;\n+\t\t\t}\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_462/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:27.592278655 -0500\n@@ -1086,8 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1131,14 +1130,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_827/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:07.825093666 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1600/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:43.957979971 -0500\n@@ -1136,8 +1136,15 @@\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n+                    if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+                    dMin = 0.0;\n+\t\t\t\t\twork[j - k] = tmp;\n                 }\n                 j -= 4;\n             }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2470/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:28.995231489 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,12 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tau *= 0.25;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1025/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:59.881296334 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            this.splitTolerance = splitTolerance;\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "flipIfWarranted(n,2);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1352/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:27.877646137 -0500\n@@ -869,7 +869,6 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1133,14 +1132,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2225/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:14.258907145 -0500\n@@ -1088,7 +1088,7 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                    squaredSecondary = new double[secondary.length];\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_664/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:20.556891578 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        tType = -6;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Delete", 
          "seed": "eMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1344/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:25.877638103 -0500\n@@ -1060,7 +1060,6 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n             }\n         }\n \n@@ -1133,14 +1132,9 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_649/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:17.516869423 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1103,7 +1102,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1677/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:01.862060073 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "work[i + k]=work[j - k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1894/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:13.626378627 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    dN = 0;\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    work[i + k] = work[j - k];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "cachedVt=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "tau*=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_279/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:39.887575404 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    tau *= 0.25;\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_786/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:57.729054804 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                sigmaLow = 0;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1086,9 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1609/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:45.673987660 -0500\n@@ -1060,7 +1060,8 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                work[l - 1] = Math.min(work[l - 1],\n+\t\t\t\t\t\tMath.min(work[3 + pingPong], work[7 + pingPong]));\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1408,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            lowerSpectra = Double.POSITIVE_INFINITY;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2167/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:59.082841033 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,8 +1376,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            eMin = Math.min(work[j4 - 1], eMin);\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1916/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:19.330403794 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1408,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "g=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_244/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:25.283209569 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    tType = -5;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_396/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:05.943976592 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_915/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:31.989187286 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1395,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "eMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_694/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:30.032949029 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                eMin = 0.0;\n             }\n         }\n \n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2399/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:10.083149589 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        tau = g * dMin;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -869,7 +870,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    this.imagEigenvalues = imagEigenvalues;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1090,7 +1091,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1170/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:33.925430709 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1375,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_219/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:12.806757957 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dMin1 = -work[4 * start + pingPong];\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1866/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:59.478316113 -0500\n@@ -1134,12 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1416/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:45.085715403 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1378,7 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            tType = 0;\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_302/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:45.435682103 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    tType = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "deflatedEnd-=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_250/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:26.631249886 -0500\n@@ -1052,7 +1052,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1090,7 +1089,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    this.main = main.clone();\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2104/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:43.362772451 -0500\n@@ -869,7 +869,13 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    if (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1131,14 +1137,9 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            int j = realEigenvalues.length - 1;\n+            dMin2 = 0;\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=dN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "InsertBefore", 
          "seed": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_26/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:58:49.614668310 -0500\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1133,14 +1132,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1383,7 +1374,8 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;\n+\t\t\tdMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1411,7 +1403,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2174/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:00.802848531 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "flipIfWarranted(n,2);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_737/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:40.176987624 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    flipIfWarranted(n, 2);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    this.imagEigenvalues = imagEigenvalues;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "eMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1950/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:39.730493642 -0500\n@@ -1056,11 +1056,21 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                if (cachedV == null) {\n+\t\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                eMin = 0.0;\n             }\n         }\n \n@@ -1088,7 +1098,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1143,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2217/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:12.250898402 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    eigenvectors = null;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Delete", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_393/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:05.267968963 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1380,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2282/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:34.410994794 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1613/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:46.333990617 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1090,7 +1090,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1151/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:29.533413301 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,14 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            if (tType == -6) {\n+\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t} else if (tType == -18) {\n+\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t} else {\n+\t\t\t\tg = 0.25;\n+\t\t\t}\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1411,7 +1413,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1080/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:11.709342869 -0500\n@@ -1059,7 +1059,12 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                if (tType == -18) {\n+\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t} else {\n+\t\t\t\t\tg = 0.25;\n+\t\t\t\t}\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1139,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_246/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:25.619219774 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2136/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:51.354807331 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                main = transformer.getMainDiagonalRef();\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1440/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:50.905740848 -0500\n@@ -869,7 +869,9 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    if (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,12 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "work=new double[6 * main.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_714/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:34.456965840 -0500\n@@ -1053,9 +1053,6 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n-                    Math.min(work[l - 1],\n-                             Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n@@ -1134,11 +1131,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_757/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:44.597004495 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1382,7 +1374,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            tType = 0;\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_930/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:35.745201912 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1086,9 +1087,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   tType = -5;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Delete", 
          "seed": "dN1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1049/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:05.617318881 -0500\n@@ -957,7 +957,6 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1376,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_391/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:04.943965241 -0500\n@@ -1133,14 +1133,9 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1111/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:19.673374294 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            decompose();\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_996/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:52.313266648 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2490/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:33.735251999 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                sigmaLow = 0;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1954/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:46.446523168 -0500\n@@ -333,7 +333,8 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        dMin = 0.0;\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -956,7 +957,14 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1142,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_430/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:19.804115642 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                dMin1 = 0;\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1189/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:37.697445677 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    this.imagEigenvalues = imagEigenvalues;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "cachedV=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "cachedV=MatrixUtils.createRealMatrix(n,n);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_325/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:50.259764566 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    cachedV = MatrixUtils.createRealMatrix(n, n);\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                cachedV = null;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "work[j4 + 2]=dN;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1550/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:31.561924345 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,8 +1397,16 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            work[j4 + 2] = dN;\n+\t\t\tdN   = work[j4p2 + 2];\n+            if (tType == -6) {\n+\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t} else if (tType == -18) {\n+\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t} else {\n+\t\t\t\tg = 0.25;\n+\t\t\t}\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "InsertBefore", 
          "seed": "updateSigma(tau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Delete", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_315/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:48.199730458 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin2 = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1056,9 +1056,6 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1134,11 +1131,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1373,8 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            updateSigma(tau);\n+\t\t\twork[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2414/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:14.255167666 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -954,7 +955,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    this.realEigenvalues = realEigenvalues;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin <= 0.0) {\n  tau=-dMin;\n  tType=-1;\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_596/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:04.888767280 -0500\n@@ -956,7 +956,12 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin <= 0.0) {\n+\t\t\t\t\t\ttau = -dMin;\n+\t\t\t\t\t\ttType = -1;\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1139,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1402,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            squaredSecondary = new double[secondary.length];\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "dMin1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Replace", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1285/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:03.737549402 -0500\n@@ -868,7 +868,6 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1052,7 +1051,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1103,7 +1101,7 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        computeGershgorinCircles();\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,14 +1132,8 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2205/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:09.210885164 -0500\n@@ -1053,14 +1053,15 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1399,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            transformer = null;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1644/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:53.934024637 -0500\n@@ -1088,7 +1088,7 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                    squaredSecondary = new double[secondary.length];\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2468/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:28.655230018 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1380,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            pingPong = 1 - pingPong;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n@@ -1402,7 +1398,7 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            squaredSecondary = new double[secondary.length];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_320/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:49.239748205 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,14 +1400,15 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            imagEigenvalues = new double[main.length];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "realEigenvalues[j]=tmp;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_386/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:03.935952927 -0500\n@@ -868,7 +868,10 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_747/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:42.580996796 -0500\n@@ -1131,14 +1131,9 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            lowerSpectra = Double.POSITIVE_INFINITY;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Replace", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2397/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:09.747148133 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1101,8 +1102,7 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n+                        dN = 0;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1900/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:14.958384506 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            cachedD = null;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_518/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:46.212570333 -0500\n@@ -1086,8 +1086,31 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   if ((dMin < 0.0)\n+\t\t\t\t\t\t\t&& (dMin1 > 0.0)\n+\t\t\t\t\t\t\t&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE\n+\t\t\t\t\t\t\t\t\t* (sigma + dN1))\n+\t\t\t\t\t\t\t&& (Math.abs(dN) < TOLERANCE * sigma)) {\n+\t\t\t\t\t\twork[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+\t\t\t\t\t\tdMin = 0.0;\n+\t\t\t\t\t\tupdateSigma(tau);\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t} else if (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1157,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1184/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:36.637441469 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin = Math.min(dMin, dN1);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n  final double tmp=work[j4 + 1] / work[j4 - 2];\n  work[j4]=work[j4 - 1] * tmp;\n  d*=tmp;\n}\n else {\n  work[j4]=work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n  d*=work[j4 + 1] / work[j4 - 2];\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_764/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:46.621012231 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1375,15 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n+\t\t\t\tfinal double tmp = work[j4 + 1] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4 - 1] * tmp;\n+\t\t\t\td *= tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n+\t\t\t\td *= work[j4 + 1] / work[j4 - 2];\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2161/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:57.686834947 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,8 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            cachedD = null;\n+\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1449/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:53.593753034 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_336/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:52.947805659 -0500\n@@ -1101,7 +1101,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        dqd(start, deflatedEnd);\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2239/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:17.274920271 -0500\n@@ -1131,14 +1131,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n  final double tmp=work[j4 + 1] / work[j4 - 2];\n  work[j4]=work[j4 - 1] * tmp;\n  d*=tmp;\n}\n else {\n  work[j4]=work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n  d*=work[j4 + 1] / work[j4 - 2];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1979/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:58.894577829 -0500\n@@ -868,7 +868,6 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1052,7 +1051,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1133,14 +1131,9 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             return true;\n         }\n         return false;\n@@ -1381,7 +1374,15 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n+\t\t\t\tfinal double tmp = work[j4 + 1] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4 - 1] * tmp;\n+\t\t\t\td *= tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n+\t\t\t\td *= work[j4 + 1] / work[j4 - 2];\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1758/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:23.678157316 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -954,7 +955,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    this.realEigenvalues = realEigenvalues;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "tau=0.25 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2133/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:50.686804416 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            tau = 0.25 * dMin1;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Delete", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_825/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:07.477092325 -0500\n@@ -1134,14 +1134,10 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            tType = -4;\n+\t\t\treturn true;\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1559/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:33.265932000 -0500\n@@ -941,8 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n-                    d = work[i];\n+                    tType = -7;\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "tau*=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1261/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:57.125523001 -0500\n@@ -333,7 +333,8 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        tau *= 0.25;\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Replace", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1841/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:52.374284674 -0500\n@@ -1059,7 +1059,7 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,d);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1402/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:41.377700457 -0500\n@@ -957,7 +957,6 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1396,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_741/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:41.224991621 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Delete", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2215/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:11.918896957 -0500\n@@ -955,7 +955,6 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1101,8 +1100,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,12 +1131,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tau *= 0.25;\n             }\n             return true;\n         }\n@@ -1401,7 +1393,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 2]=dN1 + work[j4p2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1839/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:52.038283187 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = Math.min(work[j4 - 1], eMin);\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n@@ -1404,7 +1399,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            work[j4 - 2] = dN1 + work[j4p2];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "cachedV.setColumnVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1515/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:16.601857019 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = Math.min(work[j4 - 1], eMin);\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_206/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:09.362671999 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1088,7 +1087,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_893/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:26.633166464 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1405,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_505/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:43.524535344 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = work[4 * start + pingPong + 4];\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1641/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:53.262021631 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dqd(start, deflatedEnd);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1131,14 +1132,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1086/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:13.097348341 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_912/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:31.329184719 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_41/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:58:54.514668537 -0500\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1133,14 +1132,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1411,7 +1402,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_588/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:02.864749366 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2380/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:05.059127813 -0500\n@@ -955,7 +955,10 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1088,7 +1091,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1650/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:55.374031078 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tau *= 0.25;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2291/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:36.415003502 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -955,7 +954,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1065/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:08.669330893 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,12 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 2]=dN1 + work[j4p2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1267/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:58.897530073 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1086,8 +1087,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            work[j4 - 2] = dN1 + work[j4p2];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_723/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:36.800974760 -0500\n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                this.realEigenvalues = realEigenvalues;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2288/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:35.751000616 -0500\n@@ -1053,9 +1053,6 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n-                    Math.min(work[l - 1],\n-                             Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n@@ -1086,9 +1083,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1103,7 +1098,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1133,12 +1127,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dMin2=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_152/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:46.978670964 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -957,7 +958,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dMin2 = dMin;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1400,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_771/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:54.353041844 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType -= 12;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2275/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:32.742987545 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin2 = 0;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_510/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:44.536548739 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1787/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:31.286191140 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,12 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                this.realEigenvalues = realEigenvalues;\n             }\n             return true;\n         }\n@@ -1403,7 +1397,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            transformer = null;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_296/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:44.055656866 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1131,14 +1132,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            transformer = null;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2252/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:26.350959756 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            dMin1 = 0;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2335/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:53.519077765 -0500\n@@ -955,7 +955,10 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1137,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1381,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2122/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:48.006792723 -0500\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dN1 = 0;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_414/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:10.300024470 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_289/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:42.347624971 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1052,7 +1051,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_864/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:18.437134678 -0500\n@@ -956,7 +956,14 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1086,8 +1093,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1140,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_403/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:07.947999213 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,7 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            tType = 0;\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1919/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:20.002406758 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    this.main = main.clone();\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_994/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:51.977265332 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_528/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:48.568599283 -0500\n@@ -955,7 +955,11 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "work[j4]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_919/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:32.993191194 -0500\n@@ -1134,12 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n@@ -1382,7 +1376,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            work[j4] = 0.0;\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2368/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:02.379116194 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1406,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2409/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:13.271163403 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    main = transformer.getMainDiagonalRef();\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tau *= 0.25;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1315/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:11.349579848 -0500\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2319/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:43.155032778 -0500\n@@ -333,7 +333,10 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2437/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:20.907196477 -0500\n@@ -868,7 +868,10 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1137,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2149/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:54.678821830 -0500\n@@ -1133,12 +1133,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1363/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:30.969658565 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                sigmaLow = 0;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1090,7 +1090,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1820/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:46.358258023 -0500\n@@ -1131,14 +1131,10 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n+            tau = 0.0;\n+\t\t\t// flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "flipIfWarranted(n,2);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "realEigenvalues[i]=realEigenvalues[j];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2526/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:49.107318470 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    flipIfWarranted(n, 2);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,12 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2522/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:48.395315393 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1060,7 +1060,8 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                work[l - 1] = Math.min(work[l - 1],\n+\t\t\t\t\t\tMath.min(work[3 + pingPong], work[7 + pingPong]));\n             }\n         }\n \n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_698/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:31.028952811 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    this.imagEigenvalues = imagEigenvalues;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "InsertBefore", 
          "seed": "d=work[pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1989/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:01.254588183 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1396,8 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            d = work[pingPong];\n+\t\t\twork[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2171/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:00.142845654 -0500\n@@ -956,7 +956,14 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1141,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_754/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:43.905001851 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_368/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:00.215907145 -0500\n@@ -1090,7 +1090,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    dMin = Math.min(dMin, dN);\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN1=work[j4p2 + 2];\n  dMin=dN1;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN1=dN2 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "for (int j4=4 * start + 3; j4 <= 4 * (end - 3); j4+=4) {\n  work[j4 - 2]=d + work[j4 - 1];\n  final double tmp=work[j4 + 1] / work[j4 - 2];\n  d=d * tmp - tau;\n  dMin=Math.min(dMin,d);\n  work[j4]=work[j4 - 1] * tmp;\n  eMin=Math.min(work[j4],eMin);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2159/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:57.350833482 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1090,7 +1090,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    dN1 = 0;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1400,20 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN1 = work[j4p2 + 2];\n+\t\t\t\tdMin = dN1;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN1 = dN2 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n+\t\t\t}\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n@@ -1412,7 +1421,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2265/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:30.366977217 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN1=dN2 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1063/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:08.329329555 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,15 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN1 = dN2 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n+\t\t\t}\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1269/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:59.233531414 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_817/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:05.789085816 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "deflatedEnd-=2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_389/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:04.611961161 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                deflatedEnd -= 2;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1103,7 +1103,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        computeGershgorinCircles();\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Replace", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1454/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:54.589757546 -0500\n@@ -868,7 +868,7 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1276/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:00.953538281 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                sigmaLow = 0;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            imagEigenvalues = new double[main.length];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "for (int j4=4 * start + 3; j4 < 4 * (end - 3); j4+=4) {\n  work[j4 - 2]=d + work[j4 - 1];\n  if (work[j4 - 2] == 0.0) {\n    work[j4]=0.0;\n    d=work[j4 + 1];\n    dMin=d;\n    eMin=0.0;\n  }\n else   if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n    final double tmp=work[j4 + 1] / work[j4 - 2];\n    work[j4]=work[j4 - 1] * tmp;\n    d*=tmp;\n  }\n else {\n    work[j4]=work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n    d*=work[j4 + 1] / work[j4 - 2];\n  }\n  dMin=Math.min(dMin,d);\n  eMin=Math.min(eMin,work[j4]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_486/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:33.032377522 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1526/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:19.441869817 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1401,8 +1397,10 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n+            pingPong = 1 - pingPong;\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2411/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:13.591164789 -0500\n@@ -1134,14 +1134,9 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            tType = -4;\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_900/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:28.317173007 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "flipIfWarranted(n,2);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1105/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:17.929367407 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    flipIfWarranted(n, 2);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dMin1 = -work[4 * start + pingPong];\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1577/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:37.473950893 -0500\n@@ -336,7 +336,17 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        if (cachedVt == null) {\n+\t\t\tif (eigenvectors == null) {\n+\t\t\t\tfindEigenVectors();\n+\t\t\t}\n+\t\t\tfinal int m = eigenvectors.length;\n+\t\t\tcachedVt = MatrixUtils.createRealMatrix(m, m);\n+\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\tcachedVt.setRowVector(k, eigenvectors[k]);\n+\t\t\t}\n+\t\t}\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -955,7 +965,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType -= 12;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1144,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "tType=-8;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_525/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:47.892590976 -0500\n@@ -1101,7 +1101,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        tType = -8;\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_837/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:10.529104101 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    dMin2 = 0;\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2307/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:40.127019627 -0500\n@@ -868,7 +868,6 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1376,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_784/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:57.389053498 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2012/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:07.342614878 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1524/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:19.101868285 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2163/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:58.022836412 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2237/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:16.918918723 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -955,7 +956,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType -= 12;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin <= 0.0) {\n  tau=-dMin;\n  tType=-1;\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_475/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:30.364330760 -0500\n@@ -956,7 +956,6 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1086,9 +1085,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1131,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_751/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:43.244999331 -0500\n@@ -1134,12 +1134,9 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                if (dMin1 == dN1) {\n+\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t}\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "cachedV=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Replace", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_370/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:00.555911323 -0500\n@@ -1056,9 +1056,7 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n+                dMin1 = 0;\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                cachedV = null;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1180/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:35.953438754 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                cachedD = null;\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "InsertBefore", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2082/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:25.274693401 -0500\n@@ -1052,7 +1052,8 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                sigmaLow = 0;\n+\t\t\t\tdMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1380,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_953/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:41.505224377 -0500\n@@ -333,7 +333,8 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        dMin = 0.0;\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1683/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:03.202066057 -0500\n@@ -1086,9 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1131,14 +1129,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Replace", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2074/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:23.218684406 -0500\n@@ -1053,9 +1053,7 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n-                    Math.min(work[l - 1],\n-                             Math.min(work[3 + pingPong], work[7 + pingPong]));\n+                cachedD = null;\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2344/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:56.159089218 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    this.realEigenvalues = realEigenvalues;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1103,7 +1103,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        computeGershgorinCircles();\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_292/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:43.039638286 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1192/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:38.365448329 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1133,12 +1132,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            dMin2 = 0;\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "realEigenvalues[i]=realEigenvalues[j];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "cachedVt.setRowVector(k,eigenvectors[k]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_796/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:00.101063921 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    cachedVt.setRowVector(k, eigenvectors[k]);\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_555/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:54.760668855 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2201/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:08.198880756 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1384,7 +1376,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            tau = 0.25 * dMin1;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_453/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:25.560239018 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1387/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:36.841682188 -0500\n@@ -1060,7 +1060,8 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                work[l - 1] = Math.min(work[l - 1],\n+\t\t\t\t\t\tMath.min(work[3 + pingPong], work[7 + pingPong]));\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1397,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=dN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "l+=4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,d);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Replace", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_52/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:09.526669231 -0500\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dMin = Math.min(dMin, d);\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1088,7 +1088,7 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                    imagEigenvalues = new double[main.length];\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1103,7 +1103,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1133,14 +1132,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1383,7 +1374,8 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tdMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1411,7 +1403,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1653/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:56.066034172 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1397,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1367/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:32.105663132 -0500\n@@ -1060,7 +1060,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1134,14 +1142,11 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n-            return true;\n+            tType = -4;\n+\t\t\treturn true;\n         }\n         return false;\n     }\n@@ -1381,7 +1386,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN = work[j4p2 + 2];\n+\t\t\t\tdMin = dN;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2466/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:28.319228563 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1398,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1836/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:50.410275976 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1396,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2295/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:37.403007794 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -955,7 +956,10 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1296/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:06.597560836 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin1 = 0;\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Delete", 
          "seed": "work[i + k]=work[j - k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Delete", 
          "seed": "dN2=d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1511/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:15.925853972 -0500\n@@ -957,7 +957,6 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1056,7 +1055,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dqd(start, deflatedEnd);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1101,7 +1100,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        dqd(start, deflatedEnd);\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1058/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:07.317325570 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1397,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1072/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:10.021336218 -0500\n@@ -1059,7 +1059,11 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                if (cachedD == null) {\n+\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t}\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1380,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "flipIfWarranted(n,2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_416/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:10.644028009 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    flipIfWarranted(n, 2);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1810/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:43.538245521 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1378,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1412,7 +1406,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            tType = -3;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2284/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:34.750996271 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1060,7 +1061,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "secondary[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1138/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:26.817402545 -0500\n@@ -1134,14 +1134,10 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            tType = -4;\n+\t\t\treturn true;\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_210/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:10.394675926 -0500\n@@ -868,7 +868,6 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1133,14 +1132,9 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2442/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:21.939200945 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Delete", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Delete", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_259/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:29.011316778 -0500\n@@ -955,7 +955,6 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1136,7 +1135,6 @@\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n                     work[j - k] = tmp;\n                 }\n                 j -= 4;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_264/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:30.391354057 -0500\n@@ -333,7 +333,8 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        dMin = dN1;\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_636/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:14.452846542 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2223/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:13.906905612 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1378,8 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            dMin1 = dMin;\n+\t\t\tdMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1467/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:57.993772963 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1103,7 +1104,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2127/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:49.366798657 -0500\n@@ -1052,7 +1052,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1131,16 +1130,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            int j = realEigenvalues.length - 1;\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n@@ -1411,7 +1402,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "flipIfWarranted(n,2);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1506/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:14.897849336 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    flipIfWarranted(n, 2);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Replace", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1118/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:21.381381044 -0500\n@@ -1101,8 +1101,7 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n+                        dN = 0;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_439/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:21.872159933 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1377,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN = work[j4p2 + 2];\n+\t\t\t\tdMin = dN;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2351/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:57.935096922 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    main = transformer.getMainDiagonalRef();\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -956,7 +956,14 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1141,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1943/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:31.974459511 -0500\n@@ -868,7 +868,11 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1138,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1713/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:11.370102501 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1133,14 +1134,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dN2=d;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1465/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:57.633771332 -0500\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dN2 = d;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "work[j4 - 2]=dN1 + work[j4p2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1832/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:49.402271511 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1400,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "InsertBefore", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_701/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:31.700955363 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "findEigenVectors();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2390/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:07.711139309 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1099/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:16.517361833 -0500\n@@ -336,7 +336,17 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        if (cachedVt == null) {\n+\t\t\tif (eigenvectors == null) {\n+\t\t\t\tfindEigenVectors();\n+\t\t\t}\n+\t\t\tfinal int m = eigenvectors.length;\n+\t\t\tcachedVt = MatrixUtils.createRealMatrix(m, m);\n+\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\tcachedVt.setRowVector(k, eigenvectors[k]);\n+\t\t\t}\n+\t\t}\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1144,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_904/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:29.325176925 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                this.realEigenvalues = realEigenvalues;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_947/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:40.161219131 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "tType=-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "j-=4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1216/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:44.741473668 -0500\n@@ -333,7 +333,10 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1101,7 +1104,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        tType = -8;\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1133,12 +1137,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            j -= 4;\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1383,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1401,7 +1400,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            main = transformer.getMainDiagonalRef();\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2424/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:16.907179154 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType -= 12;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1059,7 +1060,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1897/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:14.294381575 -0500\n@@ -957,7 +957,11 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\td = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1380,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = work[4 * start + pingPong + 4];\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "if (work[j4 - 3] == 0.0) {\n  work[j4 - 1]=0.0;\n  d=work[j4 + 2];\n  dMin=d;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) && (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n  final double tmp=work[j4 + 2] / work[j4 - 3];\n  work[j4 - 1]=work[j4] * tmp;\n  d*=tmp;\n}\n else {\n  work[j4 - 1]=work[j4 + 2] * (work[j4] / work[j4 - 3]);\n  d*=work[j4 + 2] / work[j4 - 3];\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1974/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:51.858546943 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,20 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            if (work[j4 - 3] == 0.0) {\n+\t\t\t\twork[j4 - 1] = 0.0;\n+\t\t\t\td = work[j4 + 2];\n+\t\t\t\tdMin = d;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4 + 2] / work[j4 - 3];\n+\t\t\t\twork[j4 - 1] = work[j4] * tmp;\n+\t\t\t\td *= tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);\n+\t\t\t\td *= work[j4 + 2] / work[j4 - 3];\n+\t\t\t}\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "tType=-2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1374/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:33.765669809 -0500\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1377,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "work[4 * end - pingPong - 1]=eMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_705/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:32.376957932 -0500\n@@ -1086,9 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2493/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:34.399254872 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1377,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1003/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:53.669271962 -0500\n@@ -1053,10 +1053,12 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                findEigenvalues();\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1812/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:43.882247047 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 2]=dN1 + work[j4p2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1774/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:27.798175638 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1400,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            work[j4 - 2] = dN1 + work[j4p2];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2328/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:45.827044380 -0500\n@@ -1056,11 +1056,12 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin1 = 0;\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "work[j4]=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1427/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:47.465725242 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            work[j4] = 0.0;\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1398/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:40.309696154 -0500\n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                this.realEigenvalues = realEigenvalues;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1420/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:45.769718162 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_530/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:48.908603460 -0500\n@@ -1090,7 +1090,10 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    if (start >= deflatedEnd) {\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1246/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:53.385508086 -0500\n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tau *= 0.25;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2447/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:23.303206851 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tau = g * dMin;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Replace", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Delete", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1959/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:47.786529056 -0500\n@@ -1056,9 +1056,6 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1103,7 +1100,7 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        computeGershgorinCircles();\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1131,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2304/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:39.427016586 -0500\n@@ -1056,9 +1056,6 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1134,11 +1131,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1745/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:20.318142364 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1133,14 +1132,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n@@ -1412,7 +1404,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Replace", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1926/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:21.842414871 -0500\n@@ -1103,7 +1103,7 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        computeGershgorinCircles();\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            squaredSecondary = new double[secondary.length];\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_819/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:06.129087127 -0500\n@@ -336,7 +336,17 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        if (cachedVt == null) {\n+\t\t\tif (eigenvectors == null) {\n+\t\t\t\tfindEigenVectors();\n+\t\t\t}\n+\t\t\tfinal int m = eigenvectors.length;\n+\t\t\tcachedVt = MatrixUtils.createRealMatrix(m, m);\n+\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\tcachedVt.setRowVector(k, eigenvectors[k]);\n+\t\t\t}\n+\t\t}\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1131,14 +1141,10 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n+            tau = 0.0;\n+\t\t\t// flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1410,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1186/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:36.973442802 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            tType = 0;\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_435/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:21.164144154 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_937/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:37.745209707 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1398,7 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            pingPong = 1 - pingPong;\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Delete", 
          "seed": "eMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_277/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:39.543568425 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        tau = g * dMin;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1060,7 +1061,6 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n             }\n         }\n \n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1010/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:55.397278737 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    dMin2 = 0;\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1056,9 +1057,6 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_977/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:48.237250689 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            tau = 0.5 * dMin1;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Delete", 
          "seed": "if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) && (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n  final double tmp=work[i + 2] / work[j];\n  work[j + 2]=work[i] * tmp;\n  d*=tmp;\n}\n else {\n  work[j + 2]=work[i + 2] * (work[i] / work[j]);\n  d*=work[i + 2] / work[j];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Replace", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1725/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:14.146114874 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -957,7 +958,6 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1059,7 +1059,7 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1648/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:55.038029575 -0500\n@@ -1060,7 +1060,8 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                work[l - 1] = Math.min(work[l - 1],\n+\t\t\t\t\t\tMath.min(work[3 + pingPong], work[7 + pingPong]));\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2198/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:07.530877847 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,8 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            tau = 0;\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "InsertBefore", 
          "seed": "work[j + 2]=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_456/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:26.244252655 -0500\n@@ -957,7 +957,8 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    work[j + 2] = 0.0;\n+\t\t\t\t\td = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_726/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:37.484977365 -0500\n@@ -956,7 +956,6 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2043/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:15.098648861 -0500\n@@ -1056,7 +1056,17 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                if (cachedV == null) {\n+\t\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1086,8 +1096,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1143,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Delete", 
          "seed": "work[i + k]=work[j - k];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1287/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:04.077550761 -0500\n@@ -957,7 +957,6 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1405,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1829/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:48.710268445 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2186/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:04.150863121 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    this.realEigenvalues = realEigenvalues;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1798/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:34.406204999 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n@@ -1404,7 +1397,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_488/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:33.372383401 -0500\n@@ -1133,12 +1133,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            dMin2 = 0;\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Delete", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1031/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:01.221301597 -0500\n@@ -941,7 +941,6 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1163/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:32.569425332 -0500\n@@ -1056,9 +1056,6 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1134,11 +1131,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2459/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:26.635221275 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,14 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            if (tType == -6) {\n+\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t} else if (tType == -18) {\n+\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t} else {\n+\t\t\t\tg = 0.25;\n+\t\t\t}\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1412,7 +1414,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            cachedD = null;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1379/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:34.789673930 -0500\n@@ -955,7 +955,11 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1133,14 +1137,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Replace", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1582/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:38.837957013 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    tType = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n@@ -1383,7 +1376,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            Arrays.sort(realEigenvalues);\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "updateSigma(tau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_573/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:59.128713791 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                updateSigma(tau);\n             }\n         }\n \n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1384,7 +1376,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            pingPong = 1 - pingPong;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Replace", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_895/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:26.973167785 -0500\n@@ -1059,7 +1059,7 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Delete", 
          "seed": "eMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1513/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:16.265855504 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1060,7 +1060,6 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n             }\n         }\n \n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "InsertBefore", 
          "seed": "d=work[pingPong];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2039/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:14.070644358 -0500\n@@ -869,7 +869,9 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    if (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1398,8 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            d = work[pingPong];\n+\t\t\twork[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Replace", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1685/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:03.542067575 -0500\n@@ -956,7 +956,11 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Delete", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2009/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:06.594611599 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin <= 0.0) {\n  tau=-dMin;\n  tType=-1;\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1149/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:29.193411953 -0500\n@@ -956,7 +956,12 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin <= 0.0) {\n+\t\t\t\t\t\ttau = -dMin;\n+\t\t\t\t\t\ttType = -1;\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1139,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_39/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:58:54.162668520 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    main = transformer.getMainDiagonalRef();\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                squaredSecondary = new double[secondary.length];\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1379,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1411,7 +1406,14 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            if (dMin1 > 0.0) {\n+\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\ttType -= 11;\n+\t\t\t} else {\n+\t\t\t\ttau *= 0.25;\n+\t\t\t\ttType -= 12;\n+\t\t\t}\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1047/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:05.273317527 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1408,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_354/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:57.135866427 -0500\n@@ -1131,14 +1131,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1924/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:21.486413302 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    tType = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,12 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n@@ -1411,7 +1405,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "for (int j4=4 * start + 3; j4 <= 4 * (end - 3); j4+=4) {\n  work[j4 - 2]=d + work[j4 - 1];\n  final double tmp=work[j4 + 1] / work[j4 - 2];\n  d=d * tmp - tau;\n  dMin=Math.min(dMin,d);\n  work[j4]=work[j4 - 1] * tmp;\n  eMin=Math.min(work[j4],eMin);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_541/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:51.372632369 -0500\n@@ -1103,7 +1103,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        tau = 0.25 * dMin1;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1408,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_409/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:09.288013343 -0500\n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                lowerSpectra = Double.POSITIVE_INFINITY;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "cachedV.setColumnVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1529/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:20.129872916 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1782/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:29.870184848 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_986/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:49.929257311 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_108/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:32.866670311 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = work[4 * start + pingPong + 4];\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n@@ -1401,7 +1396,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1564/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:34.281936563 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -955,7 +955,10 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_539/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:51.004628212 -0500\n@@ -1090,7 +1090,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1377,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN = work[j4p2 + 2];\n+\t\t\t\tdMin = dN;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Delete", 
          "seed": "work[i + k]=work[j - k];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2514/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:40.443281014 -0500\n@@ -957,7 +957,6 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 3] == 0.0) {\n  work[j4 - 1]=0.0;\n  d=work[j4 + 2];\n  dMin=d;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) && (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n  final double tmp=work[j4 + 2] / work[j4 - 3];\n  work[j4 - 1]=work[j4] * tmp;\n  d*=tmp;\n}\n else {\n  work[j4 - 1]=work[j4 + 2] * (work[j4] / work[j4 - 3]);\n  d*=work[j4 + 2] / work[j4 - 3];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN1=dN2 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_570/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:58.460706919 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 3] == 0.0) {\n+\t\t\t\twork[j4 - 1] = 0.0;\n+\t\t\t\td = work[j4 + 2];\n+\t\t\t\tdMin = d;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4 + 2] / work[j4 - 3];\n+\t\t\t\twork[j4 - 1] = work[j4] * tmp;\n+\t\t\t\td *= tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);\n+\t\t\t\td *= work[j4 + 2] / work[j4 - 3];\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n@@ -1411,7 +1419,15 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN1 = dN2 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n+\t\t\t}\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "realEigenvalues[j]=tmp;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1001/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:53.325270614 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n@@ -1402,7 +1396,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_379/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:02.591937341 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1375,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN = work[j4p2 + 2];\n+\t\t\t\tdMin = dN;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1061/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:07.989328216 -0500\n@@ -868,7 +868,7 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    tau *= 0.25;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_465/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:28.288292079 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_364/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:59.535898318 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -942,7 +943,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2464/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:27.987227127 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1131,17 +1131,11 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            tType = -4;\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "if (dMin <= 0.0) {\n  tau=-dMin;\n  tType=-1;\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2118/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:47.026788445 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,12 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1717/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:12.058105568 -0500\n@@ -1131,16 +1131,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            int j = realEigenvalues.length - 1;\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1092, 
          "faulty": "updateSigma(tau);", 
          "type": "Replace", 
          "seed": "tau=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "Delete", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1889/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:12.238372500 -0500\n@@ -1088,9 +1088,7 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n-                    updateSigma(tau);\n-                    return deflatedEnd;\n+                    tau = 0;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1771/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:27.114172597 -0500\n@@ -333,8 +333,10 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n-            findEigenVectors();\n+        dMin = dN1;\n+\t\tif (eigenvectors == null) {\n+            dMin1 = 0;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -956,7 +958,8 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    dN = 0;\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1060,7 +1063,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1134,11 +1145,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2157/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:57.014832017 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1378,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_841/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:11.533107977 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "tType=-3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2065/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:20.858674078 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,9 +1395,7 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "tau=0.25 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1708/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:10.014096455 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            tau = 0.25 * dMin1;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n@@ -1401,7 +1396,15 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "InsertBefore", 
          "seed": "computeGershgorinCircles();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2228/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:14.914910000 -0500\n@@ -1131,14 +1131,10 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n+            computeGershgorinCircles();\n+\t\t\t// flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Replace", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Delete", 
          "seed": "dN2=d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_381/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:02.931941518 -0500\n@@ -1090,7 +1090,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1103,7 +1104,7 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        computeGershgorinCircles();\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1399,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1411,7 +1406,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1125/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:23.065387701 -0500\n@@ -868,7 +868,11 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1060,7 +1064,8 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                work[l - 1] = Math.min(work[l - 1],\n+\t\t\t\t\t\tMath.min(work[3 + pingPong], work[7 + pingPong]));\n             }\n         }\n \n@@ -1134,11 +1139,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1385,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_611/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:08.668800271 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,8 +1396,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "flipIfWarranted(n,2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1219/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:45.425476389 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    flipIfWarranted(n, 2);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1396,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_300/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:45.095675886 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "transformer=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_749/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:42.912998063 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n@@ -1403,7 +1397,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            transformer = null;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_639/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:15.124851991 -0500\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1378,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1413/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:44.413712694 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1377,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = Math.min(work[j4 - 1], eMin);\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1701/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:07.994087444 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1398,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1567/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:34.953939580 -0500\n@@ -1101,7 +1101,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        tType = -10;\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1008/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:55.057277403 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_483/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:32.376366182 -0500\n@@ -1052,7 +1052,16 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                if (cachedV == null) {\n+\t\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1143,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_728/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:37.824978660 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,14 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            if (tType == -6) {\n+\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t} else if (tType == -18) {\n+\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t} else {\n+\t\t\t\tg = 0.25;\n+\t\t\t}\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2035/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:13.042639855 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1378,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            dMin1 = dMin;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_627/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:12.784833718 -0500\n@@ -868,7 +868,10 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Delete", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1123/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:22.725386357 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -941,7 +942,6 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2354/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:58.623099906 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    dMin2 = 0;\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1052,7 +1053,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if ((dMin <= 0) || (deflatedEnd < end)) {\n  if (flipIfWarranted(deflatedEnd,1)) {\n    dMin2=Math.min(dMin2,work[l - 1]);\n    work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));\n    work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));\n    qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));\n    dMin=-0.0;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2358/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:59.295102820 -0500\n@@ -1056,7 +1056,20 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                if ((dMin <= 0) || (deflatedEnd < end)) {\n+\t\t\t\t\tif (flipIfWarranted(deflatedEnd, 1)) {\n+\t\t\t\t\t\tdMin2 = Math.min(dMin2, work[l - 1]);\n+\t\t\t\t\t\twork[l - 1] = Math.min(work[l - 1], Math.min(\n+\t\t\t\t\t\t\t\twork[3 + pingPong], work[7 + pingPong]));\n+\t\t\t\t\t\twork[l - 2 * pingPong] = Math\n+\t\t\t\t\t\t\t\t.min(work[l - 2 * pingPong], Math.min(\n+\t\t\t\t\t\t\t\t\t\twork[6 + pingPong], work[6 + pingPong]));\n+\t\t\t\t\t\tqMax = Math.max(qMax, Math.max(work[3 + pingPong],\n+\t\t\t\t\t\t\t\twork[7 + pingPong]));\n+\t\t\t\t\t\tdMin = -0.0;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1147,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1982/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:59.594580900 -0500\n@@ -1052,7 +1052,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,12 +1133,10 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tau *= 0.25;\n+                if (dMin1 == dN1) {\n+\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t}\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "updateSigma(tau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Delete", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1611/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:46.001989130 -0500\n@@ -1053,14 +1053,10 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n-                    Math.min(work[l - 1],\n-                             Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n             }\n         }\n \n@@ -1134,11 +1130,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1029/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:00.885300277 -0500\n@@ -1103,7 +1103,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1133,14 +1132,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1562/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:33.945935054 -0500\n@@ -868,7 +868,16 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (tType < -22) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1143,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1165/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:32.901426649 -0500\n@@ -956,7 +956,6 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_228/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:15.162855699 -0500\n@@ -1059,7 +1059,11 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                if (cachedD == null) {\n+\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t}\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1147/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:28.849410591 -0500\n@@ -1056,9 +1056,7 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n+                dMin = Math.min(dMin, dN1);\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1406,8 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            cachedD = null;\n+\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1292/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:05.537556597 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                --j;\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1377,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            eMin = work[4 * start + pingPong + 4];\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Delete", 
          "seed": "dN2=d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1312/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:10.661577094 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    this.imagEigenvalues = imagEigenvalues;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n@@ -1403,7 +1396,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1573/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:36.349945848 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -869,7 +870,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -957,7 +958,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dN1 = 0;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1377/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:34.425672465 -0500\n@@ -333,7 +333,8 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        dMin = 0.0;\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1090,7 +1091,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    dMin = dN1;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "transformer=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1553/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:32.237927382 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            transformer = null;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "processGeneralBlock(n);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_224/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:14.150814828 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    processGeneralBlock(n);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                squaredSecondary = new double[secondary.length];\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Replace", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1681/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:02.870064575 -0500\n@@ -1053,9 +1053,7 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n-                    Math.min(work[l - 1],\n-                             Math.min(work[3 + pingPong], work[7 + pingPong]));\n+                dMin1 = 0;\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "realEigenvalues[j]=tmp;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1504/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:14.557847803 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dqd(start, deflatedEnd);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1103,7 +1104,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1381,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "dN2=d;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_653/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:18.216874525 -0500\n@@ -1103,7 +1103,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1397,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            dN2 = d;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_906/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:29.665178247 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1630/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:50.126007598 -0500\n@@ -955,7 +955,10 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2477/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:30.695238846 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            tType = -3;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "InsertBefore", 
          "seed": "tType=-6;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_437/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:21.504151731 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_79/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:24.118669906 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "cachedVt=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1182/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:36.297440120 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    cachedVt = null;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1133,14 +1134,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_460/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:27.260272251 -0500\n@@ -868,7 +868,7 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    tau *= 0.25;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "updateSigma(tau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "computeGershgorinCircles();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_323/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:49.919759280 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1381,7 +1373,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2109/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:44.366776834 -0500\n@@ -956,7 +956,8 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    cachedD = null;\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1133,14 +1134,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_605/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:07.276788070 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1408,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "realEigenvalues[j]=tmp;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_801/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:01.437069060 -0500\n@@ -1134,14 +1134,9 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            tType = -1;\n         }\n         return false;\n     }\n@@ -1403,7 +1398,14 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            if (tType == -6) {\n+\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t} else if (tType == -18) {\n+\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t} else {\n+\t\t\t\tg = 0.25;\n+\t\t\t}\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1230/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:48.957490445 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1986/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:00.594585287 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Delete", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_791/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:58.745058708 -0500\n@@ -954,7 +954,6 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_516/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:45.876566076 -0500\n@@ -956,7 +956,8 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    dN = 0;\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1056,7 +1057,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin1 = 0;\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1398,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_991/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:51.277262590 -0500\n@@ -1053,14 +1053,15 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Replace", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1383/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:35.805678018 -0500\n@@ -956,7 +956,7 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    cachedD = null;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_970/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:46.553244102 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "tType=-8;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_641/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:15.476854556 -0500\n@@ -1086,8 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1101,7 +1100,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        tType = -8;\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1208/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:42.741465716 -0500\n@@ -1134,14 +1134,10 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            tType = -4;\n+\t\t\treturn true;\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "if (flipIfWarranted(deflatedEnd,1)) {\n  dMin2=Math.min(dMin2,work[l - 1]);\n  work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));\n  work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));\n  qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));\n  dMin=-0.0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_193/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:05.878671838 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                main = transformer.getMainDiagonalRef();\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1103,7 +1103,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1398,8 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            dMin1 = dMin;\n+\t\t\teMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n  final double tmp=work[j4 + 1] / work[j4 - 2];\n  work[j4]=work[j4 - 1] * tmp;\n  d*=tmp;\n}\n else {\n  work[j4]=work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n  d*=work[j4 + 1] / work[j4 - 2];\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1753/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:22.346151390 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,15 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n+\t\t\t\tfinal double tmp = work[j4 + 1] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4 - 1] * tmp;\n+\t\t\t\td *= tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n+\t\t\t\td *= work[j4 + 1] / work[j4 - 2];\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1693/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:05.626076878 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1133,14 +1134,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2001/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:04.594602831 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType -= 12;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2278/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:33.406990431 -0500\n@@ -1060,7 +1060,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1134,12 +1142,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tau *= 0.25;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "cachedVt.setRowVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_703/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:32.040956655 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1086,8 +1085,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2519/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:47.691312350 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            dMin1 = 0;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1257/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:56.105518932 -0500\n@@ -941,7 +941,9 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    if (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1088,7 +1090,7 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                    dMin = Math.min(dMin, dN1);\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1101,7 +1103,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        dqd(start, deflatedEnd);\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_493/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:34.388400581 -0500\n@@ -1103,7 +1103,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Replace", 
          "seed": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1135/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:26.149399902 -0500\n@@ -1103,7 +1103,31 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        if ((dMin < 0.0)\n+\t\t\t\t\t\t\t\t&& (dMin1 > 0.0)\n+\t\t\t\t\t\t\t\t&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE\n+\t\t\t\t\t\t\t\t\t\t* (sigma + dN1))\n+\t\t\t\t\t\t\t\t&& (Math.abs(dN) < TOLERANCE * sigma)) {\n+\t\t\t\t\t\t\twork[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+\t\t\t\t\t\t\tdMin = 0.0;\n+\t\t\t\t\t\t\tupdateSigma(tau);\n+\t\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t\t} else if (dMin < 0.0) {\n+\t\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t\t}\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1158,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1493/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:05.853808512 -0500\n@@ -1052,7 +1052,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_58/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:11.346669315 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,8 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            dMin1 = dMin;\n+\t\t\teMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1627/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:49.398004339 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1379,7 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            tType = 0;\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2481/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:31.707243225 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1380,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            pingPong = 1 - pingPong;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1051/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:05.957320218 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    main = transformer.getMainDiagonalRef();\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_215/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:11.790713659 -0500\n@@ -954,7 +954,8 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin = Math.min(dMin, dN);\n+\t\t\t\t\twork[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "tType=-2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_579/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:00.800730196 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1378,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1537/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:22.489883543 -0500\n@@ -1060,7 +1060,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1134,11 +1142,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2208/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:09.894888143 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n@@ -1401,7 +1395,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "InsertBefore", 
          "seed": "updateSigma(tau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_376/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:01.923929048 -0500\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1375,8 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            updateSigma(tau);\n+\t\t\twork[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Replace", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Delete", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_645/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:16.504862048 -0500\n@@ -1059,7 +1059,7 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1377,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN = work[j4p2 + 2];\n+\t\t\t\tdMin = dN;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_939/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:38.085211033 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1205/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:42.061463013 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1378,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            tType = 0;\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n@@ -1411,7 +1408,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_813/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:05.109083196 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1055/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:06.633322879 -0500\n@@ -955,7 +955,11 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1052,7 +1056,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                sigmaLow = 0;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1133,14 +1137,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "cachedV.setColumnVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2077/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:23.938687556 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    this.imagEigenvalues = imagEigenvalues;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_875/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:21.493146519 -0500\n@@ -1086,8 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "cachedVt=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_304/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:45.811688979 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    cachedVt = null;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1133,14 +1134,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_411/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:09.628017180 -0500\n@@ -1134,12 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_533/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:49.608611457 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1398,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2473/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:29.687234484 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1398,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_928/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:35.385200509 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            return;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN1=work[j4p2 + 2];\n  dMin=dN1;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN1=dN2 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1807/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:42.862242524 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,21 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN1 = work[j4p2 + 2];\n+\t\t\t\tdMin = dN1;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN1 = dN2 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n+\t\t\t}\n+\t\t\teMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2524/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:48.751316932 -0500\n@@ -868,7 +868,11 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1138,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1411,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1715/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:11.706103999 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                sigmaLow = 0;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_241/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:24.579188186 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1432/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:48.885731686 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tType -= 12;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dMin1 = -work[4 * start + pingPong];\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2300/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:38.411012173 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_444/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:23.200189336 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1602/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:44.317981585 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1376,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "imagEigenvalues=new double[main.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_5/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:58:41.802667949 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            imagEigenvalues = new double[main.length];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "if (work[j4 - 3] == 0.0) {\n  work[j4 - 1]=0.0;\n  d=work[j4 + 2];\n  dMin=d;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) && (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n  final double tmp=work[j4 + 2] / work[j4 - 3];\n  work[j4 - 1]=work[j4] * tmp;\n  d*=tmp;\n}\n else {\n  work[j4 - 1]=work[j4 + 2] * (work[j4] / work[j4 - 3]);\n  d*=work[j4 + 2] / work[j4 - 3];\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1175/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:34.937434723 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1398,20 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            if (work[j4 - 3] == 0.0) {\n+\t\t\t\twork[j4 - 1] = 0.0;\n+\t\t\t\td = work[j4 + 2];\n+\t\t\t\tdMin = d;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4 + 2] / work[j4 - 3];\n+\t\t\t\twork[j4 - 1] = work[j4] * tmp;\n+\t\t\t\td *= tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);\n+\t\t\t\td *= work[j4 + 2] / work[j4 - 3];\n+\t\t\t}\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_342/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:54.303826094 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            dMin1 = 0;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1133,12 +1134,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            dMin2 = 0;\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1399,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            squaredSecondary = new double[secondary.length];\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_449/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:24.552218116 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    this.imagEigenvalues = imagEigenvalues;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "InsertBefore", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_883/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:23.569154570 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType -= 12;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_162/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:55.782671371 -0500\n@@ -1052,7 +1052,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_788/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:58.069056110 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1060,7 +1061,8 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                work[l - 1] = Math.min(work[l - 1],\n+\t\t\t\t\t\tMath.min(work[3 + pingPong], work[7 + pingPong]));\n             }\n         }\n \n@@ -1133,14 +1135,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n@@ -1404,7 +1399,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2534/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:51.463328653 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Replace", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_356/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:57.507871371 -0500\n@@ -1056,9 +1056,16 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n+                if (cachedV == null) {\n+\t\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1134,11 +1141,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_862/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:18.101133377 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1131,14 +1130,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "Arrays.sort(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2068/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:21.530677019 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1377,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1555/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:32.593928981 -0500\n@@ -1060,7 +1060,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1086,9 +1094,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1140,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 2]=dN1 + work[j4p2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1178/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:35.613437406 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1400,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            work[j4 - 2] = dN1 + work[j4p2];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1145/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:28.509409244 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1090,7 +1089,10 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    if (start >= deflatedEnd) {\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1399,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2297/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:37.739009254 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin1 = 0;\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1399,14 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            if (tType == -6) {\n+\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t} else if (tType == -18) {\n+\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t} else {\n+\t\t\t\tg = 0.25;\n+\t\t\t}\n+\t\t\tdMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_514/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:45.536561558 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1399,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2140/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:52.362811728 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dqd(start, deflatedEnd);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Replace", 
          "seed": "computeGershgorinCircles();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_623/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:11.744825099 -0500\n@@ -1103,7 +1103,7 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        computeGershgorinCircles();\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_878/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:22.241149419 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,17 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            if (cachedV == null) {\n+\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t}\n+\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Delete", 
          "seed": "eMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_779/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:56.393049673 -0500\n@@ -1060,7 +1060,6 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n             }\n         }\n \n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1376,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1557/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:32.929930490 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1404,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Delete", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1305/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:08.625568947 -0500\n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                dMin1 = dMin;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2273/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:32.410986102 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1377,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n@@ -1411,7 +1406,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1913/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:18.670400883 -0500\n@@ -1059,7 +1059,6 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_352/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:56.783861527 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "realEigenvalues[j]=tmp;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_407/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:08.960009685 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "d=work[pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_149/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:46.282670931 -0500\n@@ -942,7 +942,8 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    cachedD = null;\n+\t\t\t\t\td = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,8 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            d = work[pingPong];\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2232/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:15.922914388 -0500\n@@ -1090,7 +1090,10 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    if (start >= deflatedEnd) {\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1137,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_561/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:56.108683722 -0500\n@@ -1052,7 +1052,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1133,12 +1132,8 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+            dMin2 = 0;\n+\t\t\tfor (int i = 0; i < j; i += 4) {\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "tType=-2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2145/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:53.678817469 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1379,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN1=dN2 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2375/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:04.059123478 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1379,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n@@ -1411,7 +1406,15 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN1 = dN2 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n+\t\t\t}\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_973/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:47.225246730 -0500\n@@ -1134,12 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                lowerSpectra = Double.POSITIVE_INFINITY;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Replace", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "cachedV.setColumnVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2377/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:04.391124917 -0500\n@@ -956,7 +956,7 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    cachedD = null;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "eMin=Math.min(eMin,work[j4 - 1]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1543/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:29.549915303 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1406,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            eMin = Math.min(eMin, work[j4 - 1]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1168/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:33.577429329 -0500\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dN1 = 0;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dN1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1053/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:06.289321525 -0500\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dN1 = 0;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "InsertBefore", 
          "seed": "if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) && (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n  final double tmp=work[i + 2] / work[j];\n  work[j + 2]=work[i] * tmp;\n  d*=tmp;\n}\n else {\n  work[j + 2]=work[i + 2] * (work[i] / work[j]);\n  d*=work[i + 2] / work[j];\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "d=work[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < squaredSecondary.length; ++i) {\n  final double s=secondary[i];\n  squaredSecondary[i]=s * s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_92/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:27.950670083 -0500\n@@ -942,7 +942,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    dMin2 = 0;\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -956,8 +956,18 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    d = work[i];\n+\t\t\t\t\twork[j + 2] = 0.0;\n+                    if ((MathUtils.SAFE_MIN * work[i + 2] < work[j])\n+\t\t\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n+\t\t\t\t\t\tfinal double tmp = work[i + 2] / work[j];\n+\t\t\t\t\t\twork[j + 2] = work[i] * tmp;\n+\t\t\t\t\t\td *= tmp;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\twork[j + 2] = work[i + 2] * (work[i] / work[j]);\n+\t\t\t\t\t\td *= work[i + 2] / work[j];\n+\t\t\t\t\t}\n+\t\t\t\t\td = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1133,14 +1143,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1384,7 +1386,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_629/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:13.124836416 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin1 = 0;\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin <= 0.0) {\n  tau=-dMin;\n  tType=-1;\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_833/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:09.497100117 -0500\n@@ -956,7 +956,12 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin <= 0.0) {\n+\t\t\t\t\t\ttau = -dMin;\n+\t\t\t\t\t\ttType = -1;\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1139,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1930/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:22.858419350 -0500\n@@ -957,7 +957,8 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dN1 = 0;\n+\t\t\t\t\td = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1131,14 +1132,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1301/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:07.957566274 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "work[j + 2]=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_237/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:17.858960012 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_328/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:50.943775023 -0500\n@@ -868,7 +868,6 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_856/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:16.345126580 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1378,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            computeGershgorinCircles();\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin <= 0.0) {\n  tau=-dMin;\n  tType=-1;\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1732/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:16.170123892 -0500\n@@ -956,7 +956,12 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (dMin <= 0.0) {\n+\t\t\t\t\t\ttau = -dMin;\n+\t\t\t\t\t\ttType = -1;\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1139,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1358/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:29.581652985 -0500\n@@ -1088,7 +1088,7 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                    dMin = Math.min(dMin, dN1);\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1133,14 +1133,9 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_960/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:43.505232188 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                Arrays.sort(realEigenvalues);\n             }\n         }\n \n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1068/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:09.349333571 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_480/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:31.716354772 -0500\n@@ -1103,7 +1103,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Replace", 
          "seed": "Arrays.sort(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2485/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:32.711247569 -0500\n@@ -955,7 +955,10 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1137,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1382,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            Arrays.sort(realEigenvalues);\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1090/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:14.133352427 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "InsertBefore", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2234/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:16.254915833 -0500\n@@ -942,7 +942,8 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    main = transformer.getMainDiagonalRef();\n+\t\t\t\t\td = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1903/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:15.618387418 -0500\n@@ -941,7 +941,9 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    if (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1966/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:49.498536578 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1396,9 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n@@ -1412,7 +1409,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            lowerSpectra = Double.POSITIVE_INFINITY;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_536/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:50.328619908 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_676/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:25.204923450 -0500\n@@ -1086,8 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   dMin1 = 0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_202/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:08.298671950 -0500\n@@ -956,7 +956,6 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 2]=dN1 + work[j4p2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1932/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:23.202420867 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    tType = -5;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1103,7 +1103,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1400,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            work[j4 - 2] = dN1 + work[j4p2];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n@@ -1412,7 +1408,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_82/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:24.810669938 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1495/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:06.185810012 -0500\n@@ -1131,14 +1131,10 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n+            tau = 0.0;\n+\t\t\t// flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1321/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:13.077586767 -0500\n@@ -1052,7 +1052,16 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                if (cachedV == null) {\n+\t\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1143,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1172/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:34.265432058 -0500\n@@ -333,7 +333,10 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1060,7 +1063,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,9 +1379,7 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_196/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:06.562671869 -0500\n@@ -1133,14 +1133,9 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             return true;\n         }\n         return false;\n@@ -1402,7 +1397,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "InsertBefore", 
          "seed": "loop=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "tau=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_266/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:30.763363836 -0500\n@@ -1088,7 +1088,8 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                    loop = false;\n+\t\t\t\t\tdMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1136,7 +1137,7 @@\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n+                    tau = 0.0;\n                     work[j - k] = tmp;\n                 }\n                 j -= 4;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_592/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:03.876758764 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Delete", 
          "seed": "eMin=Math.min(work[j4 - 1],eMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2383/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:05.707130622 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,6 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_491/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:34.056395173 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            pingPong = 1 - pingPong;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2249/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:25.678956834 -0500\n@@ -868,7 +868,11 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1131,14 +1135,9 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1666/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:58.802046402 -0500\n@@ -1134,12 +1134,9 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                if (dMin1 == dN1) {\n+\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t}\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1760/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:24.014158811 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1090,7 +1091,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1596/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:42.885975166 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "InsertBefore", 
          "seed": "work[j + 2]=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_660/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:19.564884348 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1749/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:21.342146921 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1401,10 +1397,12 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            dMin1 = -work[4 * start + pingPong];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1508/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:15.253850942 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "tType=-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1489/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:04.837803920 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1101,7 +1100,8 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        tType = -8;\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n                         tType -= 12;\n                     }\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_131/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:40.286670654 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,9 +1397,10 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            pingPong = 1 - pingPong;\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            imagEigenvalues = new double[main.length];\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "cachedV.setColumnVector(k,eigenvectors[k]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN1=dN2 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN1=work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_507/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:43.864540202 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,15 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN1 = dN2 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n+\t\t\t}\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "Replace", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1662/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:58.098043255 -0500\n@@ -1053,12 +1053,11 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n-                    Math.min(work[l - 2 * pingPong],\n-                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n+                findEigenvalues();\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n@@ -1103,7 +1102,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1394,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n@@ -1412,7 +1405,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            lowerSpectra = Double.POSITIVE_INFINITY;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1634/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:51.186012342 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        tau = g * dMin;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "decompose();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_558/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:55.436676241 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,7 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            decompose();\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_950/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:40.829221738 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n@@ -1401,7 +1394,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_428/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:19.468112858 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1380,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1456/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:54.921759050 -0500\n@@ -956,7 +956,8 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    dN = 0;\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "work[i]=-0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1070/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:09.681334879 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    work[i] = -0.0;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2316/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:42.479029842 -0500\n@@ -333,7 +333,10 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1133,14 +1136,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_941/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:38.425212359 -0500\n@@ -1060,7 +1060,8 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                work[l - 1] = Math.min(work[l - 1],\n+\t\t\t\t\t\tMath.min(work[3 + pingPong], work[7 + pingPong]));\n             }\n         }\n \n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            dMin1 = -work[4 * start + pingPong];\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_366/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:59.875902835 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1378,7 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            tType = 0;\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n@@ -1404,7 +1400,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Delete", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_550/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:53.412654395 -0500\n@@ -1052,7 +1052,6 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Replace", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1521/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:18.433865276 -0500\n@@ -1101,8 +1101,7 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n+                        dN = 0;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_287/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:41.975617764 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                findEigenvalues();\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1846/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:53.702290554 -0500\n@@ -1056,10 +1056,12 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin = Math.min(dMin, dN1);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "return deflatedEnd;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_349/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:56.055851126 -0500\n@@ -1090,7 +1090,8 @@\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                     dMin = 0.0;\n                     updateSigma(tau);\n-                    return deflatedEnd;\n+                    tType = -4;\n+\t\t\t\t\treturn deflatedEnd;\n                 } else if (dMin < 0.0) {\n                     // tau too big. Select new tau and try again.\n                     if (tType < -22) {\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "work[j4]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1999/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:04.262601375 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    tType = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1378,8 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            work[j4] = 0.0;\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_618/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:10.728816955 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_473/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:30.020324468 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "InsertBefore", 
          "seed": "dqd(start,deflatedEnd);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "work[j + 2]=work[i] * tmp;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2051/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:17.502659387 -0500\n@@ -1101,9 +1101,11 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n+                        dqd(start, deflatedEnd);\n+\t\t\t\t\t\t// early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1136,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "double tmp=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1588/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:40.505964495 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                dMin1 = dMin;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2440/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:21.603199490 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1060,7 +1061,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1134,11 +1143,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2356/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:58.959101363 -0500\n@@ -1133,14 +1133,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin2 = 0;\n             return true;\n         }\n         return false;\n@@ -1402,7 +1395,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            squaredSecondary = new double[secondary.length];\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Delete", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1418/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:45.429716790 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_733/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:39.168983781 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tType -= 12;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1154/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:30.209415978 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                this.main = main.clone();\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "Delete", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_339/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:53.643816300 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                this.realEigenvalues = realEigenvalues;\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1134,14 +1135,8 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n         }\n         return false;\n     }\n@@ -1403,7 +1398,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1615/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:46.685992194 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    tType = -7;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,6 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "squaredSecondary[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_632/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:13.792841285 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                findEigenvalues();\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1238/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:51.329499893 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1033/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:01.553302902 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dMin = dN1;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "eMin=Math.min(eMin,work[j4 - 1]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1074/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:10.361337558 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1398,7 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            eMin = Math.min(eMin, work[j4 - 1]);\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "Replace", 
          "seed": "Arrays.sort(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1622/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:48.373999754 -0500\n@@ -1134,14 +1134,9 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n-            return true;\n+            Arrays.sort(realEigenvalues);\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Replace", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_308/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:46.843707017 -0500\n@@ -1101,8 +1101,7 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n+                        dN = 0;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1131,14 +1130,9 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2189/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:04.826866067 -0500\n@@ -1053,7 +1053,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,9 +1379,15 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            if (dMin1 > 0.0) {\n+\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\ttType -= 11;\n+\t\t\t} else {\n+\t\t\t\ttau *= 0.25;\n+\t\t\t\ttType -= 12;\n+\t\t\t}\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_620/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:11.072819530 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            squaredSecondary = new double[secondary.length];\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1250/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:54.425512232 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1133,14 +1131,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n@@ -1401,7 +1391,16 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n+\t\t\twork[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1437/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:50.237737818 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    squaredSecondary = new double[secondary.length];\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1854/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:56.062301000 -0500\n@@ -955,7 +955,8 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType -= 12;\n+\t\t\t\t\twork[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "tau*=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1539/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:22.845885146 -0500\n@@ -333,7 +333,8 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        tau *= 0.25;\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1378,17 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            if (cachedV == null) {\n+\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t}\n+\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_682/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:26.900934894 -0500\n@@ -333,7 +333,8 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        dMin = dN1;\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "dMin=-0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_318/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:48.895742490 -0500\n@@ -868,7 +868,8 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    secondary = transformer.getSecondaryDiagonalRef();\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1053,7 +1054,8 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n+                work = new double[6 * main.length];\n+\t\t\t\twork[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n@@ -1133,14 +1135,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            dMin = -0.0;\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1043/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:04.261313547 -0500\n@@ -955,7 +955,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    dMin1 = dMin;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Delete", 
          "seed": "work[j + 2]=work[i] * tmp;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2020/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:09.370623767 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_655/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:18.548876944 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2418/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:15.259172016 -0500\n@@ -956,8 +956,15 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n+                    dN1 = 0;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1141,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_781/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:56.721050933 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1144, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1255/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:55.765517576 -0500\n@@ -1134,14 +1134,11 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n-            return true;\n+            tType = -4;\n+\t\t\treturn true;\n         }\n         return false;\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1243/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:52.717505424 -0500\n@@ -955,7 +955,10 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1137,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1382,7 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n+            pingPong = 1 - pingPong;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n@@ -1412,7 +1410,8 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            cachedD = null;\n+\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "tType=-10;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1135, 
          "faulty": "int j=4 * n - 1;", 
          "type": "Replace", 
          "seed": "int j=realEigenvalues.length - 1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2018/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:09.034622294 -0500\n@@ -1059,7 +1059,8 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                tType = -10;\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1131,14 +1132,8 @@\n      */\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n+            int j = realEigenvalues.length - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1722/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:13.458111808 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_686/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:27.584938902 -0500\n@@ -1052,7 +1052,16 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                if (cachedV == null) {\n+\t\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1143,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1386,17 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n+            if (cachedV == null) {\n+\t\t\t\tif (eigenvectors == null) {\n+\t\t\t\t\tfindEigenVectors();\n+\t\t\t\t}\n+\t\t\t\tfinal int m = eigenvectors.length;\n+\t\t\t\tcachedV = MatrixUtils.createRealMatrix(m, m);\n+\t\t\t\tfor (int k = 0; k < m; ++k) {\n+\t\t\t\t\tcachedV.setColumnVector(k, eigenvectors[k]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_284/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:41.255603158 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Delete", 
          "seed": "secondary=transformer.getSecondaryDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_347/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:55.695845982 -0500\n@@ -868,7 +868,6 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1056,7 +1055,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                findEigenvalues();\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1778/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:28.826180209 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin = Math.min(dMin, dN);\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "computeGershgorinCircles();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1141/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:27.497405237 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1377,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "loop=false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "dMin=dN1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_257/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:28.667307363 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,12 +1133,8 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                tType -= 12;\n+                dMin = dN1;\n             }\n             return true;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "Replace", 
          "seed": "if (cachedVt == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedVt=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedVt.setRowVector(k,eigenvectors[k]);\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2107/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:44.034775385 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_984/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:49.597256011 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1379,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            dMin = Math.min(dMin, dN1);\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1423/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:46.453720920 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1140, 
          "faulty": "work[j - k]=tmp;", 
          "type": "Delete", 
          "seed": "realEigenvalues[j]=tmp;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1020/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:58.425290617 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    this.realEigenvalues = realEigenvalues;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Replace", 
          "seed": "cachedVt.setRowVector(k,eigenvectors[k]);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1113/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:20.017375653 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -942,7 +943,7 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n+                    cachedVt.setRowVector(k, eigenvectors[k]);\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "Delete", 
          "seed": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1624/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:48.710001259 -0500\n@@ -1060,7 +1060,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1103,7 +1111,6 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1141,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1387, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1158/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:31.225420004 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1384,7 +1379,6 @@\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1411/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:44.069711307 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1383,7 +1379,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            dMin = Math.min(dMin, dN1);\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "--j;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_634/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:14.120843791 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                --j;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "InsertBefore", 
          "seed": "work[j + 2]=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1938/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:30.610453505 -0500\n@@ -1133,14 +1133,6 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n             return true;\n         }\n         return false;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1370/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:32.769665803 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin = Math.min(dMin, dN1);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_716/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:34.788967102 -0500\n@@ -868,7 +868,11 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1452/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:54.257756042 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1408,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_651/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:17.880872075 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin2 = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1571/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:36.013944339 -0500\n@@ -1101,8 +1101,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1132,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                dMin1 = dMin;\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1406,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1062, 
          "faulty": "qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1136, 
          "faulty": "for (int i=0; i < j; i+=4) {\n  for (int k=0; k < 4; k+=step) {\n    final double tmp=work[i + k];\n    work[i + k]=work[j - k];\n    work[j - k]=tmp;\n  }\n  j-=4;\n}", 
          "type": "Replace", 
          "seed": "tType=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_97/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:29.354670148 -0500\n@@ -1059,7 +1059,10 @@\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n+                if (dMin1 == dN1) {\n+\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t}\n+\t\t\t\tqMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                 dMin  = -0.0;\n             }\n         }\n@@ -1133,14 +1136,7 @@\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n             int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n-            }\n+            tType = -1;\n             return true;\n         }\n         return false;\n@@ -1404,14 +1400,13 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = 0.0;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_471/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:29.684318324 -0500\n@@ -1060,7 +1060,7 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                tau = -dMin;\n             }\n         }\n \n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2269/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:31.374981598 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_117/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:35.730670443 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    dMin = Math.min(dMin, dN);\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "cachedV=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1106, 
          "faulty": "tType-=12;", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1349/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:27.201643421 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1052,7 +1053,10 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                if (cachedD == null) {\n+\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t}\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1086,8 +1090,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1103,7 +1106,8 @@\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n-                        tType -= 12;\n+                        dN1 = 0;\n+\t\t\t\t\t\ttType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "secondary[i]=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2053/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:17.834660841 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    secondary[i] = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    tType = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1664/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:58.454044847 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1382,7 +1378,6 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1214/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:44.405472332 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin = Math.min(dMin, dN1);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Replace", 
          "seed": "dN2=d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2031/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:12.026635404 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1397,7 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n+            dN2 = d;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1055, 
          "faulty": "dMin2=Math.min(dMin2,work[l - 1]);", 
          "type": "Replace", 
          "seed": "deflatedEnd-=2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_313/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:47.859724580 -0500\n@@ -1052,7 +1052,7 @@\n         // step 2: flip array if needed\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n-                dMin2 = Math.min(dMin2, work[l - 1]);\n+                deflatedEnd -= 2;\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "InsertBefore", 
          "seed": "++k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_815/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:05.449084506 -0500\n@@ -1056,7 +1056,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin = Math.min(dMin, dN1);\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "processGeneralBlock(n);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_310/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:47.187712963 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    processGeneralBlock(n);\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "InsertBefore", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1878/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:03.150332351 -0500\n@@ -956,7 +956,12 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\twork[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1139,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1406, 
          "faulty": "dMin=dN;", 
          "type": "Delete", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2004/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:05.262605760 -0500\n@@ -1086,8 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1403,7 +1397,6 @@\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n-            dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1385, 
          "faulty": "dN1=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1386, 
          "faulty": "dMin=dN1;", 
          "type": "Delete", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Replace", 
          "seed": "tType=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1660/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:57.766041772 -0500\n@@ -954,7 +954,7 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    tType = 0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1086,8 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1382,8 +1376,14 @@\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN1  = work[j4p2 + 2];\n-            dMin = dN1;\n+            if (dMin1 > 0.0) {\n+\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\ttType -= 11;\n+\t\t\t} else {\n+\t\t\t\ttau *= 0.25;\n+\t\t\t\ttType -= 12;\n+\t\t\t}\n+\t\t\tdN1  = work[j4p2 + 2];\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "InsertBefore", 
          "seed": "decompose();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_774/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:55.021044407 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,8 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n+            decompose();\n+\t\t\teMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1105, 
          "faulty": "tau*=0.25;", 
          "type": "Delete", 
          "seed": "dqd(start,deflatedEnd);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "tType=-3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_547/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:52.744647115 -0500\n@@ -1060,7 +1060,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1088,7 +1096,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1101,8 +1108,6 @@\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n                         tType -= 12;\n                     }\n                 } else if (Double.isNaN(dMin)) {\n@@ -1134,11 +1139,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1413,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1139, 
          "faulty": "work[i + k]=work[j - k];", 
          "type": "InsertBefore", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_745/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:42.240995498 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1399,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_372/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:00.895915501 -0500\n@@ -1086,9 +1086,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1132,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "d=work[pingPong];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1142, 
          "faulty": "j-=4;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1617/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:47.025993717 -0500\n@@ -1134,12 +1134,9 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+                if (dMin1 == dN1) {\n+\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t}\n             }\n             return true;\n         }\n@@ -1401,7 +1398,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            d = work[pingPong];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2510/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:39.447276707 -0500\n@@ -957,7 +957,7 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    dN1 = 0;\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1407,7 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+            lowerSpectra = Double.POSITIVE_INFINITY;\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "main=transformer.getMainDiagonalRef();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1056, 
          "faulty": "work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));", 
          "type": "Delete", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1673/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:00.826055445 -0500\n@@ -868,7 +868,16 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (tType < -22) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1053,9 +1062,6 @@\n         if ((dMin <= 0) || (deflatedEnd < end)) {\n             if (flipIfWarranted(deflatedEnd, 1)) {\n                 dMin2 = Math.min(dMin2, work[l - 1]);\n-                work[l - 1] =\n-                    Math.min(work[l - 1],\n-                             Math.min(work[3 + pingPong], work[7 + pingPong]));\n                 work[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n@@ -1086,8 +1092,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+                   tType = -5;\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n@@ -1134,11 +1139,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "Delete", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_468/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:29.012306034 -0500\n@@ -954,7 +954,6 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1405,7 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_271/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:37.851532786 -0500\n@@ -869,7 +869,7 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n+                    dN = 0;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                squaredSecondary = new double[secondary.length];\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1404, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "work[j4 - 3]=d + work[j4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 944, 
          "faulty": "work[i + 2]=-0.0;", 
          "type": "Replace", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_359/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:58.187880406 -0500\n@@ -941,7 +941,7 @@\n             double d = work[4 * (n - 1) + pingPong];\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n-                    work[i + 2] = -0.0;\n+                    this.imagEigenvalues = imagEigenvalues;\n                     d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1401,7 +1396,7 @@\n         j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            work[j4 - 3] = d + work[j4];\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_563/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:56.456687303 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN = work[j4p2 + 2];\n+\t\t\t\tdMin = dN;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=realEigenvalues[i];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1689/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:04.566072146 -0500\n@@ -868,7 +868,11 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    if (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\ti0 = 1 + i / 4;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 339, 
          "faulty": "return eigenvectors[i].copy();", 
          "type": "InsertBefore", 
          "seed": "dN1=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1415, 
          "faulty": "dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2094/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:40.338759245 -0500\n@@ -336,7 +336,8 @@\n         if (eigenvectors == null) {\n             findEigenVectors();\n         }\n-        return eigenvectors[i].copy();\n+        dN1 = 0;\n+\t\treturn eigenvectors[i].copy();\n     }\n \n     /**\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1412,7 +1408,6 @@\n             dN = dN1 * tmp;\n         } else {\n             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 958, 
          "faulty": "work[j]=d;", 
          "type": "Replace", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 337, 
          "faulty": "findEigenVectors();", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1329/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:15.409596109 -0500\n@@ -334,7 +334,8 @@\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n         if (eigenvectors == null) {\n-            findEigenVectors();\n+            tType -= 12;\n+\t\t\tfindEigenVectors();\n         }\n         return eigenvectors[i].copy();\n     }\n@@ -955,7 +956,7 @@\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n-                    work[j]     = d;\n+                    tType = -1;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n@@ -1134,11 +1135,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2026/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:11.026631023 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1406,8 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+            tau = -dMin;\n+\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_520/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:46.552574511 -0500\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1397,8 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            dMin = Math.min(dMin, dN1);\n+\t\t\tdN   = work[j4p2 + 2];\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1414, 
          "faulty": "work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_710/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:33.448962007 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1411,7 +1407,6 @@\n             work[j4] = work[j4p2] * tmp;\n             dN = dN1 * tmp;\n         } else {\n-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n         }\n         dMin = Math.min(dMin, dN);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 872, 
          "faulty": "break;", 
          "type": "Delete", 
          "seed": "secondary[i]=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1961/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:48.126530550 -0500\n@@ -869,7 +869,6 @@\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n                     i0 = 1 + i / 4;\n-                    break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n                     diagMin    = Math.min(diagMin, work[i + 4]);\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1091, 
          "faulty": "dMin=0.0;", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1384, 
          "faulty": "work[j4]=0.0;", 
          "type": "Replace", 
          "seed": "if (work[j4 - 2] == 0.0) {\n  work[j4]=0.0;\n  dN=work[j4p2 + 2];\n  dMin=dN;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) && (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n  final double tmp=work[j4p2 + 2] / work[j4 - 2];\n  work[j4]=work[j4p2] * tmp;\n  dN=dN1 * tmp;\n}\n else {\n  work[j4]=work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n  dN=work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "if (work[j4 - 3] == 0.0) {\n  work[j4 - 1]=0.0;\n  d=work[j4 + 2];\n  dMin=d;\n  eMin=0.0;\n}\n else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) && (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n  final double tmp=work[j4 + 2] / work[j4 - 3];\n  work[j4 - 1]=work[j4] * tmp;\n  d*=tmp;\n}\n else {\n  work[j4 - 1]=work[j4 + 2] * (work[j4] / work[j4 - 3]);\n  d*=work[j4 + 2] / work[j4 - 3];\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_584/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:02.156742790 -0500\n@@ -1088,7 +1088,6 @@\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n                    // convergence hidden by negative DN.\n                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1133,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1381,7 +1376,20 @@\n         int j4p2 = j4 + 2 * pingPong - 1;\n         work[j4 - 2] = dN2 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n-            work[j4] = 0.0;\n+            if (work[j4 - 2] == 0.0) {\n+\t\t\t\twork[j4] = 0.0;\n+\t\t\t\tdN = work[j4p2 + 2];\n+\t\t\t\tdMin = dN;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4p2 + 2] / work[j4 - 2];\n+\t\t\t\twork[j4] = work[j4p2] * tmp;\n+\t\t\t\tdN = dN1 * tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n+\t\t\t\tdN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n+\t\t\t}\n             dN1  = work[j4p2 + 2];\n             dMin = dN1;\n             eMin = 0.0;\n@@ -1402,7 +1410,20 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            if (work[j4 - 3] == 0.0) {\n+\t\t\t\twork[j4 - 1] = 0.0;\n+\t\t\t\td = work[j4 + 2];\n+\t\t\t\tdMin = d;\n+\t\t\t\teMin = 0.0;\n+\t\t\t} else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3])\n+\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n+\t\t\t\tfinal double tmp = work[j4 + 2] / work[j4 - 3];\n+\t\t\t\twork[j4 - 1] = work[j4] * tmp;\n+\t\t\t\td *= tmp;\n+\t\t\t} else {\n+\t\t\t\twork[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);\n+\t\t\t\td *= work[j4 + 2] / work[j4 - 3];\n+\t\t\t}\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1407, 
          "faulty": "eMin=0.0;", 
          "type": "Delete", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 945, 
          "faulty": "d=work[i];", 
          "type": "Delete", 
          "seed": "dMin2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_922/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:33.685193888 -0500\n@@ -942,7 +942,6 @@\n             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                 if (work[i + 2] <= TOLERANCE_2 * d) {\n                     work[i + 2] = -0.0;\n-                    d = work[i];\n                 } else {\n                     d *= work[i] / (d + work[i + 2]);\n                 }\n@@ -1134,11 +1133,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n@@ -1404,7 +1398,6 @@\n             work[j4] = 0.0;\n             dN   = work[j4p2 + 2];\n             dMin = dN;\n-            eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n             final double tmp = work[j4p2 + 2] / work[j4 - 2];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1090, 
          "faulty": "work[4 * deflatedEnd - 3 - pingPong]=0.0;", 
          "type": "Delete", 
          "seed": "decompose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 960, 
          "faulty": "d=work[i + 2];", 
          "type": "Replace", 
          "seed": "if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) && (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n  final double tmp=work[i + 2] / work[j];\n  work[j + 2]=work[i] * tmp;\n  d*=tmp;\n}\n else {\n  work[j + 2]=work[i + 2] * (work[i] / work[j]);\n  d*=work[i + 2] / work[j];\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1604/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:44.653983091 -0500\n@@ -957,7 +957,15 @@\n                     work[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n-                    d = work[i + 2];\n+                    if ((MathUtils.SAFE_MIN * work[i + 2] < work[j])\n+\t\t\t\t\t\t\t&& (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n+\t\t\t\t\t\tfinal double tmp = work[i + 2] / work[j];\n+\t\t\t\t\t\twork[j + 2] = work[i] * tmp;\n+\t\t\t\t\t\td *= tmp;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\twork[j + 2] = work[i + 2] * (work[i] / work[j]);\n+\t\t\t\t\t\td *= work[i + 2] / work[j];\n+\t\t\t\t\t}\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                     final double tmp = work[i + 2] / work[j];\n@@ -1086,9 +1094,7 @@\n                            (dMin1 > 0.0) &&\n                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                            (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n+                   dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n@@ -1134,11 +1140,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "--j;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 957, 
          "faulty": "work[i]=-0.0;", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2311/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:41.147024058 -0500\n@@ -954,7 +954,8 @@\n                 final int j = i - 2 * pingPong - 1;\n                 work[j] = d + work[i];\n                 if (work[i] <= TOLERANCE_2 * d) {\n-                    work[i]     = -0.0;\n+                    squaredSecondary = new double[secondary.length];\n+\t\t\t\t\twork[i]     = -0.0;\n                     work[j]     = d;\n                     work[j + 2] = 0.0;\n                     d = work[i + 2];\n@@ -1134,11 +1135,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1138, 
          "faulty": "final double tmp=work[i + k];", 
          "type": "Replace", 
          "seed": "final double tmp=work[i + 2] / work[j];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1405, 
          "faulty": "dN=work[j4p2 + 2];", 
          "type": "Replace", 
          "seed": "pingPong=1 - pingPong;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1827/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:48.378266974 -0500\n@@ -1134,11 +1134,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n@@ -1402,7 +1398,7 @@\n         work[j4 - 2] = dN1 + work[j4p2];\n         if (work[j4 - 2] == 0.0) {\n             work[j4] = 0.0;\n-            dN   = work[j4p2 + 2];\n+            pingPong = 1 - pingPong;\n             dMin = dN;\n             eMin = 0.0;\n         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < j; ++i) {\n  final double tmp=realEigenvalues[i];\n  realEigenvalues[i]=realEigenvalues[j];\n  realEigenvalues[j]=tmp;\n  --j;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 959, 
          "faulty": "work[j + 2]=0.0;", 
          "type": "Replace", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_2488/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:33.399250545 -0500\n@@ -956,7 +956,7 @@\n                 if (work[i] <= TOLERANCE_2 * d) {\n                     work[i]     = -0.0;\n                     work[j]     = d;\n-                    work[j + 2] = 0.0;\n+                    dN = 0;\n                     d = work[i + 2];\n                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n@@ -1134,11 +1134,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Delete", 
          "seed": "dMin1=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 871, 
          "faulty": "i0=1 + i / 4;", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 336, 
          "faulty": "if (eigenvectors == null) {\n  findEigenVectors();\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1059, 
          "faulty": "work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));", 
          "type": "InsertBefore", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1103/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:17.593366081 -0500\n@@ -333,7 +333,10 @@\n     /** {@inheritDoc} */\n     public RealVector getEigenvector(final int i)\n         throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n-        if (eigenvectors == null) {\n+        if (dMin1 == dN1) {\n+\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t}\n+\t\tif (eigenvectors == null) {\n             findEigenVectors();\n         }\n         return eigenvectors[i].copy();\n@@ -868,7 +871,7 @@\n             i0 = 0;\n             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                 if (work[i + 2] <= 0) {\n-                    i0 = 1 + i / 4;\n+                    tau *= 0.25;\n                     break;\n                 }\n                 if (diagMin >= 4 * offDiagMax) {\n@@ -1056,7 +1059,8 @@\n                 work[l - 1] =\n                     Math.min(work[l - 1],\n                              Math.min(work[3 + pingPong], work[7 + pingPong]));\n-                work[l - 2 * pingPong] =\n+                dMin1 = 0;\n+\t\t\t\twork[l - 2 * pingPong] =\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n@@ -1134,11 +1138,6 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1137, 
          "faulty": "for (int k=0; k < 4; k+=step) {\n  final double tmp=work[i + k];\n  work[i + k]=work[j - k];\n  work[j - k]=tmp;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1063, 
          "faulty": "dMin=-0.0;", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:18.366664089 -0500\n+++ /tmp/Arja_Defects4J_Math_80/patches_5yvr/Patch_1861/patched/tmp/Arja_Defects4J_Math_80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:58.114310080 -0500\n@@ -1060,7 +1060,15 @@\n                     Math.min(work[l - 2 * pingPong],\n                              Math.min(work[6 + pingPong], work[6 + pingPong]));\n                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n-                dMin  = -0.0;\n+                if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n         }\n \n@@ -1134,11 +1142,7 @@\n             // flip array\n             int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n+                tau *= 0.25;\n                 j -= 4;\n             }\n             return true;\n\n\n"
    }
  ]
}