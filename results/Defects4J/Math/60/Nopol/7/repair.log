cd /tmp/Nopol_Defects4J_Math_60;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/main/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/Nopol_Defects4J_Math_60/target/classes/:/tmp/Nopol_Defects4J_Math_60/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
22:50:07.562 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
22:50:07.576 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Math_60/target/classes/, file:/tmp/Nopol_Defects4J_Math_60/target/test-classes/, file:/tmp/Nopol_Defects4J_Math_60/target/classes/, file:/tmp/Nopol_Defects4J_Math_60/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
22:50:07.577 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
22:50:07.578 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.MessageFactoryTest, org.apache.commons.math.exception.util.MessageFactoryTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
22:50:07.582 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.MessageFactoryTest, org.apache.commons.math.exception.util.MessageFactoryTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.ParametricGaussianFunctionTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
22:50:07.583 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 8
22:50:07.597 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 182 MB
22:50:07.597 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
22:50:07.597 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 241 MB
22:50:07.598 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
22:50:07.599 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
22:50:07.599 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
22:51:03.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
22:51:03.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:186 which is executed by 1 tests
-82779744
22:51:04.887 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:05.038 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (112 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError: expected:<NaN> but was:<1.0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:06.326 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (43 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[expected:<NaN> but was:<1.0>]
junit.framework.AssertionFailedError: expected:<NaN> but was:<1.0>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:06.344 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:06.345 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): expected:<NaN> but was:<1.0>]
22:51:06.346 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:06.346 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:186.
22:51:06.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
22:51:06.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:164 which is executed by 1 tests
-82779744
22:51:06.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:06.626 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (76 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:07.011 [pool-9-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (52 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:07.025 [pool-10-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:07.026 [pool-7-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:07.026 [pool-7-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:07.026 [pool-7-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:164.
22:51:07.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
22:51:07.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:163 which is executed by 1 tests
-82779744
22:51:07.237 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:07.318 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (72 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:07.694 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (50 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:07.699 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:07.700 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:07.700 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:07.700 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:163.
22:51:07.700 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
22:51:07.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:171 which is executed by 3 tests
-82779744
22:51:07.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:08.008 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (76 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:08.399 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (53 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:08.404 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:08.406 [pool-15-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:08.406 [pool-15-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:08.406 [pool-15-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:171.
22:51:08.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
22:51:08.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:170 which is executed by 3 tests
-82779744
22:51:08.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:08.724 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (70 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:09.066 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (57 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:09.077 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:09.091 [pool-19-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:09.091 [pool-19-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:09.092 [pool-19-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:170.
22:51:09.092 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:09.182 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (84 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:09.523 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (52 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:104)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:09.529 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:09.530 [pool-23-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:09.530 [pool-23-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:09.531 [pool-23-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:170.
22:51:09.531 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
22:51:09.531 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:169 which is executed by 3 tests
-82779744
22:51:09.722 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:09.804 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (75 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:10.119 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (51 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:10.123 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:10.124 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:10.124 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:10.124 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:169.
22:51:10.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
22:51:10.126 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:162 which is executed by 3 tests
-82779744
22:51:10.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:10.393 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (74 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:103)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:10.713 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (53 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:103)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:10.718 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:10.719 [pool-31-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:10.719 [pool-31-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:10.719 [pool-31-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:162.
22:51:10.720 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:10.793 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:11.155 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (58 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:11.161 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:107)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:11.162 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:11.162 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:11.162 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:162.
22:51:11.163 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
22:51:11.163 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:161 which is executed by 3 tests
-82779744
22:51:11.351 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:11.426 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:11.735 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (49 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:11.739 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:11.740 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:11.741 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:11.741 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:161.
22:51:11.741 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
22:51:11.741 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:160 which is executed by 3 tests
-82779744
22:51:11.930 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:12.011 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (74 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:12.326 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (54 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:12.331 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:12.332 [pool-43-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:12.332 [pool-43-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:12.332 [pool-43-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:160.
22:51:12.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
22:51:12.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:159 which is executed by 3 tests
-82779744
22:51:12.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:12.603 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:12.923 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (56 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:101)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:12.929 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:12.930 [pool-47-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:12.930 [pool-47-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:12.930 [pool-47-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:159.
22:51:12.930 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
22:51:12.931 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:158 which is executed by 3 tests
-82779744
22:51:13.122 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:14.057 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (928 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:14.380 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (53 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:14.385 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:14.386 [pool-51-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:14.386 [pool-51-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:14.386 [pool-51-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:158.
22:51:14.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
22:51:14.387 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:153 which is executed by 3 tests
-82779744
22:51:14.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:14.651 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (71 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:14.949 [pool-57-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (48 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:14.954 [pool-58-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:14.955 [pool-55-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:14.955 [pool-55-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:14.956 [pool-55-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:153.
22:51:14.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:15.049 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (87 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:15.348 [pool-61-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (49 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:105)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:79)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:15.352 [pool-62-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction convergents diverged to +/- infinity for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction convergents diverged to +/- infinity for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:79)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:15.353 [pool-59-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:15.353 [pool-59-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction convergents diverged to +/- infinity for value ∞]
22:51:15.354 [pool-59-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:153.
22:51:15.354 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
22:51:15.354 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:152 which is executed by 3 tests
-82779744
22:51:15.541 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
22:51:15.541 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:151 which is executed by 3 tests
-82779744
22:51:15.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
22:51:15.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:150 which is executed by 3 tests
-82779744
22:51:15.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
22:51:15.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:149 which is executed by 3 tests
-82779744
22:51:16.099 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
22:51:16.099 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:183 which is executed by 6 tests
754024968
22:51:16.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
22:51:16.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:658 which is executed by 6 tests
1033054629
22:51:16.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:16.738 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (71 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:17.568 [pool-65-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (44 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:17.583 [pool-66-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:17.584 [pool-63-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:17.585 [pool-63-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:17.585 [pool-63-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:658.
22:51:17.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
22:51:17.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:654 which is executed by 6 tests
1033054629
22:51:17.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:17.942 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (71 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:18.627 [pool-69-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (55 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:18.633 [pool-70-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:18.634 [pool-67-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:18.634 [pool-67-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:18.634 [pool-67-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:654.
22:51:18.635 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:18.711 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (70 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:19.370 [pool-73-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (61 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

java.lang.NullPointerException
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:406)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
22:51:19.374 [pool-74-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.util.FastMath.exp(FastMath.java:406)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)

22:51:19.375 [pool-71-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:19.375 [pool-71-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:19.375 [pool-71-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:654.
22:51:19.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
22:51:19.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:653 which is executed by 6 tests
1033054629
22:51:19.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
22:51:19.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:127 which is executed by 8 tests
1270563308
22:51:19.850 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
22:51:19.850 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:125 which is executed by 8 tests
1270563308
22:51:20.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
22:51:20.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:53 which is executed by 11 tests
69946
22:51:20.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:20.295 [pool-76-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:20.548 [pool-77-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (45 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:20.564 [pool-78-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:20.564 [pool-75-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:20.565 [pool-75-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:20.565 [pool-75-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:53.
22:51:20.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
22:51:20.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:177 which is executed by 13 tests
754024968
22:51:20.761 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
22:51:20.762 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:169 which is executed by 13 tests
68567944
22:51:20.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:21.067 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (71 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:21.356 [pool-79-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:94: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:21.360 [pool-79-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(19).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(19).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = 0.0;

            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:21.364 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:21.365 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
22:51:21.365 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:55 which is executed by 14 tests
69946
22:51:21.547 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
22:51:21.547 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:52 which is executed by 14 tests
69946
22:51:21.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:21.815 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (79 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:22.065 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:22.082 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (15 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:8)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:22.083 [pool-81-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:22.083 [pool-81-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:22.083 [pool-81-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:52.
22:51:22.083 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:22.156 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:22.397 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:170)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:22.401 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:170)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:51:22.401 [pool-85-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:22.401 [pool-85-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:22.401 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:52.
22:51:22.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
22:51:22.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:51 which is executed by 14 tests
69946
22:51:22.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
22:51:22.581 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:360 which is executed by 17 tests
-1352183934
22:51:22.842 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
22:51:22.842 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.exception.util.LocalizedFormats:347 which is executed by 17 tests
-1352183934
22:51:23.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
22:51:23.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:169 which is executed by 17 tests
754024968
22:51:23.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:23.359 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: 
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:23.698 [pool-91-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (60 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[]
org.apache.commons.math.ConvergenceException:     at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:23.703 [pool-92-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:23.704 [pool-89-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:23.704 [pool-89-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:23.704 [pool-89-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:169.
22:51:23.705 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
22:51:23.705 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:168 which is executed by 17 tests
754024968
22:51:23.896 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:23.971 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (70 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: 
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:24.275 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (47 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[]
org.apache.commons.math.ConvergenceException:     at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:24.281 [pool-96-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:24.282 [pool-93-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:24.282 [pool-93-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:24.283 [pool-93-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:168.
22:51:24.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:24.356 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (68 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: 
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:24.665 [pool-99-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (48 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[]
org.apache.commons.math.ConvergenceException:     at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:24.670 [pool-100-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:24.671 [pool-97-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:24.671 [pool-97-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:24.671 [pool-97-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:168.
22:51:24.671 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
22:51:24.671 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:648 which is executed by 41 tests
1033054629
22:51:24.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:25.032 [pool-102-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:25.814 [pool-103-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (272 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:25.824 [pool-104-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:25.824 [pool-101-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:25.825 [pool-101-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:25.825 [pool-101-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:648.
22:51:25.825 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
22:51:25.825 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:644 which is executed by 41 tests
1033054629
22:51:26.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:26.164 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:26.679 [pool-107-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (52 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:26.688 [pool-108-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:26.688 [pool-105-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:26.688 [pool-105-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:26.688 [pool-105-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:644.
22:51:26.688 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:26.792 [pool-110-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (98 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:27.310 [pool-111-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (59 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

java.lang.NullPointerException
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:397)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
22:51:27.314 [pool-112-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.util.FastMath.exp(FastMath.java:397)
    at org.apache.commons.math.util.FastMath.exp(FastMath.java:347)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:267)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)

22:51:27.314 [pool-109-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:27.314 [pool-109-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:27.314 [pool-109-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:644.
22:51:27.314 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
22:51:27.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:173 which is executed by 46 tests
68567944
22:51:27.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:27.577 [pool-114-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:27.797 [pool-113-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:94: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:27.800 [pool-113-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(28).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(28).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));

                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:27.801 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:27.801 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
22:51:27.801 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma$1:262 which is executed by 53 tests
68567944
22:51:27.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
22:51:27.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma$1:257 which is executed by 53 tests
68567944
22:51:28.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
22:51:28.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:267 which is executed by 53 tests
68567944
22:51:28.367 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:28.444 [pool-116-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (70 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:28.768 [pool-117-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:28.785 [pool-118-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (15 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:100)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:28.785 [pool-115-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:28.786 [pool-115-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:28.786 [pool-115-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:267.
22:51:28.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
22:51:28.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:266 which is executed by 53 tests
68567944
22:51:28.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:29.057 [pool-120-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (73 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:29.276 [pool-119-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:125: error: variable ret might not have been initialized
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                                                                                                                                                                                               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:29.280 [pool-119-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(30).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("cf",cf);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));

                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:29.280 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:29.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
22:51:29.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:253 which is executed by 53 tests
68567944
22:51:29.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
22:51:29.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:247 which is executed by 54 tests
68567944
22:51:29.656 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:29.730 [pool-122-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:29.951 [pool-121-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:129: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:29.955 [pool-121-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(31).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("x < (a + 1.0)",x < (a + 1.0));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("1.0",1.0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("(a + 1.0)",(a + 1.0));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionEnds();
                }
                if (runtimeAngelicValue) if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }
            }

        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:29.956 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:29.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:30.030 [pool-124-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:30.311 [pool-125-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (51 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

java.lang.StackOverflowError
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:91)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
22:51:30.340 [pool-126-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (27 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
java.lang.StackOverflowError    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:91)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:111)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)

22:51:30.341 [pool-123-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:30.341 [pool-123-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:30.341 [pool-123-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:247.
22:51:30.342 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
22:51:30.342 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:245 which is executed by 55 tests
68567944
22:51:30.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:30.606 [pool-128-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:30.829 [pool-127-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:128: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:30.832 [pool-127-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(33).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("x == 0.0",x == 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionEnds();
            }
            if (runtimeAngelicValue) if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }

        }
        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:30.833 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:30.833 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:30.909 [pool-130-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (70 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:123)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:31.187 [pool-131-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (52 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:123)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:31.189 [pool-132-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:169)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:51:31.190 [pool-129-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:31.190 [pool-129-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:31.190 [pool-129-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:245.
22:51:31.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
22:51:31.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:270 which is executed by 60 tests
68567944
22:51:31.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
22:51:31.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:243 which is executed by 60 tests
68567944
22:51:31.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:31.640 [pool-134-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (69 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:31.859 [pool-133-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:129: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:31.862 [pool-133-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(35).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("(x < 0.0)",(x < 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("(a <= 0.0)",(a <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(35).collectionEnds();
        }
        if (runtimeAngelicValue) if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:31.863 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:31.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:31.935 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:32.211 [pool-137-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (50 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:32.213 [pool-138-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:51:32.214 [pool-135-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:32.214 [pool-135-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:32.214 [pool-135-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:243.
22:51:32.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
22:51:32.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:369 which is executed by 80 tests
22:51:32.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:369
22:51:32.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
22:51:32.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:368 which is executed by 80 tests
22:51:32.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:368
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:115 which is executed by 80 tests
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:115
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:110 which is executed by 80 tests
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:110
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
22:51:32.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:192 which is executed by 81 tests
68567944
22:51:32.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:32.478 [pool-140-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (70 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:32.699 [pool-139-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:97: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:32.703 [pool-139-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(37).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;

                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:32.703 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:32.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
22:51:32.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:189 which is executed by 81 tests
68567944
22:51:32.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:33.022 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (64 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:33.239 [pool-141-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:95: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:33.243 [pool-141-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(38).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(38).collectionEnds();
                        }
                        if (runtimeAngelicValue) if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }
                    }
                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:33.243 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:33.243 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:33.322 [pool-144-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (73 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:33.598 [pool-145-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (49 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:124)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:51:33.600 [pool-146-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:165)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:51:33.601 [pool-143-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:33.601 [pool-143-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
22:51:33.601 [pool-143-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:189.
22:51:33.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
22:51:33.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:187 which is executed by 81 tests
68567944
22:51:33.791 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:33.863 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:34.078 [pool-147-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:96: error: variable ret might not have been initialized
        return ret;
               ^
Note: Gamma.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
22:51:34.082 [pool-147-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math.util.FastMath.log((2.0 * (org.apache.commons.math.util.FastMath.PI))));

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.LANCZOS[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (org.apache.commons.math.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math.util.FastMath.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(40).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("n >= maxIterations",n >= maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(40).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math.util.FastMath.exp((((-x) + (a * (org.apache.commons.math.util.FastMath.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }
}
22:51:34.082 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:51:34.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:34.153 [pool-150-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (66 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:125)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:34.461 [pool-151-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (49 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:125)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:85)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
22:51:34.464 [pool-152-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:85)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

22:51:34.464 [pool-149-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:34.464 [pool-149-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): maximal number of iterations (10,000) exceeded]
22:51:34.464 [pool-149-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:187.
22:51:34.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
22:51:34.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:185 which is executed by 81 tests
68567944
22:51:34.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:34.725 [pool-154-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:35.001 [pool-155-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (50 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:35.005 [pool-156-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:35.006 [pool-153-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:35.006 [pool-153-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:35.006 [pool-153-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:185.
22:51:35.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
22:51:35.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:182 which is executed by 81 tests
68567944
22:51:35.192 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:35.265 [pool-158-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:86)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
22:51:35.631 [pool-159-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (142 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:86)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:160)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:35.638 [pool-160-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:126)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:49)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:51:35.639 [pool-157-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): maximal number of iterations (10,000) exceeded]
22:51:35.639 [pool-157-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Continued fraction diverged to NaN for value ∞]
22:51:35.639 [pool-157-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:182.
22:51:35.639 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
22:51:35.639 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:181 which is executed by 81 tests
68567944
22:51:35.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)
22:51:35.899 [pool-162-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Continued fraction diverged to NaN for value ∞]
org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:186)
    at org.apache.commons.math.special.Gamma.regularizedGammaQ(Gamma.java:266)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:173)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:127)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:174)

22:56:02.167 [pool-161-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
22:57:34.400 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
22:58:40.692 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
23:00:19.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:179 which is executed by 81 tests
java.lang.OutOfMemoryError: Java heap space
    at java.util.AbstractList.iterator(AbstractList.java:288)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:30)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:73)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:72)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)
java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at sun.nio.cs.UTF_8.newEncoder(UTF_8.java:72)
	at java.lang.StringCoding$StringEncoder.<init>(StringCoding.java:282)
	at java.lang.StringCoding$StringEncoder.<init>(StringCoding.java:273)
	at java.lang.StringCoding.encode(StringCoding.java:338)
	at java.lang.String.getBytes(String.java:918)
	at java.io.UnixFileSystem.getBooleanAttributes0(Native Method)
	at java.io.UnixFileSystem.getBooleanAttributes(UnixFileSystem.java:242)
	at java.io.File.isFile(File.java:882)
	at spoon.support.compiler.FileSystemFolder.getSubFolders(FileSystemFolder.java:86)23:38:22.376 [pool-163-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2806253 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Java heap space]
java.lang.OutOfMemoryError: Java heap space    at java.util.AbstractList.iterator(AbstractList.java:288)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:30)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:73)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:72)
    at org.apache.commons.math.special.Erf.erf(Erf.java:51)


	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:113)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:114)
	at spoon.support.StandardEnvironment.verifySourceClasspath(StandardEnvironment.java:444)
	at spoon.support.StandardEnvironment.setSourceClasspath(StandardEnvironment.java:428)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.setSourceClasspath(JDTBasedSpoonCompiler.java:321)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:47)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:213)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:154)
	at fr.inria.lille.repair.Main$1.call(Main.java:101)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
21941.58user 27.14system 48:17.26elapsed 758%CPU (0avgtext+0avgdata 4485852maxresident)k
51808inputs+9952outputs (4major+1423323minor)pagefaults 0swaps


Node: granduc-6.luxembourg.grid5000.fr



Date: Wed Nov 28 23:38:23 EST 2018

