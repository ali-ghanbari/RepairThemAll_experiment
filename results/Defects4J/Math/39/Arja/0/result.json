{
  "repair_end": "2018-12-01 13:55:26.737978", 
  "repair_begin": "2018-12-01 12:16:10.349887", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_975/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:21:59.306923197 -0500\n@@ -287,7 +287,10 @@\n \n     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);\n \n-    final int dimension = currentState.length;\n+    if (!forward) {\n+\t\th = -h;\n+\t}\n+\tfinal int dimension = currentState.length;\n \n     yDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_975/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:21:59.310923179 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 290, 
          "faulty": "final int dimension=currentState.length;", 
          "type": "InsertBefore", 
          "seed": "if (!forward) {\n  h=-h;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1499/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:48:38.587362681 -0500\n@@ -289,7 +289,10 @@\n \n     final int dimension = currentState.length;\n \n-    yDotKLast = new double[3][];\n+    if (currentState == null) {\n+\t\treturn;\n+\t}\n+\tyDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n       yDotKLast[k] = new double[dimension];\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1499/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:48:38.587362681 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 292, 
          "faulty": "yDotKLast=new double[3][];", 
          "type": "InsertBefore", 
          "seed": "if (currentState == null) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1363/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:41:50.509282169 -0500\n@@ -233,7 +233,8 @@\n         if (firstTime) {\n           final double[] scale = new double[mainSetDimension];\n           if (vecAbsoluteTolerance == null) {\n-              for (int i = 0; i < scale.length; ++i) {\n+              stepStart = equations.getTime();\n+\t\t\tfor (int i = 0; i < scale.length; ++i) {\n                 scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n               }\n           } else {\n@@ -251,7 +252,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 236, 
          "faulty": "for (int i=0; i < scale.length; ++i) {\n  scale[i]=scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n}", 
          "type": "InsertBefore", 
          "seed": "stepStart=equations.getTime();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1621/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:54:44.633644846 -0500\n@@ -299,7 +299,9 @@\n       v[k]  = new double[dimension];\n     }\n \n-    vectorsInitialized = false;\n+    System.arraycopy(yDotK[0], 0, interpolatedDerivatives, 0,\n+\t\t\tinterpolatedDerivatives.length);\n+\tvectorsInitialized = false;\n \n   }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1621/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:54:44.641644809 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 302, 
          "faulty": "vectorsInitialized=false;", 
          "type": "InsertBefore", 
          "seed": "System.arraycopy(yDotK[0],0,interpolatedDerivatives,0,interpolatedDerivatives.length);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1305/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:39:03.102071420 -0500\n@@ -299,7 +299,7 @@\n       v[k]  = new double[dimension];\n     }\n \n-    vectorsInitialized = false;\n+    yDotKLast[2] = (dimension < 0) ? null : new double[dimension];\n \n   }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1305/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:39:03.106071401 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 302, 
          "faulty": "vectorsInitialized=false;", 
          "type": "Replace", 
          "seed": "yDotKLast[2]=(dimension < 0) ? null : new double[dimension];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1018/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:24:18.750256090 -0500\n@@ -259,7 +259,11 @@\n             yTmp[j] = y[j] + stepSize * sum;\n           }\n \n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t\tcomputeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n \n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 262, 
          "faulty": "computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_789/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:12:19.537780370 -0500\n@@ -290,7 +290,8 @@\n     final int dimension = currentState.length;\n \n     yDotKLast = new double[3][];\n-    for (int k = 0; k < yDotKLast.length; ++k) {\n+    yDotKLast[0] = (dimension < 0) ? null : new double[dimension];\n+\tfor (int k = 0; k < yDotKLast.length; ++k) {\n       yDotKLast[k] = new double[dimension];\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_789/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:12:19.561780257 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 293, 
          "faulty": "for (int k=0; k < yDotKLast.length; ++k) {\n  yDotKLast[k]=new double[dimension];\n}", 
          "type": "InsertBefore", 
          "seed": "yDotKLast[0]=(dimension < 0) ? null : new double[dimension];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1098/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:28:31.645055944 -0500\n@@ -290,7 +290,8 @@\n     final int dimension = currentState.length;\n \n     yDotKLast = new double[3][];\n-    for (int k = 0; k < yDotKLast.length; ++k) {\n+    reinitialize(y, forward, primaryMapper, secondaryMappers);\n+\tfor (int k = 0; k < yDotKLast.length; ++k) {\n       yDotKLast[k] = new double[dimension];\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1098/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:28:31.649055925 -0500\n@@ -259,7 +259,11 @@\n             yTmp[j] = y[j] + stepSize * sum;\n           }\n \n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t\tcomputeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n \n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 262, 
          "faulty": "computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 293, 
          "faulty": "for (int k=0; k < yDotKLast.length; ++k) {\n  yDotKLast[k]=new double[dimension];\n}", 
          "type": "InsertBefore", 
          "seed": "reinitialize(y,forward,primaryMapper,secondaryMappers);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1237/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:35:39.939031063 -0500\n@@ -291,7 +291,8 @@\n \n     yDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n-      yDotKLast[k] = new double[dimension];\n+      yDotKLast[2] = (dimension < 0) ? null : new double[dimension];\n+\tyDotKLast[k] = new double[dimension];\n     }\n \n     v = new double[7][];\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1237/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:35:39.939031063 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 294, 
          "faulty": "yDotKLast[k]=new double[dimension];", 
          "type": "InsertBefore", 
          "seed": "yDotKLast[2]=(dimension < 0) ? null : new double[dimension];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1459/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:46:29.351969985 -0500\n@@ -294,7 +294,12 @@\n       yDotKLast[k] = new double[dimension];\n     }\n \n-    v = new double[7][];\n+    if (v == null) {\n+\t\tv = new double[7][];\n+\t\tfor (int k = 0; k < 7; ++k) {\n+\t\t\tv[k] = new double[interpolatedState.length];\n+\t\t}\n+\t}\n     for (int k = 0; k < v.length; ++k) {\n       v[k]  = new double[dimension];\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1459/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:46:29.351969985 -0500\n@@ -233,7 +233,14 @@\n         if (firstTime) {\n           final double[] scale = new double[mainSetDimension];\n           if (vecAbsoluteTolerance == null) {\n-              for (int i = 0; i < scale.length; ++i) {\n+              for (int j = 0; j < y0.length; ++j) {\n+\t\t\t\tdouble sum = b[0] * yDotK[0][j];\n+\t\t\t\tfor (int l = 1; l < stages; ++l) {\n+\t\t\t\t\tsum += b[l] * yDotK[l][j];\n+\t\t\t\t}\n+\t\t\t\tyTmp[j] = y[j] + stepSize * sum;\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < scale.length; ++i) {\n                 scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n               }\n           } else {\n@@ -251,7 +258,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 297, 
          "faulty": "v=new double[7][];", 
          "type": "Replace", 
          "seed": "if (v == null) {\n  v=new double[7][];\n  for (int k=0; k < 7; ++k) {\n    v[k]=new double[interpolatedState.length];\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 236, 
          "faulty": "for (int i=0; i < scale.length; ++i) {\n  scale[i]=scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < y0.length; ++j) {\n  double sum=b[0] * yDotK[0][j];\n  for (int l=1; l < stages; ++l) {\n    sum+=b[l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1455/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:46:22.420002573 -0500\n@@ -299,8 +299,6 @@\n       v[k]  = new double[dimension];\n     }\n \n-    vectorsInitialized = false;\n-\n   }\n \n   /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1455/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:46:22.420002573 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 302, 
          "faulty": "vectorsInitialized=false;", 
          "type": "Delete", 
          "seed": "yDotKLast[2]=(dimension < 0) ? null : new double[dimension];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1397/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:43:25.552834597 -0500\n@@ -289,7 +289,8 @@\n \n     final int dimension = currentState.length;\n \n-    yDotKLast = new double[3][];\n+    v = new double[7][];\n+\tyDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n       yDotKLast[k] = new double[dimension];\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1397/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:43:25.552834597 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 292, 
          "faulty": "yDotKLast=new double[3][];", 
          "type": "InsertBefore", 
          "seed": "v=new double[7][];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1221/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:34:49.563269366 -0500\n@@ -306,7 +306,13 @@\n   /** {@inheritDoc} */\n   @Override\n   public void storeTime(final double t) {\n-    super.storeTime(t);\n+    if (v == null) {\n+\t\tv = new double[7][];\n+\t\tfor (int k = 0; k < 7; ++k) {\n+\t\t\tv[k] = new double[interpolatedState.length];\n+\t\t}\n+\t}\n+\tsuper.storeTime(t);\n     vectorsInitialized = false;\n   }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1221/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:34:49.563269366 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 309, 
          "faulty": "super.storeTime(t);", 
          "type": "InsertBefore", 
          "seed": "if (v == null) {\n  v=new double[7][];\n  for (int k=0; k < 7; ++k) {\n    v[k]=new double[interpolatedState.length];\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_842/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:15:06.760970312 -0500\n@@ -287,10 +287,12 @@\n \n     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);\n \n-    final int dimension = currentState.length;\n+    previousState = null;\n+\tfinal int dimension = currentState.length;\n \n     yDotKLast = new double[3][];\n-    for (int k = 0; k < yDotKLast.length; ++k) {\n+    yDotKLast[0] = (dimension < 0) ? null : new double[dimension];\n+\tfor (int k = 0; k < yDotKLast.length; ++k) {\n       yDotKLast[k] = new double[dimension];\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_842/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:15:06.764970291 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 290, 
          "faulty": "final int dimension=currentState.length;", 
          "type": "InsertBefore", 
          "seed": "previousState=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 293, 
          "faulty": "for (int k=0; k < yDotKLast.length; ++k) {\n  yDotKLast[k]=new double[dimension];\n}", 
          "type": "InsertBefore", 
          "seed": "yDotKLast[0]=(dimension < 0) ? null : new double[dimension];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_982/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:22:20.218822848 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1273/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:37:29.286514289 -0500\n@@ -233,7 +233,14 @@\n         if (firstTime) {\n           final double[] scale = new double[mainSetDimension];\n           if (vecAbsoluteTolerance == null) {\n-              for (int i = 0; i < scale.length; ++i) {\n+              for (int j = 0; j < y0.length; ++j) {\n+\t\t\t\tdouble sum = b[0] * yDotK[0][j];\n+\t\t\t\tfor (int l = 1; l < stages; ++l) {\n+\t\t\t\t\tsum += b[l] * yDotK[l][j];\n+\t\t\t\t}\n+\t\t\t\tyTmp[j] = y[j] + stepSize * sum;\n+\t\t\t}\n+\t\t\tfor (int i = 0; i < scale.length; ++i) {\n                 scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n               }\n           } else {\n@@ -251,7 +258,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 236, 
          "faulty": "for (int i=0; i < scale.length; ++i) {\n  scale[i]=scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int j=0; j < y0.length; ++j) {\n  double sum=b[0] * yDotK[0][j];\n  for (int l=1; l < stages; ++l) {\n    sum+=b[l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1324/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:39:53.401834148 -0500\n@@ -299,7 +299,10 @@\n       v[k]  = new double[dimension];\n     }\n \n-    vectorsInitialized = false;\n+    for (int k = 0; k < v.length; ++k) {\n+\t\tv[k] = new double[dimension];\n+\t}\n+\tvectorsInitialized = false;\n \n   }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1324/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:39:53.401834148 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 302, 
          "faulty": "vectorsInitialized=false;", 
          "type": "InsertBefore", 
          "seed": "for (int k=0; k < v.length; ++k) {\n  v[k]=new double[dimension];\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1250/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:36:19.190845484 -0500\n@@ -287,7 +287,8 @@\n \n     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);\n \n-    final int dimension = currentState.length;\n+    previousState = null;\n+\tfinal int dimension = currentState.length;\n \n     yDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1250/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:36:19.194845464 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 290, 
          "faulty": "final int dimension=currentState.length;", 
          "type": "InsertBefore", 
          "seed": "previousState=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1417/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:44:30.016531222 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/util/FastMath.java\t2018-12-01 06:15:54.882605790 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1417/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/util/FastMath.java\t2018-12-01 07:44:30.016531222 -0500\n@@ -3255,11 +3255,14 @@\n             return direction;\n         } else if (Double.isInfinite(d)) {\n             return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n-        } else if (d == 0) {\n-            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n         }\n-        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n-        // are handled just as normal numbers\n+\t\telse if (d == direction) {\n+\t\t\treturn direction;\n+\t\t} else if (Double.isInfinite(d)) {\n+\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t} else if (d == 0) {\n+\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t}\n \n         final long bits = Double.doubleToLongBits(d);\n         final long sign = bits & 0x8000000000000000L;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/FastMath.java", 
          "line": 3258, 
          "faulty": "if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}", 
          "type": "Replace", 
          "seed": "if (d == direction) {\n  return direction;\n}\n else if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1580/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:52:47.822192712 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/util/FastMath.java\t2018-12-01 06:15:54.882605790 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1580/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/util/FastMath.java\t2018-12-01 07:52:47.822192712 -0500\n@@ -3255,11 +3255,19 @@\n             return direction;\n         } else if (Double.isInfinite(d)) {\n             return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n-        } else if (d == 0) {\n-            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n         }\n-        // special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n-        // are handled just as normal numbers\n+\t\telse {\n+\t\t\tif (d == direction) {\n+\t\t\t\treturn direction;\n+\t\t\t} else if (Double.isInfinite(d)) {\n+\t\t\t\treturn (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n+\t\t\t} else if (d == 0) {\n+\t\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t\t}\n+\t\t\tif (d == 0) {\n+\t\t\t\treturn (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n+\t\t\t}\n+\t\t}\n \n         final long bits = Double.doubleToLongBits(d);\n         final long sign = bits & 0x8000000000000000L;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/util/FastMath.java", 
          "line": 3258, 
          "faulty": "if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}", 
          "type": "InsertBefore", 
          "seed": "if (d == direction) {\n  return direction;\n}\n else if (Double.isInfinite(d)) {\n  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;\n}\n else if (d == 0) {\n  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1276/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:37:34.114491487 -0500\n@@ -248,10 +248,15 @@\n \n         stepSize = hNew;\n \n-        // next stages\n+        stepSize = hNew;\n+\t\t// next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 252, 
          "faulty": "for (int k=1; k < stages; ++k) {\n  for (int j=0; j < y0.length; ++j) {\n    double sum=a[k - 1][0] * yDotK[0][j];\n    for (int l=1; l < k; ++l) {\n      sum+=a[k - 1][l] * yDotK[l][j];\n    }\n    yTmp[j]=y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);\n}", 
          "type": "InsertBefore", 
          "seed": "stepSize=hNew;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1205/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:34:07.263469586 -0500\n@@ -299,7 +299,9 @@\n       v[k]  = new double[dimension];\n     }\n \n-    vectorsInitialized = false;\n+    for (int k = 0; k < v.length; ++k) {\n+\t\tv[k] = new double[dimension];\n+\t}\n \n   }\n \n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1205/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:34:07.263469586 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 302, 
          "faulty": "vectorsInitialized=false;", 
          "type": "Replace", 
          "seed": "for (int k=0; k < v.length; ++k) {\n  v[k]=new double[dimension];\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1181/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:32:59.843789014 -0500\n@@ -251,12 +251,17 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n             }\n-            yTmp[j] = y[j] + stepSize * sum;\n+            error = estimateError(yDotK, y, yTmp, stepSize);\n+\t\t\tyTmp[j] = y[j] + stepSize * sum;\n           }\n \n           computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 259, 
          "faulty": "yTmp[j]=y[j] + stepSize * sum;", 
          "type": "InsertBefore", 
          "seed": "error=estimateError(yDotK,y,yTmp,stepSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1292/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:38:27.750238252 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n@@ -259,7 +263,11 @@\n             yTmp[j] = y[j] + stepSize * sum;\n           }\n \n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t\tcomputeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n \n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 262, 
          "faulty": "computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1407/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:43:57.648683531 -0500\n@@ -251,7 +251,11 @@\n         // next stages\n         for (int k = 1; k < stages; ++k) {\n \n-          for (int j = 0; j < y0.length; ++j) {\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\t\tstepSize = t - stepStart;\n+\t\t\t}\n+\t\tfor (int j = 0; j < y0.length; ++j) {\n             double sum = a[k-1][0] * yDotK[0][j];\n             for (int l = 1; l < k; ++l) {\n               sum += a[k-1][l] * yDotK[l][j];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java", 
          "line": 247, 
          "faulty": "return 8;", 
          "type": "Replace", 
          "seed": "return 8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 254, 
          "faulty": "for (int j=0; j < y0.length; ++j) {\n  double sum=a[k - 1][0] * yDotK[0][j];\n  for (int l=1; l < k; ++l) {\n    sum+=a[k - 1][l] * yDotK[l][j];\n  }\n  yTmp[j]=y[j] + stepSize * sum;\n}", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 06:15:54.854605791 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1156/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\t2018-12-01 07:31:36.152185786 -0500\n@@ -287,7 +287,7 @@\n \n     super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);\n \n-    final int dimension = currentState.length;\n+    final int dimension = (currentState == null) ? -1 : currentState.length;\n \n     yDotKLast = new double[3][];\n     for (int k = 0; k < yDotKLast.length; ++k) {\n\n\n--- /tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 06:15:58.330605737 -0500\n+++ /tmp/Arja_Defects4J_Math_39/patches_69e6/Patch_1156/patched/tmp/Arja_Defects4J_Math_39/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\t2018-12-01 07:31:36.152185786 -0500\n@@ -259,7 +259,11 @@\n             yTmp[j] = y[j] + stepSize * sum;\n           }\n \n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+          if ((forward && (stepStart + stepSize > t))\n+\t\t\t\t|| ((!forward) && (stepStart + stepSize < t))) {\n+\t\t\tstepSize = t - stepStart;\n+\t\t}\n+\t\tcomputeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n \n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java", 
          "line": 290, 
          "faulty": "final int dimension=currentState.length;", 
          "type": "Replace", 
          "seed": "final int dimension=(currentState == null) ? -1 : currentState.length;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java", 
          "line": 262, 
          "faulty": "computeDerivatives(stepStart + c[k - 1] * stepSize,yTmp,yDotK[k]);", 
          "type": "InsertBefore", 
          "seed": "if ((forward && (stepStart + stepSize > t)) || ((!forward) && (stepStart + stepSize < t))) {\n  stepSize=t - stepStart;\n}"
        }
      ]
    }
  ]
}