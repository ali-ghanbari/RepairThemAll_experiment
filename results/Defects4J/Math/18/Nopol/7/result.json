{
  "repair_end": "2018-11-29 06:19:26.124786", 
  "repair_begin": "2018-11-29 06:03:36.131633", 
  "patches": [
    {
      "nb_test_that_execute_statement": 8, 
      "patchLocation": {
        "line": 529, 
        "class": "org.apache.commons.math3.optimization.direct.CMAESOptimizer"
      }, 
      "patchType": "PRECONDITION", 
      "patch": "--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -528,24 +528,26 @@\n \n-            if (hasInfiniteBounds) {\n-                // If there is at least one finite bound, none can be infinite,\n-                // because mixed cases are not supported by the current code.\n-                throw new MathUnsupportedOperationException();\n-            } else {\n-                // Convert API to internal handling of boundaries.\n-                boundaries = new double[2][];\n-                boundaries[0] = lB;\n-                boundaries[1] = uB;\n-\n-                // Abort early if the normalization will overflow (cf. \"encode\" method).\n-                for (int i = 0; i < lB.length; i++) {\n-                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n-                        final double max = Double.MAX_VALUE + boundaries[0][i];\n-                        final NumberIsTooLargeException e\n+            if (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs) {\n+                if (hasInfiniteBounds) {\n+                    // If there is at least one finite bound, none can be infinite,\n+                    // because mixed cases are not supported by the current code.\n+                    throw new MathUnsupportedOperationException();\n+                } else {\n+                    // Convert API to internal handling of boundaries.\n+                    boundaries = new double[2][];\n+                    boundaries[0] = lB;\n+                    boundaries[1] = uB;\n+                    \n+                    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                    for (int i = 0; i < lB.length; i++) {\n+                        if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n+                            final double max = Double.MAX_VALUE + boundaries[0][i];\n+                            final NumberIsTooLargeException e\n                             = new NumberIsTooLargeException(boundaries[1][i],\n-                                                            max,\n-                                                            true);\n-                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n-                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n-\n-                        throw e;\n+                            max,\n+                            true);\n+                            e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n+                            e.getContext().addMessage(LocalizedFormats.INDEX, i);\n+                            \n+                            throw e;\n+                        }\n                     }\n"
    }
  ]
}