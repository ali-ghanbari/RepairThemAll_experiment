cd /tmp/Nopol_Defects4J_Math_18;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/main/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/Nopol_Defects4J_Math_18/target/classes/:/tmp/Nopol_Defects4J_Math_18/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
00:03:38.200 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
00:03:38.215 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Math_18/target/classes/, file:/tmp/Nopol_Defects4J_Math_18/target/test-classes/, file:/tmp/Nopol_Defects4J_Math_18/target/classes/, file:/tmp/Nopol_Defects4J_Math_18/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
00:03:38.215 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
00:03:38.216 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest, org.apache.commons.math3.util.TransformerMapTest]
00:03:38.219 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest, org.apache.commons.math3.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
00:03:38.220 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 8
00:03:38.231 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 222 MB
00:03:38.232 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
00:03:38.232 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 241 MB
00:03:38.232 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
00:03:38.233 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
00:03:38.234 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
00:15:30.385 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
00:15:30.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer:87 which is executed by 1 tests
1460187237
00:15:30.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
00:15:30.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:482 which is executed by 1 tests
156678833
00:15:31.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000000401142> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:15:40.353 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8895 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000401142> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000401142> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999998195637> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:15:43.153 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (85 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999998195637> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999998195637> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999620616> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:15:43.173 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (17 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999620616> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999620616> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:15:43.174 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999998195637> but was:<8.0>]
00:15:43.174 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999620616> but was:<8.0>]
00:15:43.175 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:482.
00:15:43.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
00:15:43.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:751 which is executed by 2 tests
156678833
00:15:43.503 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000003600083> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:15:51.550 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8035 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000003600083> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000003600083> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999998863629> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:15:52.661 [pool-9-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (83 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999998863629> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999998863629> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999000412> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:15:52.682 [pool-10-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (19 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999000412> but was:<1.0>]
java.lang.AssertionError: expected:<11.099999999000412> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:15:52.683 [pool-7-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999998863629> but was:<8.0>]
00:15:52.684 [pool-7-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999000412> but was:<1.0>]
00:15:52.684 [pool-7-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:751.
00:15:52.684 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
00:15:52.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:583 which is executed by 2 tests
156678833
00:15:52.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000000138072> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:01.065 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8062 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000138072> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000138072> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NoDataException: matrix must have at least one row
    at org.apache.commons.math3.linear.Array2DRowRealMatrix.<init>(Array2DRowRealMatrix.java:110)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.sequence(CMAESOptimizer.java:826)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.initializeCMA(CMAESOptimizer.java:409)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:160)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
00:16:01.966 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (42 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[matrix must have at least one row]
org.apache.commons.math3.exception.NoDataException: matrix must have at least one row    at org.apache.commons.math3.linear.Array2DRowRealMatrix.<init>(Array2DRowRealMatrix.java:110)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.sequence(CMAESOptimizer.java:826)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.initializeCMA(CMAESOptimizer.java:409)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:160)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)

java.lang.AssertionError: expected:<11.100000000176742> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:02.022 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (54 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000176742> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000176742> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:16:02.024 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): matrix must have at least one row]
00:16:02.024 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000000176742> but was:<8.0>]
00:16:02.024 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:583.
00:16:02.025 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
00:16:02.025 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:476 which is executed by 2 tests
156678833
00:16:02.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.09999999867457> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:09.864 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7510 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.09999999867457> but was:<8.0>]
java.lang.AssertionError: expected:<11.09999999867457> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.10000000015506> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:10.752 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (91 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.10000000015506> but was:<8.0>]
java.lang.AssertionError: expected:<11.10000000015506> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000000911047> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:10.772 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (18 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000911047> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000911047> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:16:10.773 [pool-15-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.10000000015506> but was:<8.0>]
00:16:10.773 [pool-15-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000000911047> but was:<8.0>]
00:16:10.773 [pool-15-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:476.
00:16:10.774 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
00:16:10.774 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:459 which is executed by 4 tests
156678833
00:16:11.074 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000000575859> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:18.959 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7861 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000575859> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000575859> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999554445> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:19.815 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (85 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999554445> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999554445> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000000307944> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:19.842 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (16 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000307944> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000307944> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:16:19.843 [pool-19-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999554445> but was:<8.0>]
00:16:19.843 [pool-19-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000000307944> but was:<8.0>]
00:16:19.843 [pool-19-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:459.
00:16:19.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
00:16:19.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1038 which is executed by 4 tests
156678833
00:16:20.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
00:16:20.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1036 which is executed by 4 tests
156678833
00:16:20.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999685295> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:27.987 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7517 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999685295> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999685295> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999976323> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:28.837 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (120 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999976323> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999976323> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999931134> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:28.892 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (46 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999931134> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999931134> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:16:28.893 [pool-23-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999976323> but was:<8.0>]
00:16:28.894 [pool-23-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999931134> but was:<8.0>]
00:16:28.894 [pool-23-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1036.
00:16:28.894 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
00:16:28.895 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1035 which is executed by 4 tests
156678833
00:16:29.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
00:16:29.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1034 which is executed by 4 tests
156678833
00:16:29.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.09999999991116> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:37.243 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7720 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.09999999991116> but was:<8.0>]
java.lang.AssertionError: expected:<11.09999999991116> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000000119948> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:38.058 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (110 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000119948> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000119948> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999811299> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:38.105 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (45 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999811299> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999811299> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:16:38.106 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000000119948> but was:<8.0>]
00:16:38.106 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999811299> but was:<8.0>]
00:16:38.106 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1034.
00:16:38.106 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
00:16:38.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1033 which is executed by 4 tests
156678833
00:16:38.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
00:16:38.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1024 which is executed by 4 tests
156678833
00:16:38.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
00:16:38.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1021 which is executed by 4 tests
156678833
00:16:39.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999642428> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:48.533 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9517 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999642428> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999642428> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999875083> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:49.335 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (71 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999875083> but was:<1.0>]
java.lang.AssertionError: expected:<11.099999999875083> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999998477818> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:49.395 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (57 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999998477818> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999998477818> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:16:49.396 [pool-31-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999875083> but was:<1.0>]
00:16:49.396 [pool-31-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999998477818> but was:<8.0>]
00:16:49.396 [pool-31-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1021.
00:16:49.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
00:16:49.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1018 which is executed by 4 tests
156678833
00:16:49.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.10000000254895> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:57.329 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7611 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.10000000254895> but was:<8.0>]
java.lang.AssertionError: expected:<11.10000000254895> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999916452> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:58.191 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (67 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999916452> but was:<1.0>]
java.lang.AssertionError: expected:<11.099999999916452> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999149267> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:16:58.240 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (47 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999149267> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999149267> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:16:58.241 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999916452> but was:<1.0>]
00:16:58.241 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999149267> but was:<8.0>]
00:16:58.241 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1018.
00:16:58.243 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<11.10000000024369> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:06.428 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8177 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.10000000024369> but was:<8.0>]
java.lang.AssertionError: expected:<11.10000000024369> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999856559> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:07.235 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (104 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999856559> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999856559> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999223089> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:07.247 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999223089> but was:<1.0>]
java.lang.AssertionError: expected:<11.099999999223089> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:17:07.248 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999856559> but was:<8.0>]
00:17:07.248 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999223089> but was:<1.0>]
00:17:07.249 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1018.
00:17:07.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
00:17:07.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1016 which is executed by 4 tests
156678833
00:17:07.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999792175> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:15.073 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7499 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999792175> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999792175> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.1000000013422> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:15.847 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (73 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.1000000013422> but was:<1.0>]
java.lang.AssertionError: expected:<11.1000000013422> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000002911049> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:15.910 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (55 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000002911049> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000002911049> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:17:15.911 [pool-43-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.1000000013422> but was:<1.0>]
00:17:15.911 [pool-43-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000002911049> but was:<8.0>]
00:17:15.911 [pool-43-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1016.
00:17:15.911 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<11.100000001322849> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:23.437 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7516 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000001322849> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000001322849> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.10000000139497> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:24.256 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (103 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.10000000139497> but was:<8.0>]
java.lang.AssertionError: expected:<11.10000000139497> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.10000000259059> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:24.276 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.10000000259059> but was:<1.0>]
java.lang.AssertionError: expected:<11.10000000259059> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:17:24.277 [pool-47-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.10000000139497> but was:<8.0>]
00:17:24.277 [pool-47-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.10000000259059> but was:<1.0>]
00:17:24.277 [pool-47-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1016.
00:17:24.278 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
00:17:24.278 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1015 which is executed by 4 tests
156678833
00:17:24.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.09999999919806> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:32.177 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7594 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.09999999919806> but was:<8.0>]
java.lang.AssertionError: expected:<11.09999999919806> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000000681106> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:32.970 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (73 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000681106> but was:<1.0>]
java.lang.AssertionError: expected:<11.100000000681106> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000000364552> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:33.017 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (44 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000364552> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000364552> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:17:33.017 [pool-51-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000000681106> but was:<1.0>]
00:17:33.017 [pool-51-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000000364552> but was:<8.0>]
00:17:33.018 [pool-51-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1015.
00:17:33.018 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
00:17:33.018 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:1014 which is executed by 4 tests
156678833
00:17:33.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
00:17:33.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:974 which is executed by 4 tests
156678833
00:17:33.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
00:17:33.604 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:971 which is executed by 4 tests
156678833
00:17:33.895 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999811605> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:41.524 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7612 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999811605> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999811605> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:17:42.216 [pool-55-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
CMAESOptimizer.java:634: error: variable value might not have been initialized
            return isMinimize ? value : -value;
                                ^
CMAESOptimizer.java:634: error: variable value might not have been initialized
            return isMinimize ? value : -value;
                                         ^
00:17:42.483 [pool-55-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class CMAESOptimizer extends org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer<org.apache.commons.math3.analysis.MultivariateFunction> implements org.apache.commons.math3.optimization.MultivariateOptimizer {
    public static final int DEFAULT_CHECKFEASABLECOUNT = 0;

    public static final double DEFAULT_STOPFITNESS = 0;

    public static final boolean DEFAULT_ISACTIVECMA = true;

    public static final int DEFAULT_MAXITERATIONS = 30000;

    public static final int DEFAULT_DIAGONALONLY = 0;

    public static final org.apache.commons.math3.random.RandomGenerator DEFAULT_RANDOMGENERATOR = new org.apache.commons.math3.random.MersenneTwister();

    private int lambda;

    private boolean isActiveCMA;

    private int checkFeasableCount;

    private double[][] boundaries;

    private double[] inputSigma;

    private int dimension;

    private int diagonalOnly = 0;

    private boolean isMinimize = true;

    private boolean generateStatistics = false;

    private int maxIterations;

    private double stopFitness;

    private double stopTolUpX;

    private double stopTolX;

    private double stopTolFun;

    private double stopTolHistFun;

    private int mu;

    private double logMu2;

    private org.apache.commons.math3.linear.RealMatrix weights;

    private double mueff;

    private double sigma;

    private double cc;

    private double cs;

    private double damps;

    private double ccov1;

    private double ccovmu;

    private double chiN;

    private double ccov1Sep;

    private double ccovmuSep;

    private org.apache.commons.math3.linear.RealMatrix xmean;

    private org.apache.commons.math3.linear.RealMatrix pc;

    private org.apache.commons.math3.linear.RealMatrix ps;

    private double normps;

    private org.apache.commons.math3.linear.RealMatrix B;

    private org.apache.commons.math3.linear.RealMatrix D;

    private org.apache.commons.math3.linear.RealMatrix BD;

    private org.apache.commons.math3.linear.RealMatrix diagD;

    private org.apache.commons.math3.linear.RealMatrix C;

    private org.apache.commons.math3.linear.RealMatrix diagC;

    private int iterations;

    private double[] fitnessHistory;

    private int historySize;

    private org.apache.commons.math3.random.RandomGenerator random;

    private java.util.List<java.lang.Double> statisticsSigmaHistory = new java.util.ArrayList<java.lang.Double>();

    private java.util.List<org.apache.commons.math3.linear.RealMatrix> statisticsMeanHistory = new java.util.ArrayList<org.apache.commons.math3.linear.RealMatrix>();

    private java.util.List<java.lang.Double> statisticsFitnessHistory = new java.util.ArrayList<java.lang.Double>();

    private java.util.List<org.apache.commons.math3.linear.RealMatrix> statisticsDHistory = new java.util.ArrayList<org.apache.commons.math3.linear.RealMatrix>();

    public CMAESOptimizer() {
        this(0);
    }

    public CMAESOptimizer(int lambda) {
        this(lambda, null, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false);
    }

    public CMAESOptimizer(int lambda, double[] inputSigma) {
        this(lambda, inputSigma, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT, org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR, false);
    }

    @java.lang.Deprecated
    public CMAESOptimizer(int lambda, double[] inputSigma, int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math3.random.RandomGenerator random, boolean generateStatistics) {
        this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA, diagonalOnly, checkFeasableCount, random, generateStatistics, new org.apache.commons.math3.optimization.SimpleValueChecker());
    }

    public CMAESOptimizer(int lambda, double[] inputSigma, int maxIterations, double stopFitness, boolean isActiveCMA, int diagonalOnly, int checkFeasableCount, org.apache.commons.math3.random.RandomGenerator random, boolean generateStatistics, org.apache.commons.math3.optimization.ConvergenceChecker<org.apache.commons.math3.optimization.PointValuePair> checker) {
        super(checker);
        this.lambda = lambda;
        this.inputSigma = (inputSigma == null) ? null : ((double[]) (inputSigma.clone()));
        this.maxIterations = maxIterations;
        this.stopFitness = stopFitness;
        this.isActiveCMA = isActiveCMA;
        this.diagonalOnly = diagonalOnly;
        this.checkFeasableCount = checkFeasableCount;
        this.random = random;
        this.generateStatistics = generateStatistics;
    }

    public java.util.List<java.lang.Double> getStatisticsSigmaHistory() {
        return statisticsSigmaHistory;
    }

    public java.util.List<org.apache.commons.math3.linear.RealMatrix> getStatisticsMeanHistory() {
        return statisticsMeanHistory;
    }

    public java.util.List<java.lang.Double> getStatisticsFitnessHistory() {
        return statisticsFitnessHistory;
    }

    public java.util.List<org.apache.commons.math3.linear.RealMatrix> getStatisticsDHistory() {
        return statisticsDHistory;
    }

    @java.lang.Override
    protected org.apache.commons.math3.optimization.PointValuePair doOptimize() {
        checkParameters();
        isMinimize = getGoalType().equals(org.apache.commons.math3.optimization.GoalType.MINIMIZE);
        final org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction fitfun = new org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction();
        final double[] guess = fitfun.encode(getStartPoint());
        dimension = guess.length;
        initializeCMA(guess);
        iterations = 0;
        double bestValue = fitfun.value(guess);
        org.apache.commons.math3.optimization.direct.CMAESOptimizer.push(fitnessHistory, bestValue);
        org.apache.commons.math3.optimization.PointValuePair optimum = new org.apache.commons.math3.optimization.PointValuePair(getStartPoint(), (isMinimize ? bestValue : -bestValue));
        org.apache.commons.math3.optimization.PointValuePair lastResult = null;
        generationLoop : for (iterations = 1; (iterations) <= (maxIterations); (iterations)++) {
            org.apache.commons.math3.linear.RealMatrix arz = randn1(dimension, lambda);
            org.apache.commons.math3.linear.RealMatrix arx = org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(dimension, lambda);
            double[] fitness = new double[lambda];
            for (int k = 0; k < (lambda); k++) {
                org.apache.commons.math3.linear.RealMatrix arxk = null;
                for (int i = 0; i < ((checkFeasableCount) + 1); i++) {
                    if ((diagonalOnly) <= 0) {
                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));
                    }else {
                        arxk = xmean.add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(diagD, arz.getColumnMatrix(k)).scalarMultiply(sigma));
                    }
                    if ((i >= (checkFeasableCount)) || (fitfun.isFeasible(arxk.getColumn(0)))) {
                        break;
                    }
                    arz.setColumn(k, randn(dimension));
                }
                org.apache.commons.math3.optimization.direct.CMAESOptimizer.copyColumn(arxk, 0, arx, k);
                try {
                    fitness[k] = fitfun.value(arx.getColumn(k));
                } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) {
                    break generationLoop;
                }
            }
            int[] arindex = sortedIndices(fitness);
            org.apache.commons.math3.linear.RealMatrix xold = xmean;
            org.apache.commons.math3.linear.RealMatrix bestArx = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arx, org.apache.commons.math3.util.MathArrays.copyOf(arindex, mu));
            xmean = bestArx.multiply(weights);
            org.apache.commons.math3.linear.RealMatrix bestArz = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math3.util.MathArrays.copyOf(arindex, mu));
            org.apache.commons.math3.linear.RealMatrix zmean = bestArz.multiply(weights);
            boolean hsig = updateEvolutionPaths(zmean, xold);
            if ((diagonalOnly) <= 0) {
                updateCovariance(hsig, bestArx, arz, arindex, xold);
            }else {
                updateCovarianceDiagonalOnly(hsig, bestArz, xold);
            }
            sigma *= java.lang.Math.exp(java.lang.Math.min(1.0, (((((normps) / (chiN)) - 1.0) * (cs)) / (damps))));
            double bestFitness = fitness[arindex[0]];
            double worstFitness = fitness[arindex[((arindex.length) - 1)]];
            if (bestValue > bestFitness) {
                bestValue = bestFitness;
                lastResult = optimum;
                optimum = new org.apache.commons.math3.optimization.PointValuePair(fitfun.repairAndDecode(bestArx.getColumn(0)), (isMinimize ? bestFitness : -bestFitness));
                if (((getConvergenceChecker()) != null) && (lastResult != null)) {
                    if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {
                        break generationLoop;
                    }
                }
            }
            if ((stopFitness) != 0) {
                if (bestFitness < (isMinimize ? stopFitness : -(stopFitness))) {
                    break generationLoop;
                }
            }
            double[] sqrtDiagC = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(diagC).getColumn(0);
            double[] pcCol = pc.getColumn(0);
            for (int i = 0; i < (dimension); i++) {
                if (((sigma) * (java.lang.Math.max(java.lang.Math.abs(pcCol[i]), sqrtDiagC[i]))) > (stopTolX)) {
                    break;
                }
                if (i >= ((dimension) - 1)) {
                    break generationLoop;
                }
            }
            for (int i = 0; i < (dimension); i++) {
                if (((sigma) * (sqrtDiagC[i])) > (stopTolUpX)) {
                    break generationLoop;
                }
            }
            double historyBest = org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(fitnessHistory);
            double historyWorst = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(fitnessHistory);
            if (((iterations) > 2) && (((java.lang.Math.max(historyWorst, worstFitness)) - (java.lang.Math.min(historyBest, bestFitness))) < (stopTolFun))) {
                break generationLoop;
            }
            if (((iterations) > (fitnessHistory.length)) && ((historyWorst - historyBest) < (stopTolHistFun))) {
                break generationLoop;
            }
            if (((org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD)) / (org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(diagD))) > 1.0E7) {
                break generationLoop;
            }
            if ((getConvergenceChecker()) != null) {
                org.apache.commons.math3.optimization.PointValuePair current = new org.apache.commons.math3.optimization.PointValuePair(bestArx.getColumn(0), (isMinimize ? bestFitness : -bestFitness));
                if ((lastResult != null) && (getConvergenceChecker().converged(iterations, current, lastResult))) {
                    break generationLoop;
                }
                lastResult = current;
            }
            if (bestValue == (fitness[arindex[((int) (0.1 + ((lambda) / 4.0)))]])) {
                sigma = (sigma) * (java.lang.Math.exp((0.2 + ((cs) / (damps)))));
            }
            if (((iterations) > 2) && (((java.lang.Math.max(historyWorst, bestFitness)) - (java.lang.Math.min(historyBest, bestFitness))) == 0)) {
                sigma = (sigma) * (java.lang.Math.exp((0.2 + ((cs) / (damps)))));
            }
            org.apache.commons.math3.optimization.direct.CMAESOptimizer.push(fitnessHistory, bestFitness);
            fitfun.setValueRange((worstFitness - bestFitness));
            if (generateStatistics) {
                statisticsSigmaHistory.add(sigma);
                statisticsFitnessHistory.add(bestFitness);
                statisticsMeanHistory.add(xmean.transpose());
                statisticsDHistory.add(diagD.transpose().scalarMultiply(100000.0));
            }
        }
        return optimum;
    }

    private void checkParameters() {
        final double[] init = getStartPoint();
        final double[] lB = getLowerBound();
        final double[] uB = getUpperBound();
        boolean hasFiniteBounds = false;
        for (int i = 0; i < (lB.length); i++) {
            if ((!(java.lang.Double.isInfinite(lB[i]))) || (!(java.lang.Double.isInfinite(uB[i])))) {
                hasFiniteBounds = true;
                break;
            }
        }
        boolean hasInfiniteBounds = false;
        if (hasFiniteBounds) {
            for (int i = 0; i < (lB.length); i++) {
                if ((java.lang.Double.isInfinite(lB[i])) || (java.lang.Double.isInfinite(uB[i]))) {
                    hasInfiniteBounds = true;
                    break;
                }
            }
            if (hasInfiniteBounds) {
                throw new org.apache.commons.math3.exception.MathUnsupportedOperationException();
            }else {
                boundaries = new double[2][];
                boundaries[0] = lB;
                boundaries[1] = uB;
                for (int i = 0; i < (lB.length); i++) {
                    if (java.lang.Double.isInfinite(((boundaries[1][i]) - (boundaries[0][i])))) {
                        final double max = (java.lang.Double.MAX_VALUE) + (boundaries[0][i]);
                        final org.apache.commons.math3.exception.NumberIsTooLargeException e = new org.apache.commons.math3.exception.NumberIsTooLargeException(boundaries[1][i], max, true);
                        e.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
                        e.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX, i);
                        throw e;
                    }
                }
            }
        }else {
            boundaries = null;
        }
        if ((inputSigma) != null) {
            if ((inputSigma.length) != (init.length)) {
                throw new org.apache.commons.math3.exception.DimensionMismatchException(inputSigma.length, init.length);
            }
            for (int i = 0; i < (init.length); i++) {
                if ((inputSigma[i]) < 0) {
                    throw new org.apache.commons.math3.exception.NotPositiveException(inputSigma[i]);
                }
                if ((boundaries) != null) {
                    if ((inputSigma[i]) > ((boundaries[1][i]) - (boundaries[0][i]))) {
                        throw new org.apache.commons.math3.exception.OutOfRangeException(inputSigma[i], 0, ((boundaries[1][i]) - (boundaries[0][i])));
                    }
                }
            }
        }
    }

    private void initializeCMA(double[] guess) {
        if ((lambda) <= 0) {
            lambda = 4 + ((int) (3.0 * (java.lang.Math.log(dimension))));
        }
        double[][] sigmaArray = new double[guess.length][1];
        for (int i = 0; i < (guess.length); i++) {
            final double range = ((boundaries) == null) ? 1.0 : (boundaries[1][i]) - (boundaries[0][i]);
            sigmaArray[i][0] = ((inputSigma) == null ? 0.3 : inputSigma[i]) / range;
        }
        org.apache.commons.math3.linear.RealMatrix insigma = new org.apache.commons.math3.linear.Array2DRowRealMatrix(sigmaArray, false);
        sigma = org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(insigma);
        stopTolUpX = 1000.0 * (org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(insigma));
        stopTolX = 1.0E-11 * (org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(insigma));
        stopTolFun = 1.0E-12;
        stopTolHistFun = 1.0E-13;
        mu = (lambda) / 2;
        logMu2 = java.lang.Math.log(((mu) + 0.5));
        weights = org.apache.commons.math3.optimization.direct.CMAESOptimizer.log(org.apache.commons.math3.optimization.direct.CMAESOptimizer.sequence(1, mu, 1)).scalarMultiply((-1.0)).scalarAdd(logMu2);
        double sumw = 0;
        double sumwq = 0;
        for (int i = 0; i < (mu); i++) {
            double w = weights.getEntry(i, 0);
            sumw += w;
            sumwq += w * w;
        }
        weights = weights.scalarMultiply((1.0 / sumw));
        mueff = (sumw * sumw) / sumwq;
        cc = (4.0 + ((mueff) / (dimension))) / (((dimension) + 4.0) + ((2.0 * (mueff)) / (dimension)));
        cs = ((mueff) + 2.0) / (((dimension) + (mueff)) + 3.0);
        damps = ((1.0 + (2.0 * (java.lang.Math.max(0, ((java.lang.Math.sqrt((((mueff) - 1.0) / ((dimension) + 1.0)))) - 1.0))))) * (java.lang.Math.max(0.3, (1.0 - ((dimension) / (1.0E-6 + (java.lang.Math.min(maxIterations, ((getMaxEvaluations()) / (lambda)))))))))) + (cs);
        ccov1 = 2.0 / ((((dimension) + 1.3) * ((dimension) + 1.3)) + (mueff));
        ccovmu = java.lang.Math.min((1 - (ccov1)), ((2.0 * (((mueff) - 2.0) + (1.0 / (mueff)))) / ((((dimension) + 2.0) * ((dimension) + 2.0)) + (mueff))));
        ccov1Sep = java.lang.Math.min(1, (((ccov1) * ((dimension) + 1.5)) / 3.0));
        ccovmuSep = java.lang.Math.min((1 - (ccov1)), (((ccovmu) * ((dimension) + 1.5)) / 3.0));
        chiN = (java.lang.Math.sqrt(dimension)) * ((1.0 - (1.0 / (4.0 * (dimension)))) + (1 / ((21.0 * (dimension)) * (dimension))));
        xmean = org.apache.commons.math3.linear.MatrixUtils.createColumnRealMatrix(guess);
        diagD = insigma.scalarMultiply((1.0 / (sigma)));
        diagC = org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(diagD);
        pc = org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(dimension, 1);
        ps = org.apache.commons.math3.optimization.direct.CMAESOptimizer.zeros(dimension, 1);
        normps = ps.getFrobeniusNorm();
        B = org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(dimension, dimension);
        D = org.apache.commons.math3.optimization.direct.CMAESOptimizer.ones(dimension, 1);
        BD = org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(B, org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(diagD.transpose(), dimension, 1));
        C = B.multiply(org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(D)).multiply(B.transpose()));
        historySize = 10 + ((int) (((3.0 * 10.0) * (dimension)) / (lambda)));
        fitnessHistory = new double[historySize];
        for (int i = 0; i < (historySize); i++) {
            fitnessHistory[i] = java.lang.Double.MAX_VALUE;
        }
    }

    private boolean updateEvolutionPaths(org.apache.commons.math3.linear.RealMatrix zmean, org.apache.commons.math3.linear.RealMatrix xold) {
        ps = ps.scalarMultiply((1.0 - (cs))).add(B.multiply(zmean).scalarMultiply(java.lang.Math.sqrt((((cs) * (2.0 - (cs))) * (mueff)))));
        normps = ps.getFrobeniusNorm();
        boolean hsig = (((normps) / (java.lang.Math.sqrt((1.0 - (java.lang.Math.pow((1.0 - (cs)), (2.0 * (iterations)))))))) / (chiN)) < (1.4 + (2.0 / ((dimension) + 1.0)));
        pc = pc.scalarMultiply((1.0 - (cc)));
        if (hsig) {
            pc = pc.add(xmean.subtract(xold).scalarMultiply(((java.lang.Math.sqrt((((cc) * (2.0 - (cc))) * (mueff)))) / (sigma))));
        }
        return hsig;
    }

    private void updateCovarianceDiagonalOnly(boolean hsig, final org.apache.commons.math3.linear.RealMatrix bestArz, final org.apache.commons.math3.linear.RealMatrix xold) {
        double oldFac = (hsig) ? 0 : ((ccov1Sep) * (cc)) * (2.0 - (cc));
        oldFac += (1.0 - (ccov1Sep)) - (ccovmuSep);
        diagC = diagC.scalarMultiply(oldFac).add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(pc).scalarMultiply(ccov1Sep)).add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(diagC, org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(bestArz).multiply(weights)).scalarMultiply(ccovmuSep));
        diagD = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(diagC);
        if (((diagonalOnly) > 1) && ((iterations) > (diagonalOnly))) {
            diagonalOnly = 0;
            B = org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(dimension, dimension);
            BD = org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(diagD);
            C = org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(diagC);
        }
    }

    private void updateCovariance(boolean hsig, final org.apache.commons.math3.linear.RealMatrix bestArx, final org.apache.commons.math3.linear.RealMatrix arz, final int[] arindex, final org.apache.commons.math3.linear.RealMatrix xold) {
        double negccov = 0;
        if (((ccov1) + (ccovmu)) > 0) {
            org.apache.commons.math3.linear.RealMatrix arpos = bestArx.subtract(org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(xold, 1, mu)).scalarMultiply((1.0 / (sigma)));
            org.apache.commons.math3.linear.RealMatrix roneu = pc.multiply(pc.transpose()).scalarMultiply(ccov1);
            double oldFac = (hsig) ? 0 : ((ccov1) * (cc)) * (2.0 - (cc));
            oldFac += (1.0 - (ccov1)) - (ccovmu);
            if (isActiveCMA) {
                negccov = (((1.0 - (ccovmu)) * 0.25) * (mueff)) / ((java.lang.Math.pow(((dimension) + 2.0), 1.5)) + (2.0 * (mueff)));
                double negminresidualvariance = 0.66;
                double negalphaold = 0.5;
                int[] arReverseIndex = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(arindex);
                org.apache.commons.math3.linear.RealMatrix arzneg = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arz, org.apache.commons.math3.util.MathArrays.copyOf(arReverseIndex, mu));
                org.apache.commons.math3.linear.RealMatrix arnorms = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(org.apache.commons.math3.optimization.direct.CMAESOptimizer.sumRows(org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(arzneg)));
                int[] idxnorms = sortedIndices(arnorms.getRow(0));
                org.apache.commons.math3.linear.RealMatrix arnormsSorted = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxnorms);
                int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms);
                org.apache.commons.math3.linear.RealMatrix arnormsReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxReverse);
                arnorms = org.apache.commons.math3.optimization.direct.CMAESOptimizer.divide(arnormsReverse, arnormsSorted);
                int[] idxInv = org.apache.commons.math3.optimization.direct.CMAESOptimizer.inverse(idxnorms);
                org.apache.commons.math3.linear.RealMatrix arnormsInv = org.apache.commons.math3.optimization.direct.CMAESOptimizer.selectColumns(arnorms, idxInv);
                double negcovMax = (1.0 - negminresidualvariance) / (org.apache.commons.math3.optimization.direct.CMAESOptimizer.square(arnormsInv).multiply(weights).getEntry(0, 0));
                if (negccov > negcovMax) {
                    negccov = negcovMax;
                }
                arzneg = org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(arzneg, org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(arnormsInv, dimension, 1));
                org.apache.commons.math3.linear.RealMatrix artmp = BD.multiply(arzneg);
                org.apache.commons.math3.linear.RealMatrix Cneg = artmp.multiply(org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(weights)).multiply(artmp.transpose());
                oldFac += negalphaold * negccov;
                C = C.scalarMultiply(oldFac).add(roneu).add(arpos.scalarMultiply(((ccovmu) + ((1.0 - negalphaold) * negccov))).multiply(org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(weights, 1, dimension), arpos.transpose()))).subtract(Cneg.scalarMultiply(negccov));
            }else {
                C = C.scalarMultiply(oldFac).add(roneu).add(arpos.scalarMultiply(ccovmu).multiply(org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(weights, 1, dimension), arpos.transpose())));
            }
        }
        updateBD(negccov);
    }

    private void updateBD(double negccov) {
        if (((((ccov1) + (ccovmu)) + negccov) > 0) && ((((((iterations) % 1.0) / (((ccov1) + (ccovmu)) + negccov)) / (dimension)) / 10.0) < 1.0)) {
            C = org.apache.commons.math3.optimization.direct.CMAESOptimizer.triu(C, 0).add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.triu(C, 1).transpose());
            org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C);
            B = eig.getV();
            D = eig.getD();
            diagD = org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(D);
            if ((org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(diagD)) <= 0) {
                for (int i = 0; i < (dimension); i++) {
                    if ((diagD.getEntry(i, 0)) < 0) {
                        diagD.setEntry(i, 0, 0.0);
                    }
                }
                double tfac = (org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD)) / 1.0E14;
                C = C.add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(dimension, dimension).scalarMultiply(tfac));
                diagD = diagD.add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.ones(dimension, 1).scalarMultiply(tfac));
            }
            if ((org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD)) > (1.0E14 * (org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(diagD)))) {
                double tfac = ((org.apache.commons.math3.optimization.direct.CMAESOptimizer.max(diagD)) / 1.0E14) - (org.apache.commons.math3.optimization.direct.CMAESOptimizer.min(diagD));
                C = C.add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.eye(dimension, dimension).scalarMultiply(tfac));
                diagD = diagD.add(org.apache.commons.math3.optimization.direct.CMAESOptimizer.ones(dimension, 1).scalarMultiply(tfac));
            }
            diagC = org.apache.commons.math3.optimization.direct.CMAESOptimizer.diag(C);
            diagD = org.apache.commons.math3.optimization.direct.CMAESOptimizer.sqrt(diagD);
            BD = org.apache.commons.math3.optimization.direct.CMAESOptimizer.times(B, org.apache.commons.math3.optimization.direct.CMAESOptimizer.repmat(diagD.transpose(), dimension, 1));
        }
    }

    private static void push(double[] vals, double val) {
        for (int i = (vals.length) - 1; i > 0; i--) {
            vals[i] = vals[(i - 1)];
        }
        vals[0] = val;
    }

    private int[] sortedIndices(final double[] doubles) {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex[] dis = new org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex[doubles.length];
        for (int i = 0; i < (doubles.length); i++) {
            dis[i] = new org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex(doubles[i], i);
        }
        java.util.Arrays.sort(dis);
        int[] indices = new int[doubles.length];
        for (int i = 0; i < (doubles.length); i++) {
            indices[i] = dis[i].index;
        }
        return indices;
    }

    private static class DoubleIndex implements java.lang.Comparable<org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex> {
        private double value;

        private int index;

        DoubleIndex(double value, int index) {
            this.value = value;
            this.index = index;
        }

        public int compareTo(org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex o) {
            return java.lang.Double.compare(value, o.value);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if ((this) == other) {
                return true;
            }
            if (other instanceof org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex) {
                return (java.lang.Double.compare(value, ((org.apache.commons.math3.optimization.direct.CMAESOptimizer.DoubleIndex) (other)).value)) == 0;
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            long bits = java.lang.Double.doubleToLongBits(value);
            return ((int) (((1438542 ^ (bits >>> 32)) ^ bits) & -1));
        }
    }

    private class FitnessFunction {
        private double valueRange;

        private boolean isRepairMode;

        public FitnessFunction() {
            valueRange = 1.0;
            isRepairMode = true;
        }

        public double[] encode(final double[] x) {
            if ((boundaries) == null) {
                return x;
            }
            double[] res = new double[x.length];
            for (int i = 0; i < (x.length); i++) {
                double diff = (boundaries[1][i]) - (boundaries[0][i]);
                res[i] = ((x[i]) - (boundaries[0][i])) / diff;
            }
            return res;
        }

        public double[] repairAndDecode(final double[] x) {
            return ((boundaries) != null) && (isRepairMode) ? decode(repair(x)) : decode(x);
        }

        public double[] decode(final double[] x) {
            if ((boundaries) == null) {
                return x;
            }
            double[] res = new double[x.length];
            for (int i = 0; i < (x.length); i++) {
                double diff = (boundaries[1][i]) - (boundaries[0][i]);
                res[i] = (diff * (x[i])) + (boundaries[0][i]);
            }
            return res;
        }

        public double value(final double[] point) {
            double value;
            if (((boundaries) != null) && (isRepairMode)) {
                double[] repaired = repair(point);
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.chiN",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.chiN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolFun",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolFun);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.mueff",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.mueff);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.generateStatistics",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.generateStatistics);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.B",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.B);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.C",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.C);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.lambda",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.lambda);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.D",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.D);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.historySize",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.historySize);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.inputSigma",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.inputSigma);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.weights",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.weights);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ps",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ps);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.diagC",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.diagC);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.diagD",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.diagD);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT",org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_CHECKFEASABLECOUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.pc",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.pc);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsFitnessHistory",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsFitnessHistory);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolUpX",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolUpX);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cc",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.maxIterations",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.isActiveCMA",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.isActiveCMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.checkFeasableCount",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.checkFeasableCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsDHistory",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsDHistory);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("repaired",repaired);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.iterations",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.iterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY",org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_DIAGONALONLY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS",org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_STOPFITNESS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.random",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.random);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolX",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolX);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.diagonalOnly",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.diagonalOnly);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.BD",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.BD);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1Sep",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1Sep);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsMeanHistory",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsMeanHistory);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.this.valueRange",org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.this.valueRange);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("point",point);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.fitnessHistory",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.fitnessHistory);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.normps",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.normps);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccovmu",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccovmu);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.damps",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.damps);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.this.isRepairMode",org.apache.commons.math3.optimization.direct.CMAESOptimizer.FitnessFunction.this.isRepairMode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.dimension",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.dimension);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS",org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_MAXITERATIONS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.logMu2",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.logMu2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopFitness",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopFitness);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.isMinimize",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.isMinimize);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.sigma",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.sigma);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.mu",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.mu);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolHistFun",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.stopTolHistFun);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.xmean",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.xmean);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.boundaries",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.boundaries);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR",org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_RANDOMGENERATOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA",org.apache.commons.math3.optimization.direct.CMAESOptimizer.DEFAULT_ISACTIVECMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccovmuSep",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccovmuSep);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsSigmaHistory",org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.statisticsSigmaHistory);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
                }
                if (runtimeAngelicValue)
                    value = (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(repaired))) + (penalty(point, repaired));

            }else {
                value = org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.computeObjectiveValue(decode(point));
            }
            return isMinimize ? value : -value;
        }

        public boolean isFeasible(final double[] x) {
            if ((boundaries) == null) {
                return true;
            }
            for (int i = 0; i < (x.length); i++) {
                if ((x[i]) < 0) {
                    return false;
                }
                if ((x[i]) > 1.0) {
                    return false;
                }
            }
            return true;
        }

        public void setValueRange(double valueRange) {
            this.valueRange = valueRange;
        }

        private double[] repair(final double[] x) {
            double[] repaired = new double[x.length];
            for (int i = 0; i < (x.length); i++) {
                if ((x[i]) < 0) {
                    repaired[i] = 0;
                }else
                    if ((x[i]) > 1.0) {
                        repaired[i] = 1.0;
                    }else {
                        repaired[i] = x[i];
                    }

            }
            return repaired;
        }

        private double penalty(final double[] x, final double[] repaired) {
            double penalty = 0;
            for (int i = 0; i < (x.length); i++) {
                double diff = java.lang.Math.abs(((x[i]) - (repaired[i])));
                penalty += diff * (valueRange);
            }
            return isMinimize ? penalty : -penalty;
        }
    }

    private static org.apache.commons.math3.linear.RealMatrix log(final org.apache.commons.math3.linear.RealMatrix m) {
        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                d[r][c] = java.lang.Math.log(m.getEntry(r, c));
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix sqrt(final org.apache.commons.math3.linear.RealMatrix m) {
        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                d[r][c] = java.lang.Math.sqrt(m.getEntry(r, c));
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix square(final org.apache.commons.math3.linear.RealMatrix m) {
        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                double e = m.getEntry(r, c);
                d[r][c] = e * e;
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix times(final org.apache.commons.math3.linear.RealMatrix m, final org.apache.commons.math3.linear.RealMatrix n) {
        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                d[r][c] = (m.getEntry(r, c)) * (n.getEntry(r, c));
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix divide(final org.apache.commons.math3.linear.RealMatrix m, final org.apache.commons.math3.linear.RealMatrix n) {
        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                d[r][c] = (m.getEntry(r, c)) / (n.getEntry(r, c));
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix selectColumns(final org.apache.commons.math3.linear.RealMatrix m, final int[] cols) {
        double[][] d = new double[m.getRowDimension()][cols.length];
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (cols.length); c++) {
                d[r][c] = m.getEntry(r, cols[c]);
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix triu(final org.apache.commons.math3.linear.RealMatrix m, int k) {
        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                d[r][c] = (r <= (c - k)) ? m.getEntry(r, c) : 0;
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix sumRows(final org.apache.commons.math3.linear.RealMatrix m) {
        double[][] d = new double[1][m.getColumnDimension()];
        for (int c = 0; c < (m.getColumnDimension()); c++) {
            double sum = 0;
            for (int r = 0; r < (m.getRowDimension()); r++) {
                sum += m.getEntry(r, c);
            }
            d[0][c] = sum;
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix diag(final org.apache.commons.math3.linear.RealMatrix m) {
        if ((m.getColumnDimension()) == 1) {
            double[][] d = new double[m.getRowDimension()][m.getRowDimension()];
            for (int i = 0; i < (m.getRowDimension()); i++) {
                d[i][i] = m.getEntry(i, 0);
            }
            return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
        }else {
            double[][] d = new double[m.getRowDimension()][1];
            for (int i = 0; i < (m.getColumnDimension()); i++) {
                d[i][0] = m.getEntry(i, i);
            }
            return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
        }
    }

    private static void copyColumn(final org.apache.commons.math3.linear.RealMatrix m1, int col1, org.apache.commons.math3.linear.RealMatrix m2, int col2) {
        for (int i = 0; i < (m1.getRowDimension()); i++) {
            m2.setEntry(i, col2, m1.getEntry(i, col1));
        }
    }

    private static org.apache.commons.math3.linear.RealMatrix ones(int n, int m) {
        double[][] d = new double[n][m];
        for (int r = 0; r < n; r++) {
            java.util.Arrays.fill(d[r], 1.0);
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix eye(int n, int m) {
        double[][] d = new double[n][m];
        for (int r = 0; r < n; r++) {
            if (r < m) {
                d[r][r] = 1;
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix zeros(int n, int m) {
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(n, m);
    }

    private static org.apache.commons.math3.linear.RealMatrix repmat(final org.apache.commons.math3.linear.RealMatrix mat, int n, int m) {
        int rd = mat.getRowDimension();
        int cd = mat.getColumnDimension();
        double[][] d = new double[n * rd][m * cd];
        for (int r = 0; r < (n * rd); r++) {
            for (int c = 0; c < (m * cd); c++) {
                d[r][c] = mat.getEntry((r % rd), (c % cd));
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static org.apache.commons.math3.linear.RealMatrix sequence(double start, double end, double step) {
        int size = ((int) (((end - start) / step) + 1));
        double[][] d = new double[size][1];
        double value = start;
        for (int r = 0; r < size; r++) {
            d[r][0] = value;
            value += step;
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }

    private static double max(final org.apache.commons.math3.linear.RealMatrix m) {
        double max = -(java.lang.Double.MAX_VALUE);
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                double e = m.getEntry(r, c);
                if (max < e) {
                    max = e;
                }
            }
        }
        return max;
    }

    private static double min(final org.apache.commons.math3.linear.RealMatrix m) {
        double min = java.lang.Double.MAX_VALUE;
        for (int r = 0; r < (m.getRowDimension()); r++) {
            for (int c = 0; c < (m.getColumnDimension()); c++) {
                double e = m.getEntry(r, c);
                if (min > e) {
                    min = e;
                }
            }
        }
        return min;
    }

    private static double max(final double[] m) {
        double max = -(java.lang.Double.MAX_VALUE);
        for (int r = 0; r < (m.length); r++) {
            if (max < (m[r])) {
                max = m[r];
            }
        }
        return max;
    }

    private static double min(final double[] m) {
        double min = java.lang.Double.MAX_VALUE;
        for (int r = 0; r < (m.length); r++) {
            if (min > (m[r])) {
                min = m[r];
            }
        }
        return min;
    }

    private static int[] inverse(final int[] indices) {
        int[] inverse = new int[indices.length];
        for (int i = 0; i < (indices.length); i++) {
            inverse[indices[i]] = i;
        }
        return inverse;
    }

    private static int[] reverse(final int[] indices) {
        int[] reverse = new int[indices.length];
        for (int i = 0; i < (indices.length); i++) {
            reverse[i] = indices[(((indices.length) - i) - 1)];
        }
        return reverse;
    }

    private double[] randn(int size) {
        double[] randn = new double[size];
        for (int i = 0; i < size; i++) {
            randn[i] = random.nextGaussian();
        }
        return randn;
    }

    private org.apache.commons.math3.linear.RealMatrix randn1(int size, int popSize) {
        double[][] d = new double[size][popSize];
        for (int r = 0; r < size; r++) {
            for (int c = 0; c < popSize; c++) {
                d[r][c] = random.nextGaussian();
            }
        }
        return new org.apache.commons.math3.linear.Array2DRowRealMatrix(d, false);
    }
}
00:17:42.485 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:17:42.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
00:17:42.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:970 which is executed by 4 tests
156678833
00:17:42.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
00:17:42.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:960 which is executed by 4 tests
156678833
00:17:43.066 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
00:17:43.066 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:958 which is executed by 4 tests
156678833
00:17:43.363 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999214011> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:50.815 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7442 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999214011> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999214011> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000000117872> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:51.585 [pool-59-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (73 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000117872> but was:<1.0>]
java.lang.AssertionError: expected:<11.100000000117872> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.09999999983772> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:51.632 [pool-60-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (45 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.09999999983772> but was:<8.0>]
java.lang.AssertionError: expected:<11.09999999983772> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:17:51.633 [pool-57-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000000117872> but was:<1.0>]
00:17:51.633 [pool-57-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.09999999983772> but was:<8.0>]
00:17:51.633 [pool-57-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:958.
00:17:51.633 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
00:17:51.633 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:957 which is executed by 4 tests
156678833
00:17:51.936 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
00:17:51.936 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:956 which is executed by 4 tests
156678833
00:17:52.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000000306258> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:17:59.918 [pool-62-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7664 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000306258> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000306258> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999944774> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:00.680 [pool-63-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (71 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999944774> but was:<1.0>]
java.lang.AssertionError: expected:<11.099999999944774> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:468)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999463337> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:00.731 [pool-64-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (49 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999463337> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999463337> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:18:00.733 [pool-61-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999944774> but was:<1.0>]
00:18:00.734 [pool-61-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999463337> but was:<8.0>]
00:18:00.734 [pool-61-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:956.
00:18:00.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
00:18:00.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:955 which is executed by 4 tests
156678833
00:18:01.022 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
00:18:01.023 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:934 which is executed by 4 tests
156678833
00:18:01.309 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
00:18:01.310 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:932 which is executed by 4 tests
156678833
00:18:01.604 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999997347892> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:09.846 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8233 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999997347892> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999997347892> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999997768226> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:10.602 [pool-67-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (78 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999997768226> but was:<1.0>]
java.lang.AssertionError: expected:<11.099999997768226> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999284114> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:10.621 [pool-68-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (18 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999284114> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999284114> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:18:10.622 [pool-65-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999997768226> but was:<1.0>]
00:18:10.622 [pool-65-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999284114> but was:<8.0>]
00:18:10.622 [pool-65-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:932.
00:18:10.622 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
00:18:10.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:931 which is executed by 4 tests
156678833
00:18:10.924 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
00:18:10.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:930 which is executed by 4 tests
156678833
00:18:11.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999841305> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:18.778 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7538 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999841305> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999841305> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.0999999993855> but was:<1.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:19.569 [pool-71-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (85 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.0999999993855> but was:<1.0>]
java.lang.AssertionError: expected:<11.0999999993855> but was:<1.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999992727> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:19.588 [pool-72-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (17 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999992727> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999992727> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:18:19.589 [pool-69-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.0999999993855> but was:<1.0>]
00:18:19.589 [pool-69-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999992727> but was:<8.0>]
00:18:19.589 [pool-69-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:930.
00:18:19.589 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
00:18:19.590 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction:929 which is executed by 4 tests
156678833
00:18:19.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
00:18:19.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:541 which is executed by 6 tests
156678833
00:18:20.167 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000000184261> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:27.743 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7567 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000184261> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000184261> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999415445> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:28.538 [pool-75-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (77 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999415445> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999415445> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.0999999998664> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:28.560 [pool-76-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.0999999998664> but was:<8.0>]
java.lang.AssertionError: expected:<11.0999999998664> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:18:28.561 [pool-73-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999415445> but was:<8.0>]
00:18:28.561 [pool-73-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.0999999998664> but was:<8.0>]
00:18:28.561 [pool-73-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:541.
00:18:28.561 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<11.100000000298056> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:36.067 [pool-78-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7497 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000298056> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000298056> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999269613> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:36.831 [pool-79-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (80 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999269613> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999269613> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooLargeException: 50,000,000,000,000,000 is larger than the maximum (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000): overflow: index (0)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:370)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)
00:18:36.863 [pool-80-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[50,000,000,000,000,000 is larger than the maximum (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000): overflow: index (0)]
org.apache.commons.math3.exception.NumberIsTooLargeException: 50,000,000,000,000,000 is larger than the maximum (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000): overflow: index (0)    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:370)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)

00:18:36.864 [pool-77-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999269613> but was:<8.0>]
00:18:36.865 [pool-77-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): 50,000,000,000,000,000 is larger than the maximum (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000): overflow: index (0)]
00:18:36.865 [pool-77-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:541.
00:18:36.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
00:18:36.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:540 which is executed by 6 tests
156678833
00:18:37.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000001640499> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:44.677 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7515 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000001640499> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000001640499> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.099999999502781> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:45.422 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (80 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999502781> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999502781> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<11.100000001200707> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:45.439 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (15 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000001200707> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000001200707> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:18:45.440 [pool-81-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999502781> but was:<8.0>]
00:18:45.440 [pool-81-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000001200707> but was:<8.0>]
00:18:45.441 [pool-81-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:540.
00:18:45.441 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
00:18:45.441 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:537 which is executed by 6 tests
156678833
00:18:45.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999701053> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:53.325 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7593 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999701053> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999701053> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:367)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)
00:18:54.044 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (64 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:367)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)

java.lang.AssertionError: expected:<11.099999999779776> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:18:54.068 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999779776> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999779776> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:18:54.069 [pool-85-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): null]
00:18:54.069 [pool-85-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999779776> but was:<8.0>]
00:18:54.069 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:537.
00:18:54.069 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
00:18:54.069 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:536 which is executed by 6 tests
156678833
00:18:54.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.100000000265643> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:19:01.854 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7484 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000265643> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000265643> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:367)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)
00:19:02.600 [pool-91-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (73 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:367)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)

java.lang.AssertionError: expected:<11.099999999818197> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:19:02.622 [pool-92-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999818197> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999818197> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:19:02.623 [pool-89-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): null]
00:19:02.623 [pool-89-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.099999999818197> but was:<8.0>]
00:19:02.623 [pool-89-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:536.
00:19:02.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
00:19:02.624 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:535 which is executed by 6 tests
156678833
00:19:02.908 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999611368> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:19:10.521 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7604 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999611368> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999611368> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:364)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)
00:19:11.237 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (65 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.checkParameters(CMAESOptimizer.java:364)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizer.doOptimize(CMAESOptimizer.java:155)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimizeInternal(BaseAbstractMultivariateOptimizer.java:148)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer.optimize(BaseAbstractMultivariateOptimizer.java:105)
    at org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateSimpleBoundsOptimizer.optimize(BaseAbstractMultivariateSimpleBoundsOptimizer.java:140)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:451)

java.lang.AssertionError: expected:<11.100000007029445> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:19:11.258 [pool-96-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000007029445> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000007029445> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:19:11.259 [pool-93-thread-1] DEBUG tests.output - Failing tests with false: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): null]
00:19:11.259 [pool-93-thread-1] DEBUG tests.output - Failing tests with true: 
[testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest): expected:<11.100000007029445> but was:<8.0>]
00:19:11.259 [pool-93-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:535.
00:19:11.260 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
00:19:11.260 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.optimization.direct.CMAESOptimizer:529 which is executed by 8 tests
156678833
00:19:11.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<11.099999999873216> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:19:19.473 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7921 ms)
<> Total tests run: 26
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999873216> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999873216> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:19:20.216 [pool-99-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (95 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError: expected:<11.100000000172965> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:19:20.237 [pool-100-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (17 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.100000000172965> but was:<8.0>]
java.lang.AssertionError: expected:<11.100000000172965> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:19:20.529 [pool-101-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (289 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.MathUnsupportedOperationException
    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
00:19:20.692 [pool-102-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (160 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testUnsupportedBoundaries1(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[Expected exception: org.apache.commons.math3.exception.MathUnsupportedOperationException]
java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.MathUnsupportedOperationException    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)

java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.MathUnsupportedOperationException
    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
00:19:20.865 [pool-103-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (171 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testUnsupportedBoundaries2(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[Expected exception: org.apache.commons.math3.exception.MathUnsupportedOperationException]
java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.MathUnsupportedOperationException    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)

java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException
    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
00:19:21.063 [pool-104-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (197 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testInputSigmaOutOfRange(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[Expected exception: org.apache.commons.math3.exception.OutOfRangeException]
java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)

00:19:21.074 [pool-105-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:21.080 [pool-106-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:21.633 [pool-107-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (551 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.NumberIsTooLargeException
    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
00:19:21.637 [pool-108-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testBoundaryRangeTooLarge(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[Expected exception: org.apache.commons.math3.exception.NumberIsTooLargeException]
java.lang.AssertionError: Expected exception: org.apache.commons.math3.exception.NumberIsTooLargeException    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:32)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)

00:19:21.839 [pool-109-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (199 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:21.855 [pool-110-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:21.857 [pool-111-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:21.862 [pool-112-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

java.lang.AssertionError: expected:<11.099999999958484> but was:<8.0>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:19:21.869 [pool-113-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testFitAccuracyDependsOnBoundary(org.apache.commons.math3.optimization.direct.CMAESOptimizerTest)
[expected:<11.099999999958484> but was:<8.0>]
java.lang.AssertionError: expected:<11.099999999958484> but was:<8.0>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary(CMAESOptimizerTest.java:469)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:19:21.874 [pool-114-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:22.415 [pool-115-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (540 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:22.418 [pool-116-thread-1] INFO  f.i.l.r.n.s.ConstraintModelBuilder$1PassingListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:22.421 [pool-117-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:22.426 [pool-118-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:22.435 [pool-119-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:22.437 [pool-120-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

00:19:22.909 [pool-97-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
00:19:23.088 [pool-97-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Operators:
== of arity: 2
!= of arity: 2
< of arity: 2
<= of arity: 2
00:19:23.335 [pool-97-thread-1] DEBUG f.i.l.c.s.ConstraintBasedSynthesis - Successful code synthesis: org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs
00:19:23.337 [pool-97-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Applying patch: org.apache.commons.math3.optimization.direct.CMAESOptimizer:529: PRECONDITION org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs
00:19:23.972 [pool-97-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Running test suite to check the patch "org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs" is working
00:19:25.000 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 618
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 4069
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 25
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 1
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 5
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 2
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT components: [4] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2]
00:19:25.286 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol -                   class java.lang.Boolean: 4
00:19:25.287 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 79
00:19:25.287 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 946804ms
00:19:25.287 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
00:19:25.287 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----PATCH FOUND----
00:19:25.287 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs
00:19:25.466 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb test that executes the patch: 8
00:19:25.467 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - org.apache.commons.math3.optimization.direct.CMAESOptimizer:529: PRECONDITION
00:19:25.506 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - --- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -528,24 +528,26 @@
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
-                throw new MathUnsupportedOperationException();
-            } else {
-                // Convert API to internal handling of boundaries.
-                boundaries = new double[2][];
-                boundaries[0] = lB;
-                boundaries[1] = uB;
-
-                // Abort early if the normalization will overflow (cf. "encode" method).
-                for (int i = 0; i < lB.length; i++) {
-                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
-                        final double max = Double.MAX_VALUE + boundaries[0][i];
-                        final NumberIsTooLargeException e
+            if (org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.ccov1 == org.apache.commons.math3.optimization.direct.CMAESOptimizer.this.cs) {
+                if (hasInfiniteBounds) {
+                    // If there is at least one finite bound, none can be infinite,
+                    // because mixed cases are not supported by the current code.
+                    throw new MathUnsupportedOperationException();
+                } else {
+                    // Convert API to internal handling of boundaries.
+                    boundaries = new double[2][];
+                    boundaries[0] = lB;
+                    boundaries[1] = uB;
+                    
+                    // Abort early if the normalization will overflow (cf. "encode" method).
+                    for (int i = 0; i < lB.length; i++) {
+                        if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
+                            final double max = Double.MAX_VALUE + boundaries[0][i];
+                            final NumberIsTooLargeException e
                             = new NumberIsTooLargeException(boundaries[1][i],
-                                                            max,
-                                                            true);
-                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);
-                        e.getContext().addMessage(LocalizedFormats.INDEX, i);
-
-                        throw e;
+                            max,
+                            true);
+                            e.getContext().addMessage(LocalizedFormats.OVERFLOW);
+                            e.getContext().addMessage(LocalizedFormats.INDEX, i);
+                            
+                            throw e;
+                        }
                     }

PATCH
1467.29user 13.10system 15:49.96elapsed 155%CPU (0avgtext+0avgdata 1909692maxresident)k
67936inputs+8088outputs (25major+894379minor)pagefaults 0swaps


Node: granduc-12.luxembourg.grid5000.fr



Date: Thu Nov 29 00:19:26 EST 2018

