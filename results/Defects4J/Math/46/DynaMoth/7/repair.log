cd /tmp/DynaMoth_Defects4J_Math_46;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -d64 -Xmx4g -Xms1g -XX:MaxPermSize=1024m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSClassUnloadingEnabled -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis dynamoth \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/main/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/DynaMoth_Defects4J_Math_46/target/classes/:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1024m; support was removed in 8.0
10:20:59.866 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
10:20:59.871 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/DynaMoth_Defects4J_Math_46/target/classes/, file:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes/, file:/tmp/DynaMoth_Defects4J_Math_46/target/classes/, file:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
10:20:59.871 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
10:20:59.871 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
10:20:59.874 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@2ff4f00f', projectTests=[org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
10:20:59.875 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
10:20:59.895 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 910 MB
10:20:59.896 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
10:20:59.896 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 990 MB
10:20:59.896 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
10:20:59.897 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
10:20:59.897 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
10:23:48.359 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
10:23:48.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:1183 which is executed by 1 tests
-1679819631
10:23:48.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
10:23:48.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:260 which is executed by 4 tests
-1679819631
10:23:49.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:23:49.262 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (84 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:23:50.292 [pool-3-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideZeroZero
java -cp /tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/home/tdurieux/defects4j4repair/repair_tools/nopol.jar:/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar: fr.inria.lille.repair.MethodTestRunner org.apache.commons.math.complex.ComplexTest#testScalarDivideZero org.apache.commons.math.complex.ComplexTest#testAtanI org.apache.commons.math.complex.ComplexTest#testDivideZero 
10:23:50.751 [pool-3-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - ClassPrepareEvent
10:23:50.794 [pool-3-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.complex.Complex
10:23:50.794 [pool-3-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.MathUtils
10:23:50.798 [pool-3-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.FastMath
10:23:50.806 [pool-3-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] java.lang.Double
10:23:51.654 [pool-3-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:51.661 [pool-3-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideZero iteration 0
10:23:51.669 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:51.670 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=359)
10:23:51.671 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:51.700 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:51.700 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:51.700 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:51.700 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:51.700 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:51.700 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:51.701 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:51.701 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:51.701 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:51.701 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:51.726 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:51.728 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:51.731 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:51.733 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:51.738 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:51.742 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:51.744 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:51.746 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:51.756 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:51.760 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:51.789 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:51.790 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:51.791 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:51.793 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:51.794 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:51.795 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:51.796 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:51.797 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:51.798 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:51.799 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:51.800 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:51.802 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:51.802 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:51.802 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:51.802 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:51.803 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:51.809 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:51.811 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:51.813 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:51.815 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:51.816 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:51.819 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:51.820 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:51.822 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:51.824 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:51.827 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:51.829 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:51.832 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:51.835 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:51.837 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:51.838 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:51.840 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:51.842 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:51.843 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:51.844 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:51.845 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:51.847 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:51.849 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:51.851 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:51.852 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:51.854 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:51.855 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:51.857 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:51.859 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:51.860 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:51.862 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:51.863 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:51.865 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:51.866 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:51.868 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:51.869 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:51.870 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:51.871 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:51.872 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:51.874 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:51.875 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:51.876 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:51.877 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:51.878 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:51.879 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:51.880 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:51.914 [pool-3-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:51.915 [pool-3-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanI iteration 0
10:23:51.917 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:51.917 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=635)
10:23:51.917 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:51.940 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:51.941 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:51.947 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:51.948 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:51.948 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:51.954 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:51.956 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:51.957 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:51.959 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:51.961 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:51.963 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:51.965 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:51.966 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:51.968 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:51.970 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:51.971 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:51.972 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:51.973 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:51.974 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:51.987 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:51.988 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:51.989 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:51.997 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:51.998 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:51.999 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:52.001 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:52.002 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:52.002 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:52.002 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:52.002 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:52.002 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:52.007 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:52.009 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:52.010 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:52.012 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:52.013 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:52.015 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:52.017 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:52.018 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:52.020 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:52.021 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:52.022 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:52.023 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:52.025 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:52.027 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:52.028 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:52.029 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:52.031 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:52.032 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:52.033 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:52.034 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:52.036 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:52.038 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:52.039 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:52.041 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:52.042 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:52.044 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:52.045 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:52.047 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:52.049 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:52.050 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:52.051 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:52.053 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:52.054 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:52.056 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:52.057 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:52.058 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:52.059 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:52.059 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:52.060 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:52.061 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:52.062 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:52.063 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:52.064 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:52.065 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:52.066 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:52.079 [pool-3-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:52.080 [pool-3-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideZero iteration 0
10:23:52.081 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:52.081 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=701)
10:23:52.082 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:52.094 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:52.095 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:52.099 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:52.100 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:52.105 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:52.107 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:52.109 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:52.110 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:52.112 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:52.113 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:52.115 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:52.117 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:52.118 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:52.120 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:52.121 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:52.122 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:52.123 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:52.124 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:52.124 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:52.125 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:52.126 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:52.127 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:52.128 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:52.129 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:52.130 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:52.131 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:52.131 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:52.131 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:52.131 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:52.131 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:52.136 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:52.138 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:52.140 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:52.141 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:52.143 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:52.144 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:52.145 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:52.147 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:52.148 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:52.149 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:52.150 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:52.152 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:52.153 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:52.155 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:52.156 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:52.158 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:52.160 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:52.161 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:52.162 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:52.163 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:52.165 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:52.167 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:52.168 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:52.170 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:52.171 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:52.173 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:52.174 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:52.176 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:52.177 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:52.179 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:52.180 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:52.182 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:52.183 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:52.185 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:52.186 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:52.187 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:52.188 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:52.188 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:52.189 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:52.190 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:52.191 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:52.192 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:52.193 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:52.194 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:52.195 [pool-3-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:52.199 [pool-3-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - Exit


========= Info ==========
Nb constants             32
Nb method invocations    52
Nb field access          2
Nb variables             3
Total                    89
Nb evaluated expressions 4
Init Execution time      1350 ms
Collect Execution time   552 ms
Combine Execution time   71.0 ms
Nb Combination par sec   56 combinations/sec
Total Execution time     1973 ms
Nb line execution        3
Nb results               1

Results:
1. (signChangeIndex - start) >= (end - signChangeIndex)


========================
         Stat
========================
Operators: 
DIV 8
MUL 6
PLUS 4
OR 2
MINUS 2
AND 1
EQ 1
LT 1
Methods: 
isInfinite() 3
createComplex(double,double) 3
abs(double) 2
getReal() 1
checkNotNull(java.lang.Object) 1
isInfinite(double) 1
getImaginary() 1
isNaN(double) 1
Variable: 
real 10
imaginary 10
org.apache.commons.math.complex.Complex.NaN 10
isNaN 6
q 6
divisor 6
isZero 6
c 5
d 5
divisor 5
org.apache.commons.math.complex.Complex.ZERO 4
org.apache.commons.math.complex.Complex.INF 4
denominator 4

 & 32 & 52 & 2 & 3 & 89 & 4 & 1974 ms & 3 &
10:23:52.272 [pool-3-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Applying patch: org.apache.commons.math.complex.Complex:260: PRECONDITION (signChangeIndex - start) >= (end - signChangeIndex)
10:23:52.563 [pool-3-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:87: error: cannot find symbol
            if ((signChangeIndex - start) >= (end - signChangeIndex))
                 ^
  symbol:   variable signChangeIndex
  location: class org.apache.commons.math.complex.Complex
Complex.java:87: error: cannot find symbol
            if ((signChangeIndex - start) >= (end - signChangeIndex))
                                   ^
  symbol:   variable start
  location: class org.apache.commons.math.complex.Complex
Complex.java:87: error: cannot find symbol
            if ((signChangeIndex - start) >= (end - signChangeIndex))
                                              ^
  symbol:   variable end
  location: class org.apache.commons.math.complex.Complex
Complex.java:87: error: cannot find symbol
            if ((signChangeIndex - start) >= (end - signChangeIndex))
                                                    ^
  symbol:   variable signChangeIndex
  location: class org.apache.commons.math.complex.Complex
10:23:52.566 [pool-3-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Patch malformed (signChangeIndex - start) >= (end - signChangeIndex)
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99) ~[nopol.jar:na]
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135) ~[nopol.jar:na]
	at fr.inria.lille.repair.nopol.patch.TestPatch.passesAllTests(TestPatch.java:60) ~[nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.isOk(NoPol.java:317) [nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:302) [nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81) [nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260) [nopol.jar:na]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
10:23:52.567 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: invalid patch
10:23:52.567 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
10:23:52.567 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:587 which is executed by 3 tests
-1679819631
10:23:52.737 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
10:23:52.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:258 which is executed by 15 tests
-1679819631
10:23:52.908 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:23:52.984 [pool-218-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:23:53.357 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction
10:23:53.360 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideNaNInf
10:23:53.363 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivide
10:23:53.365 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideInf
10:23:53.367 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testScalarDivide
10:23:53.369 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideZeroZero
10:23:53.370 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testAtanInf
10:23:53.372 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testScalarDivideInf
10:23:53.379 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testAtan
10:23:53.380 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideReal
10:23:53.385 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction
10:23:53.387 [pool-217-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideImaginary
java -cp /tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/home/tdurieux/defects4j4repair/repair_tools/nopol.jar:/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar: fr.inria.lille.repair.MethodTestRunner org.apache.commons.math.complex.ComplexTest#testScalarDivideZero org.apache.commons.math.complex.ComplexTest#testAtanI org.apache.commons.math.complex.ComplexTest#testDivideZero 
10:23:53.639 [pool-217-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - ClassPrepareEvent
10:23:53.646 [pool-217-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.complex.Complex
10:23:53.646 [pool-217-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.MathUtils
10:23:53.649 [pool-217-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.FastMath
10:23:53.652 [pool-217-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] java.lang.Double
10:23:54.122 [pool-217-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:54.124 [pool-217-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideZero iteration 0
10:23:54.125 [pool-217-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=361)
10:23:54.125 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:54.125 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=359)
10:23:54.125 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:54.141 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:54.141 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:54.141 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:54.141 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:54.141 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:54.142 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:54.142 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:54.142 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:54.142 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:54.142 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:54.158 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:54.160 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:54.162 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.164 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.166 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.167 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.169 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:54.171 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:54.173 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:54.174 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:54.203 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:54.204 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:54.205 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:54.206 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:54.206 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:54.207 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:54.208 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:54.209 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:54.210 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:54.211 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:54.212 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:54.213 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:54.213 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:54.213 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:54.213 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:54.213 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:54.218 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:54.220 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:54.222 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.223 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.224 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:54.226 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.227 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.229 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.230 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.231 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:54.232 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:54.234 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.235 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.236 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:54.238 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.239 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.251 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.253 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.254 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:54.255 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:54.257 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:54.259 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:54.261 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:54.263 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:54.264 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:54.270 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:54.272 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:54.274 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:54.275 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:54.277 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:54.278 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:54.279 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:54.282 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:54.283 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:54.284 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:54.285 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:54.286 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:54.286 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:54.287 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:54.288 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:54.289 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:54.290 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:54.291 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:54.291 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:54.292 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:54.327 [pool-217-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:54.328 [pool-217-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanI iteration 0
10:23:54.329 [pool-217-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=637)
10:23:54.329 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:54.329 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=635)
10:23:54.329 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:54.342 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:54.343 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:54.348 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:54.353 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:54.354 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:54.356 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.357 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.359 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.360 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.362 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:54.364 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:54.365 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:54.367 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:54.368 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:54.368 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:54.369 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:54.370 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:54.371 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:54.372 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:54.373 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:54.373 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:54.374 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:54.375 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:54.376 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:54.377 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:54.377 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:54.377 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:54.377 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:54.377 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:54.382 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:54.383 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:54.385 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.386 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.388 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:54.389 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.390 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.392 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.393 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.394 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:54.395 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:54.397 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.398 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.399 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:54.401 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.402 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.404 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.405 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.419 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:54.420 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:54.422 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:54.423 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:54.425 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:54.426 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:54.428 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:54.429 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:54.431 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:54.432 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:54.434 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:54.435 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:54.436 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:54.437 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:54.439 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:54.440 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:54.441 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:54.442 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:54.442 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:54.443 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:54.444 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:54.445 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:54.445 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:54.446 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:54.447 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:54.448 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:54.449 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:54.450 [pool-217-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:54.450 [pool-217-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanI iteration 1
10:23:54.451 [pool-217-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=692)
10:23:54.451 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:54.451 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:23:54.451 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:54.463 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:54.464 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:54.469 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:54.473 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:54.475 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:54.476 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.478 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.480 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.481 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.483 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:54.484 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:54.486 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:54.487 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:54.488 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:54.489 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:54.490 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:54.491 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:54.491 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:54.492 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:54.493 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:54.494 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:54.494 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:54.495 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:54.496 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:54.497 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:54.497 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:54.497 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:54.497 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:54.497 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:54.501 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:54.503 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:54.504 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.506 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.507 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:54.508 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.510 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.511 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.512 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.513 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:54.514 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:54.516 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.517 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.519 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:54.520 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.521 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.523 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.524 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.525 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:54.526 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:54.527 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:54.529 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:54.530 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:54.531 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:54.533 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:54.534 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:54.535 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:54.537 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:54.538 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:54.540 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:54.541 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:54.543 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:54.544 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:54.545 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:54.546 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:54.547 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:54.548 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:54.549 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:54.549 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:54.550 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:54.551 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:54.552 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:54.552 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:54.553 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:54.554 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:54.566 [pool-217-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:54.567 [pool-217-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideZero iteration 0
10:23:54.568 [pool-217-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=361)
10:23:54.568 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:54.568 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=748)
10:23:54.571 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:54.583 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:54.584 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:54.589 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:54.594 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:54.596 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:54.597 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.599 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.600 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.602 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.603 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:54.605 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:54.606 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:54.608 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:54.609 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:54.609 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:54.610 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:54.611 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:54.612 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:54.613 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:54.613 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:54.614 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:54.615 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:54.616 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:54.617 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:54.618 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:54.618 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:54.618 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:54.618 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:54.618 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:54.622 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:54.624 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:54.626 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:54.627 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:54.628 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:54.630 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.631 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.632 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.634 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.634 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:54.635 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:54.637 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:54.638 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:54.639 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:54.641 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:54.642 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:54.643 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:54.644 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:54.645 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:54.646 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:54.647 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:54.649 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:54.650 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:54.651 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:54.653 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:54.654 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:54.655 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:54.657 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:54.658 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:54.660 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:54.661 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:54.662 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:54.664 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:54.665 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:54.666 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:54.667 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:54.667 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:54.668 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:54.673 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:54.674 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:54.675 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:54.676 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:54.676 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:54.677 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:54.678 [pool-217-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:54.681 [pool-217-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - Exit


========= Info ==========
Nb constants             30
Nb method invocations    54
Nb field access          2
Nb variables             3
Total                    89
Nb evaluated expressions 4
Init Execution time      728 ms
Collect Execution time   566 ms
Combine Execution time   3.0 ms
Nb Combination par sec   1333 combinations/sec
Total Execution time     1297 ms
Nb line execution        4
Nb results               1

Results:
1. divisor.isZero


========================
         Stat
========================
Operators: 
DIV 8
MUL 6
PLUS 4
OR 2
MINUS 2
AND 1
EQ 1
LT 1
Methods: 
isInfinite() 3
createComplex(double,double) 3
abs(double) 2
getReal() 1
checkNotNull(java.lang.Object) 1
isInfinite(double) 1
getImaginary() 1
isNaN(double) 1
Variable: 
real 10
imaginary 10
org.apache.commons.math.complex.Complex.NaN 10
isNaN 6
q 6
divisor 6
isZero 6
c 5
d 5
divisor 5
org.apache.commons.math.complex.Complex.ZERO 4
org.apache.commons.math.complex.Complex.INF 4
denominator 4

 & 30 & 54 & 2 & 3 & 89 & 4 & 1298 ms & 4 &
10:23:54.685 [pool-217-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Applying patch: org.apache.commons.math.complex.Complex:258: PRECONDITION divisor.isZero
10:23:54.948 [pool-217-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Running test suite to check the patch "divisor.isZero" is working
10:23:55.014 [pool-217-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Failing tests [testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
10:23:55.014 [pool-217-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Could not find a valid patch in SourceLocation org.apache.commons.math.complex.Complex:258
10:23:55.014 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:23:55.083 [pool-537-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:23:55.443 [pool-536-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideZeroZero
java -cp /tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/home/tdurieux/defects4j4repair/repair_tools/nopol.jar:/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar: fr.inria.lille.repair.MethodTestRunner org.apache.commons.math.complex.ComplexTest#testScalarDivideZero org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction org.apache.commons.math.complex.ComplexTest#testDivideNaNInf org.apache.commons.math.complex.ComplexTest#testDivide org.apache.commons.math.complex.ComplexTest#testDivideInf org.apache.commons.math.complex.ComplexTest#testScalarDivide org.apache.commons.math.complex.ComplexTest#testAtanInf org.apache.commons.math.complex.ComplexTest#testScalarDivideInf org.apache.commons.math.complex.ComplexTest#testAtanI org.apache.commons.math.complex.ComplexTest#testAtan org.apache.commons.math.complex.ComplexTest#testDivideReal org.apache.commons.math.complex.ComplexTest#testDivideZero org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction org.apache.commons.math.complex.ComplexTest#testDivideImaginary 
10:23:55.671 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - ClassPrepareEvent
10:23:55.677 [pool-536-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.complex.Complex
10:23:55.678 [pool-536-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.MathUtils
10:23:55.680 [pool-536-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.FastMath
10:23:55.682 [pool-536-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] java.lang.Double
10:23:56.103 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.105 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideZero iteration 0
10:23:56.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=361)
10:23:56.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=359)
10:23:56.106 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:56.118 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:56.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:56.133 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:56.134 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:56.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.138 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.140 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.141 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.143 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:56.144 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:56.146 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:56.147 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:56.175 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:56.176 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:56.176 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:56.177 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:56.178 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:56.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:56.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:56.180 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:56.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:56.182 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:56.183 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:56.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:56.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:56.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:56.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:56.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:56.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:56.190 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:56.192 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.193 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.194 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:56.196 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.197 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.198 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.199 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.200 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:56.201 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:56.203 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.204 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.205 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:56.207 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.208 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.209 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.210 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.212 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:56.213 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:56.216 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:56.218 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:56.219 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:56.222 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:56.223 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:56.224 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:56.226 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:56.227 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:56.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:56.230 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:56.231 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:56.232 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:56.234 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:56.235 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:56.236 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:56.236 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:56.237 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:56.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:56.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:56.239 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:56.240 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:56.241 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:56.241 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:56.242 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:56.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:56.292 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.301 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 0
10:23:56.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=651)
10:23:56.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=647)
10:23:56.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:56.315 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:56.327 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:56.331 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:56.331 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:56.331 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:56.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:56.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:56.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:56.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:56.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:56.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:56.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:56.338 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:56.339 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:56.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.342 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.344 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.345 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.347 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:56.348 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:56.350 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:56.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:56.352 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:56.353 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:56.353 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:56.354 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:56.355 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:56.355 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:56.356 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:56.357 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:56.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:56.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:56.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:56.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:56.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:56.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:56.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:56.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:56.364 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:56.365 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:56.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.368 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.370 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:56.371 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.372 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.374 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.378 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:56.380 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:56.382 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.384 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.385 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:56.387 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.388 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.389 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.391 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.391 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:56.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:56.394 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:56.395 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:56.397 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:56.398 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:56.399 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:56.401 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:56.402 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:56.404 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:56.405 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:56.407 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:56.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:56.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:56.411 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:56.412 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:56.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:56.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:56.414 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:56.415 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:56.416 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:56.416 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:56.417 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:56.418 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:56.419 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:56.419 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:56.420 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:56.421 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.423 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 1
10:23:56.423 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=651)
10:23:56.424 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.424 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=716)
10:23:56.424 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:56.436 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:56.437 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:56.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:56.448 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:56.449 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:56.451 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.452 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.454 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.455 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.457 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:56.458 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:56.460 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:56.461 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:56.462 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:56.463 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:56.463 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:56.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:56.465 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:56.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:56.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:56.467 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:56.468 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:56.469 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:56.469 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:56.471 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:56.471 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:56.471 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:56.471 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:56.471 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:56.475 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:56.476 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:56.478 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.479 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.481 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:56.482 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.483 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.485 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.486 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.487 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:56.488 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:56.489 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.491 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.492 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:56.493 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.495 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.496 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:56.499 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:56.501 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:56.502 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:56.504 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:56.505 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:56.506 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:56.508 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:56.509 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:56.511 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:56.512 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:56.514 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:56.515 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:56.517 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:56.518 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:56.519 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:56.520 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:56.521 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:56.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:56.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:56.523 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:56.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:56.525 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:56.525 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:56.526 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:56.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:56.528 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:56.529 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.531 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 2
10:23:56.536 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=764)
10:23:56.537 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.537 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=763)
10:23:56.537 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:56.549 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:56.551 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:56.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:56.563 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:56.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:56.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.568 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.570 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.571 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:56.574 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:56.576 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:56.577 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:56.578 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:56.579 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:56.580 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:56.580 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:56.581 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:56.582 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:56.583 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:56.583 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:56.584 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:56.585 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:56.586 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:56.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:56.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:56.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:56.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:56.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:56.592 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:56.593 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:56.595 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.596 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.598 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:56.599 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.601 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.602 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.604 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.604 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:56.605 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:56.607 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.609 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.610 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:56.612 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.613 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.614 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.616 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.618 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:56.618 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:56.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:56.622 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:56.623 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:56.624 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:56.626 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:56.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:56.629 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:56.630 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:56.632 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:56.633 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:56.634 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:56.635 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:56.637 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:56.638 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:56.639 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:56.640 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:56.640 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:56.641 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:56.642 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:56.642 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:56.643 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:56.644 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:56.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:56.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:56.646 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:56.647 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.648 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 3
10:23:56.649 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=812)
10:23:56.649 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.649 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=811)
10:23:56.649 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:56.662 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:56.662 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:56.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:56.672 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:56.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:56.675 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.676 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.678 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.679 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.681 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:56.682 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:56.683 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:56.685 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:56.686 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:56.686 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:56.687 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:56.688 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:56.689 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:56.689 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:56.690 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:56.691 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:56.691 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:56.692 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:56.693 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:56.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:56.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:56.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:56.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:56.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:56.698 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:56.699 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:56.701 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.703 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:56.705 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.706 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.707 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.708 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.709 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:56.710 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:56.720 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.722 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.723 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:56.724 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.725 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.728 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.729 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:56.729 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:56.731 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:56.732 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:56.733 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:56.735 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:56.736 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:56.737 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:56.738 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:56.740 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:56.741 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:56.742 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:56.744 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:56.745 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:56.746 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:56.747 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:56.748 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:56.749 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:56.749 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:56.750 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:56.751 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:56.752 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:56.752 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:56.753 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:56.754 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:56.754 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:56.755 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:56.765 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.767 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 4
10:23:56.767 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=812)
10:23:56.767 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.767 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=859)
10:23:56.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:56.780 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:56.780 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:56.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:56.789 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:56.791 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:56.793 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.794 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.796 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.797 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.799 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:56.800 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:56.802 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:56.803 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:56.804 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:56.804 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:56.805 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:56.806 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:56.806 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:56.808 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:56.809 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:56.810 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:56.810 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:56.811 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:56.812 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:56.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:56.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:56.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:56.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:56.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:56.817 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:56.819 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:56.820 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.822 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.823 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:56.843 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.844 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.845 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.848 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:56.848 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:56.850 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.851 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.852 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:56.854 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.855 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.856 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.857 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.858 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:56.859 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:56.860 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:56.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:56.863 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:56.864 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:56.865 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:56.867 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:56.868 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:56.870 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:56.871 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:56.872 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:56.873 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:56.875 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:56.876 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:56.877 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:56.878 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:56.879 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:56.879 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:56.880 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:56.881 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:56.882 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:56.882 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:56.883 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:56.884 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:56.885 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:56.885 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:56.886 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.888 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 5
10:23:56.889 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=906)
10:23:56.889 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.889 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=763)
10:23:56.889 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:56.901 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:56.902 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:56.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:56.911 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:56.912 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:56.914 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.915 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.917 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.918 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.920 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:56.921 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:56.922 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:56.924 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:56.924 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:56.925 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:56.926 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:56.926 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:56.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:56.928 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:56.929 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:56.929 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:56.930 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:56.931 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:56.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:56.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:56.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:56.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:56.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:56.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:56.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:56.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:56.940 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:56.941 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:56.942 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:56.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.945 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.946 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.947 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.948 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:56.949 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:56.951 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:56.952 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:56.953 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:56.955 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:56.956 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:56.957 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:56.959 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:56.959 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:56.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:56.962 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:56.963 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:56.964 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:56.966 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:56.967 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:56.968 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:56.970 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:56.971 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:56.972 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:56.974 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:56.975 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:56.976 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:56.978 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:56.979 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:56.980 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:56.981 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:56.981 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:56.982 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:56.983 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:56.983 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:56.984 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:56.985 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:56.986 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:56.987 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:56.987 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:56.988 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:56.989 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 6
10:23:56.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=954)
10:23:56.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:56.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=953)
10:23:56.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.002 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.003 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.007 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.012 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.014 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.015 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.017 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.018 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.020 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.021 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.022 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.025 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.026 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.027 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.028 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.028 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.029 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.030 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.030 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.031 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.032 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.033 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.033 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.034 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.035 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.035 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.035 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.035 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.040 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.041 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.043 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.044 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.045 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.047 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.048 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.049 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.050 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.051 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.053 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.054 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.055 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.057 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.058 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.059 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.061 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.062 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.065 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.066 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.068 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.069 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.070 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.071 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.073 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.074 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.075 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.077 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.078 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.079 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.081 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.081 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.082 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.083 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.083 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.084 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.086 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.087 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.087 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.088 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.089 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.090 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 7
10:23:57.091 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=954)
10:23:57.091 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.091 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1001)
10:23:57.091 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.109 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.114 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.121 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.122 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.124 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.125 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.127 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.128 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.129 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.131 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.133 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.134 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.135 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.135 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.136 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.138 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.139 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.139 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.140 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.141 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.141 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.141 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.141 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.141 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.146 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.147 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.149 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.150 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.151 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.152 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.154 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.155 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.157 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.159 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.161 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.162 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.165 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.166 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.167 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.168 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.169 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.170 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.171 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.173 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.174 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.175 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.177 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.178 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.182 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.183 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.185 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.186 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.187 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.188 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.190 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.191 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.192 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.192 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.193 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.194 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.194 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.195 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.196 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.197 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 8
10:23:57.198 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1048)
10:23:57.198 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.198 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=763)
10:23:57.198 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.209 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.210 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.218 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.219 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.221 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.222 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.224 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.225 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.227 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.228 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.230 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.231 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.232 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.232 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.233 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.234 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.234 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.235 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.236 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.237 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.237 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.239 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.240 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.240 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.240 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.240 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.240 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.244 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.245 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.246 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.248 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.249 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.252 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.253 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.255 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.256 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.257 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.258 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.260 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.261 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.262 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.265 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.265 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.266 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.268 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.270 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.272 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.273 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.274 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.277 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.278 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.279 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.280 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.282 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.283 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.284 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.285 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.286 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.286 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.287 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.288 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.288 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.289 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.290 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.291 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.291 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.292 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.293 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.294 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 9
10:23:57.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1096)
10:23:57.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1095)
10:23:57.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.306 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.306 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.310 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.315 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.316 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.317 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.319 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.320 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.321 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.323 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.324 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.326 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.327 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.328 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.329 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.329 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.330 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.331 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.331 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.333 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.333 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.336 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.336 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.336 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.336 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.336 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.340 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.342 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.343 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.344 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.346 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.347 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.348 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.349 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.352 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.352 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.354 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.355 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.357 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.362 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.362 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.363 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.365 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.368 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.370 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.371 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.372 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.374 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.376 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.379 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.380 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.381 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.382 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.383 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.383 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.384 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.385 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.386 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.386 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.387 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.388 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.388 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.389 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.390 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.392 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 10
10:23:57.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1096)
10:23:57.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1143)
10:23:57.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.403 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.404 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.414 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.416 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.417 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.419 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.420 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.422 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.423 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.425 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.426 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.427 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.427 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.429 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.429 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.430 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.431 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.432 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.432 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.433 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.434 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.435 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.435 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.435 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.435 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.435 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.441 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.443 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.445 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.446 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.449 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.450 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.451 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.452 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.467 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.469 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.471 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.473 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.474 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.475 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.476 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.478 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.479 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.480 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.481 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.483 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.484 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.486 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.487 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.489 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.490 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.491 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.493 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.494 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.495 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.496 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.497 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.497 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.499 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.499 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.500 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.501 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.502 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.502 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.503 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.505 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 11
10:23:57.505 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1191)
10:23:57.505 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.505 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1190)
10:23:57.506 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.517 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.517 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.526 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.529 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.530 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.531 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.533 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.534 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.536 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.537 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.538 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.539 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.541 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.541 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.543 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.543 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.544 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.545 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.547 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.552 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.553 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.555 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.556 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.557 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.559 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.560 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.561 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.562 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.563 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.564 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.566 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.568 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.569 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.571 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.572 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.574 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.575 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.576 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.578 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.579 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.580 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.582 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.583 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.584 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.586 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.589 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.590 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.591 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.592 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.594 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.594 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.595 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.596 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.596 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.597 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.598 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.599 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.599 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.600 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.601 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.602 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.602 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.604 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 12
10:23:57.604 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1239)
10:23:57.604 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.604 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1238)
10:23:57.605 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.615 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.615 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.619 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.619 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.619 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.619 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.624 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.625 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.630 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.631 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.633 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.634 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.635 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.637 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.637 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.638 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.639 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.639 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.640 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.641 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.641 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.642 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.643 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.644 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.644 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.649 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.650 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.652 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.653 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.654 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.655 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.657 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.658 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.660 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.661 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.662 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.664 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.665 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.666 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.668 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.669 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.670 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.672 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.675 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.676 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.677 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.679 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.680 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.681 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.683 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.684 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.686 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.687 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.688 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.689 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.691 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.691 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.692 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.693 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.695 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.696 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.697 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.697 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.698 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.699 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.699 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.701 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 13
10:23:57.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1239)
10:23:57.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1286)
10:23:57.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.713 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.714 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.719 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.722 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.724 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.725 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.728 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.729 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.731 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.732 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.734 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.735 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.736 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.736 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.737 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.738 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.738 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.739 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.740 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.740 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.741 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.742 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.742 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.747 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.748 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.750 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.751 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.752 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.754 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.755 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.756 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.757 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.758 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.759 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.760 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.763 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.764 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.765 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.767 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.769 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.769 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.771 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.772 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.773 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.775 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.776 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.777 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.778 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.780 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.781 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.782 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.784 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.786 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.787 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.788 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.789 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.791 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.792 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.792 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.793 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.794 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.794 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.795 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.796 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.797 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 14
10:23:57.798 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1333)
10:23:57.798 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.798 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1190)
10:23:57.798 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.816 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.817 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.822 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.822 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.826 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.827 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.828 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.830 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.831 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.833 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.834 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.835 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.838 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.839 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.839 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.840 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.841 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.842 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.842 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.843 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.844 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.844 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.845 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.846 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.850 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.851 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.853 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.854 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.855 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.857 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.858 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.859 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.860 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.861 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.863 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.864 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.866 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.867 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.868 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.869 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.871 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.872 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.872 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.874 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.875 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.876 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.878 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.879 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.880 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.882 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.883 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.885 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.886 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.887 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.890 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.891 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.892 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.892 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:57.893 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:57.894 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:57.894 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:57.895 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:57.896 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:57.897 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:57.897 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:57.898 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:57.899 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:57.909 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:57.909 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideNaNInf iteration 0
10:23:57.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=370)
10:23:57.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:57.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1381)
10:23:57.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:57.922 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:57.922 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:57.926 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:57.926 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:57.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:57.931 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:57.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:57.934 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.935 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.939 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:57.941 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:57.942 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:57.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:57.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:57.945 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:57.946 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:57.946 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:57.947 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:57.948 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:57.948 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:57.949 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:57.950 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:57.951 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:57.951 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:57.952 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:57.952 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:57.952 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:57.952 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:57.952 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:57.956 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:57.958 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:57.959 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:57.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:57.962 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:57.963 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.964 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.966 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.967 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.968 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:57.968 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:57.970 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:57.971 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:57.973 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:57.974 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:57.975 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:57.976 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:57.978 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:57.979 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:57.979 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:57.981 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:57.982 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:57.984 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:57.985 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:57.986 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:57.987 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:57.989 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:57.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:57.991 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:57.993 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:57.994 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:57.995 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:57.996 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:57.998 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:57.998 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:57.999 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.000 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.001 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.001 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.002 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.003 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.003 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.004 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.005 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.006 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.006 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.007 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideNaNInf iteration 1
10:23:58.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=370)
10:23:58.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1422)
10:23:58.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.019 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.020 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.029 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.030 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.032 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.033 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.035 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.036 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.037 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.040 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.042 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.042 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.043 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.044 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.045 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.045 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.046 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.047 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.048 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.048 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.049 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.050 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.051 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.051 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.051 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.051 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.051 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.055 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.056 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.058 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.059 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.061 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.062 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.063 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.066 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.067 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.067 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.069 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.070 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.071 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.073 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.074 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.075 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.076 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.077 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.078 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.080 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.081 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.082 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.083 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.084 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.086 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.087 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.088 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.090 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.091 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.092 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.093 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.095 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.096 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.103 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.104 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.106 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.107 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.107 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.108 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.109 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.118 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.120 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivide iteration 0
10:23:58.121 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1464)
10:23:58.121 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.121 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1462)
10:23:58.121 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.133 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.138 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.138 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.138 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.138 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.142 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.143 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.144 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.146 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.147 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.148 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.150 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.151 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.153 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.154 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.155 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.157 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.159 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.160 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.161 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.161 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.162 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.167 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.168 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.170 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.171 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.172 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.174 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.175 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.176 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.177 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.178 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.180 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.182 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.183 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.185 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.187 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.188 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.191 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.192 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.193 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.195 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.196 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.197 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.198 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.200 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.201 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.202 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.204 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.205 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.206 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.207 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.208 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.209 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.209 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.210 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.211 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.211 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.212 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.213 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.215 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.225 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.226 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 0
10:23:58.226 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1514)
10:23:58.226 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.227 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1512)
10:23:58.227 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.239 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.247 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.249 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.251 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.253 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.256 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.257 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.258 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.260 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.260 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.261 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.262 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.262 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.264 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.265 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.265 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.266 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.267 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.267 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.268 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.272 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.274 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.276 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.278 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.279 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.280 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.281 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.283 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.283 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.284 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.286 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.287 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.288 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.289 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.291 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.292 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.293 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.294 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.296 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.297 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.299 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.300 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.301 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.304 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.305 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.307 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.308 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.309 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.310 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.312 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.313 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.314 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.314 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.315 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.316 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.317 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.317 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.318 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.319 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.320 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.320 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.321 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.322 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.322 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 1
10:23:58.323 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1512)
10:23:58.323 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.323 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1514)
10:23:58.323 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.339 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.339 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.339 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.339 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.339 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.340 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.340 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.340 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.340 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.340 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.344 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.345 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.347 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.348 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.350 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.353 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.354 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.356 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.357 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.361 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.362 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.362 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.363 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.364 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.365 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.370 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.372 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.373 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.376 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.378 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.380 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.381 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.382 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.383 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.384 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.385 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.387 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.388 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.389 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.391 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.393 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.394 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.395 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.396 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.405 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.407 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.411 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.412 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.415 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.416 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.417 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.418 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.420 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.420 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.421 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.422 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.422 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.423 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.424 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.424 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.425 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.426 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.427 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.427 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.428 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.429 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 2
10:23:58.429 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1512)
10:23:58.429 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.429 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1585)
10:23:58.430 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.440 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.448 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.449 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.451 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.452 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.454 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.455 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.457 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.458 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.459 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.461 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.461 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.462 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.463 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.465 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.467 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.468 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.469 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.474 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.475 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.477 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.478 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.479 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.480 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.482 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.483 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.484 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.485 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.486 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.487 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.488 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.490 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.491 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.492 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.493 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.494 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.495 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.496 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.497 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.499 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.500 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.501 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.502 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.504 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.505 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.506 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.508 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.509 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.510 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.511 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.513 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.514 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.515 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.515 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.516 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.517 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.518 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.518 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.519 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.520 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.520 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.521 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.523 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.523 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 3
10:23:58.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1624)
10:23:58.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1624)
10:23:58.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.535 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.535 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.544 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.547 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.550 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.551 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.553 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.554 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.556 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.557 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.557 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.559 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.559 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.560 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.561 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.562 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.562 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.563 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.564 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.564 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.569 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.570 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.572 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.574 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.576 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.577 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.578 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.579 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.580 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.581 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.582 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.584 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.585 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.586 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.589 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.590 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.591 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.591 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.593 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.594 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.596 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.597 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.598 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.599 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.601 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.602 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.603 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.605 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.606 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.607 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.608 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.609 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.610 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.611 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.611 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.612 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.613 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.613 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.614 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.615 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.616 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.616 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.617 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.623 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.624 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivide iteration 0
10:23:58.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1658)
10:23:58.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1656)
10:23:58.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.639 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.640 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.644 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.644 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.644 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.645 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.649 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.650 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.652 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.653 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.655 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.656 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.658 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.660 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.662 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.662 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.663 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.664 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.665 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.665 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.666 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.668 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.668 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.669 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.670 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.675 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.676 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.678 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.679 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.680 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.682 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.683 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.684 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.686 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.686 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.693 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.695 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.696 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.698 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.699 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.700 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.703 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.704 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.705 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.706 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.708 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.709 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.710 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.712 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.713 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.714 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.716 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.717 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.720 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.721 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.722 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.724 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.724 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.725 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.726 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.728 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.729 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.730 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.730 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.731 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.732 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.736 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.744 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 0
10:23:58.744 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1709)
10:23:58.744 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.744 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1706)
10:23:58.745 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.757 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.758 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.767 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.770 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.771 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.773 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.774 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.776 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.777 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.779 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.780 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.781 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.782 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.782 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.783 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.784 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.786 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.787 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.787 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.788 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.794 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.795 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.797 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.798 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.800 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.801 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.802 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.803 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.805 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.805 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.806 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.808 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.809 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.810 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.812 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.814 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.815 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.816 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.817 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.818 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.820 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.822 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.823 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.825 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.826 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.828 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.829 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.830 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.831 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.833 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.834 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.835 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.838 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.839 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.839 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.840 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.841 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.842 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.842 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.843 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.844 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.844 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 1
10:23:58.845 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1740)
10:23:58.845 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.845 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:23:58.845 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.856 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.857 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.866 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.867 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.869 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.870 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.872 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.873 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.875 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.876 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.878 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.879 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.880 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.880 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.881 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.882 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.883 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.883 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.884 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.885 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.886 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.886 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.887 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.892 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.894 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.895 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.897 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.898 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:58.899 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.900 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.902 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.903 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.904 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:58.904 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:58.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.907 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.909 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:58.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:58.911 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:58.912 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:58.914 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:58.914 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:58.915 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:58.917 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:58.918 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:58.919 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:58.921 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:58.922 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:58.923 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:58.925 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:58.926 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:58.928 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:58.929 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:58.930 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:58.931 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:58.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:58.934 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:58.935 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:58.935 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:58.936 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:58.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:58.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:58.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:58.939 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:58.940 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:58.940 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:58.941 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:58.942 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:58.943 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:58.943 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 2
10:23:58.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1789)
10:23:58.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:58.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1787)
10:23:58.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:58.955 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:58.956 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:58.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:58.964 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:58.965 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:58.967 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:58.968 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:58.970 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:58.971 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:58.972 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:58.974 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:58.975 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:58.977 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:58.977 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:58.978 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:58.979 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:58.980 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:58.980 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:58.981 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:58.982 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:58.982 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:58.983 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:58.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:58.991 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:58.992 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:58.992 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:58.992 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:58.992 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:58.992 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:58.996 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:58.997 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:58.999 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.000 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.001 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.003 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.004 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.005 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.006 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.007 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.009 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.010 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.012 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.013 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.014 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.015 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.017 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.017 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.018 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.020 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.021 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.022 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.023 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.026 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.027 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.028 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.030 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.031 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.032 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.033 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.035 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.036 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.037 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.037 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.040 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.041 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.041 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.042 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.043 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.044 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.044 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.045 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 3
10:23:59.045 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1820)
10:23:59.046 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.046 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:23:59.046 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.056 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.056 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.066 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.067 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.068 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.070 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.071 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.073 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.074 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.075 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.077 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.077 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.078 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.079 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.079 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.080 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.081 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.081 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.082 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.083 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.084 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.084 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.089 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.090 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.092 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.093 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.094 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.095 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.097 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.098 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.099 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.100 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.101 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.102 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.104 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.106 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.107 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.109 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.111 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.113 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.114 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.116 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.118 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.119 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.120 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.122 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.123 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.124 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.126 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.127 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.128 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.129 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.130 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.131 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.131 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.133 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.133 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.134 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.135 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.136 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.136 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.138 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.139 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 4
10:23:59.139 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1869)
10:23:59.139 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.139 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1867)
10:23:59.140 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.151 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.152 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.160 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.161 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.164 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.165 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.167 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.168 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.170 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.171 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.172 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.173 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.174 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.174 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.175 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.176 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.177 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.177 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.178 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.180 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.185 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.187 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.188 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.191 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.192 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.193 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.195 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.196 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.197 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.197 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.199 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.200 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.201 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.203 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.204 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.205 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.207 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.207 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.208 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.210 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.211 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.212 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.215 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.216 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.217 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.219 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.220 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.222 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.223 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.224 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.225 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.226 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.227 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.228 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.230 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.231 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.231 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.232 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.233 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.233 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.234 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.235 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.235 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 5
10:23:59.236 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1900)
10:23:59.236 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.236 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:23:59.236 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.246 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.246 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.251 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.251 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.251 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.251 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.255 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.257 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.258 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.260 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.261 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.264 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.265 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.267 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.267 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.268 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.270 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.271 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.271 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.272 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.273 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.273 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.274 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.278 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.280 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.281 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.282 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.284 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.285 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.286 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.287 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.289 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.289 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.290 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.292 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.293 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.294 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.296 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.298 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.299 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.300 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.300 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.303 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.304 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.306 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.307 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.308 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.310 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.312 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.314 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.315 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.316 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.318 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.325 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.326 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.327 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.327 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.328 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.329 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.329 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.330 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.331 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.332 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.333 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.334 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.334 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 6
10:23:59.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1949)
10:23:59.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1947)
10:23:59.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.346 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.347 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.356 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.357 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.362 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.363 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.364 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.368 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.369 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.370 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.370 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.371 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.372 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.373 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.373 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.374 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.376 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.381 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.382 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.384 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.385 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.386 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.387 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.389 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.390 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.391 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.393 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.394 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.395 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.397 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.398 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.399 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.401 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.402 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.403 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.403 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.405 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.406 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.410 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.411 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.414 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.416 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.417 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.418 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.419 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.421 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.422 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.423 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.423 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.424 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.425 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.425 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.426 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.427 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.427 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.429 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.429 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.430 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.431 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 7
10:23:59.431 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1980)
10:23:59.431 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.431 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:23:59.432 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.443 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.443 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.448 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.448 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.448 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.451 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.453 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.454 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.455 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.457 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.458 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.460 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.461 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.462 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.465 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.467 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.468 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.468 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.469 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.471 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.472 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.472 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.472 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.472 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.472 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.476 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.477 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.479 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.480 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.481 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.482 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.484 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.485 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.486 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.487 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.488 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.489 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.491 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.492 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.493 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.494 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.496 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.497 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.500 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.501 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.503 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.504 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.505 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.506 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.508 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.509 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.511 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.512 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.513 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.514 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.516 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.517 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.518 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.518 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.519 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.520 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.521 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.521 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.523 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.523 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.525 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.525 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.526 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 8
10:23:59.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2029)
10:23:59.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2027)
10:23:59.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.537 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.538 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.547 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.549 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.550 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.552 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.553 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.555 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.556 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.557 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.559 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.559 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.560 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.561 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.561 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.562 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.563 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.563 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.564 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.566 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.571 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.572 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.574 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.575 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.576 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.578 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.579 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.580 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.581 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.582 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.583 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.585 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.586 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.588 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.590 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.591 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.592 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.593 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.594 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.595 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.605 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.607 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.608 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.610 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.611 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.612 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.614 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.615 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.616 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.617 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.619 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.620 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.621 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.622 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.623 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.623 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.624 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.625 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.625 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.626 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.629 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.630 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.630 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 9
10:23:59.631 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2060)
10:23:59.631 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.631 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:23:59.631 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.643 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.643 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.648 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.652 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.653 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.655 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.656 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.657 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.660 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.661 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.663 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.664 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.665 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.666 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.666 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.668 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.668 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.669 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.670 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.672 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.677 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.678 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.680 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.681 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.682 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.683 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.684 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.686 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.687 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.688 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.688 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.690 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.691 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.692 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.695 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.696 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.697 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.698 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.699 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.700 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.703 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.704 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.705 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.707 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.708 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.709 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.711 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.712 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.713 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.714 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.716 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.717 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.718 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.719 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.720 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.720 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.721 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.722 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.722 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.723 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.724 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.724 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.725 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.726 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 10
10:23:59.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2109)
10:23:59.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2107)
10:23:59.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.738 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.739 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.743 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.747 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.748 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.749 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.751 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.752 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.754 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.755 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.756 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.758 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.759 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.760 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.761 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.761 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.763 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.763 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.764 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.765 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.765 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.766 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.767 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.772 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.773 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.775 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.776 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.777 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.779 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.780 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.781 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.782 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.783 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.784 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.785 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.786 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.787 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.789 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.791 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.792 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.793 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.794 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.795 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.797 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.798 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.799 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.800 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.802 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.803 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.804 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.806 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.807 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.808 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.809 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.811 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.812 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.813 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.814 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.815 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.815 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.816 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.817 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.817 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.818 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.819 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.819 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.820 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.821 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 11
10:23:59.821 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2140)
10:23:59.822 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.822 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:23:59.822 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.832 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.833 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.837 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.841 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.843 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.844 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.845 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.848 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.850 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.851 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.852 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.854 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.854 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.855 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.856 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.856 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.857 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.858 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.859 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.859 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.860 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.861 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.861 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.866 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.867 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.869 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.875 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.876 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.877 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.878 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.880 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.881 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.882 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.882 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.884 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.885 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.886 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.889 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.890 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.891 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.892 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.893 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.895 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.896 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.897 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:23:59.898 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:23:59.900 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:23:59.901 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:23:59.902 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:23:59.904 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:23:59.905 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:23:59.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:23:59.907 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:23:59.909 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:23:59.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:23:59.911 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:23:59.912 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:23:59.913 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:23:59.913 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:23:59.914 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:23:59.915 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:23:59.916 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:23:59.916 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:23:59.917 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:23:59.918 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:23:59.918 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:23:59.919 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:23:59.920 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:23:59.921 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 12
10:23:59.921 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2189)
10:23:59.921 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:23:59.921 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2187)
10:23:59.922 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:23:59.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:23:59.933 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:23:59.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:23:59.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:23:59.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:23:59.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:23:59.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:23:59.937 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:23:59.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:23:59.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:23:59.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:23:59.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:23:59.941 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:23:59.943 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:23:59.944 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.945 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.947 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.948 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.956 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:23:59.957 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:23:59.959 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:23:59.960 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:23:59.961 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:23:59.961 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:23:59.962 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:23:59.963 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:23:59.963 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:23:59.964 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:23:59.965 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:23:59.965 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:23:59.966 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:23:59.967 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:23:59.967 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:23:59.969 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:23:59.969 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:23:59.969 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:23:59.969 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:23:59.969 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:23:59.972 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:23:59.974 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:23:59.975 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:23:59.976 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:23:59.978 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:23:59.979 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.980 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.981 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.983 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.983 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:23:59.984 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:23:59.986 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:23:59.987 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:23:59.988 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:23:59.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:23:59.991 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:23:59.992 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:23:59.993 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:23:59.994 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:23:59.995 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:23:59.997 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:23:59.998 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:23:59.999 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.000 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.002 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.003 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.004 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.006 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.007 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.009 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.010 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.011 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.012 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.014 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.014 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.015 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.016 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.016 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.017 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.018 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.019 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.019 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.020 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.021 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.021 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.022 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.023 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 13
10:24:00.023 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2220)
10:24:00.023 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.023 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:24:00.024 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.034 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.034 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.039 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.043 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.044 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.046 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.047 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.049 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.050 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.051 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.053 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.054 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.055 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.056 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.057 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.057 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.058 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.059 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.061 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.062 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.062 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.063 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.064 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.068 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.069 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.070 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.072 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.073 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.074 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.075 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.077 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.078 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.079 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.079 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.081 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.082 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.084 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.086 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.087 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.089 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.090 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.090 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.092 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.093 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.094 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.096 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.097 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.098 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.099 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.101 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.102 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.103 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.106 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.107 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.108 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.109 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.111 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.112 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.112 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.113 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.114 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.114 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.116 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.116 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.117 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 14
10:24:00.118 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2269)
10:24:00.118 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.118 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2267)
10:24:00.118 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.128 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.128 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.136 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.139 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.141 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.143 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.144 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.146 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.147 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.148 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.150 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.150 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.151 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.152 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.152 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.153 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.154 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.154 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.155 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.157 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.157 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.164 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.165 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.167 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.168 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.169 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.171 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.172 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.173 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.174 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.175 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.176 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.177 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.180 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.183 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.185 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.187 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.188 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.190 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.192 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.193 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.194 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.196 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.197 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.198 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.199 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.201 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.202 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.203 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.204 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.205 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.205 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.206 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.207 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.207 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.208 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.209 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.210 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.210 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.211 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.212 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.212 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanInf iteration 15
10:24:00.213 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2300)
10:24:00.213 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.213 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:24:00.213 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.224 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.224 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.228 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.228 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.228 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.228 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.229 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.233 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.234 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.235 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.237 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.240 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.241 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.242 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.244 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.245 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.246 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.247 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.247 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.248 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.249 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.251 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.252 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.252 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.253 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.258 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.259 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.261 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.262 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.265 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.266 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.267 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.269 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.270 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.272 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.273 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.274 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.276 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.277 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.278 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.279 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.280 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.281 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.282 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.290 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.291 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.293 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.294 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.297 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.298 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.299 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.301 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.303 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.304 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.306 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.306 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.307 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.308 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.308 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.309 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.310 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.310 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.312 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.312 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.313 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.317 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.318 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideInf iteration 0
10:24:00.318 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2350)
10:24:00.318 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.318 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2348)
10:24:00.319 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.329 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.330 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.334 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.338 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.339 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.342 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.344 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.345 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.347 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.348 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.349 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.351 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.352 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.353 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.353 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.354 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.355 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.356 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.356 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.357 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.363 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.364 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.366 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.369 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.370 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.371 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.372 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.374 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.377 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.378 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.379 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.381 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.382 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.383 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.385 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.385 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.386 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.388 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.389 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.390 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.393 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.394 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.395 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.397 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.398 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.399 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.400 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.402 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.403 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.404 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.405 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.406 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.406 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.407 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.410 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.410 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.411 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.411 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.412 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.413 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideInf iteration 1
10:24:00.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2383)
10:24:00.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2348)
10:24:00.414 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.423 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.424 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.428 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.432 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.433 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.435 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.436 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.437 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.440 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.442 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.443 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.445 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.446 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.446 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.448 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.448 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.449 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.450 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.451 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.451 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.452 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.453 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.453 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.453 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.453 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.453 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.457 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.458 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.460 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.461 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.462 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.465 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.466 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.467 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.468 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.469 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.470 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.472 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.473 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.474 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.475 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.477 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.478 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.478 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.479 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.481 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.482 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.483 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.484 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.485 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.487 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.488 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.489 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.491 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.492 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.493 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.494 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.496 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.497 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.499 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.500 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.500 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.501 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.502 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.503 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.503 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.504 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.505 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.505 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.506 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideInf iteration 2
10:24:00.506 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2383)
10:24:00.507 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.507 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2416)
10:24:00.507 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.517 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.518 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.525 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.528 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.529 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.531 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.532 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.534 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.535 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.536 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.538 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.538 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.539 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.540 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.541 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.542 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.543 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.543 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.544 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.545 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.545 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.546 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.547 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.551 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.552 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.554 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.555 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.556 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.559 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.560 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.561 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.562 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.563 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.566 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.568 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.570 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.571 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.572 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.574 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.576 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.577 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.578 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.579 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.581 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.582 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.583 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.585 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.586 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.587 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.589 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.590 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.591 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.593 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.593 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.594 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.595 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.596 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.596 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.597 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.598 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.598 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.599 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.600 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.601 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.605 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.606 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanI iteration 0
10:24:00.610 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2450)
10:24:00.610 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.610 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2448)
10:24:00.611 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.622 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.623 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.631 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.632 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.634 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.635 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.637 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.638 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.640 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.641 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.649 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.650 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.651 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.652 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.652 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.653 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.654 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.655 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.655 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.656 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.657 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.657 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.658 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.659 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.663 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.664 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.666 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.667 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.668 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.669 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.671 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.672 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.673 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.674 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.675 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.676 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.677 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.679 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.680 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.681 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.683 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.684 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.684 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.685 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.687 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.688 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.689 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.690 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.692 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.693 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.694 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.696 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.697 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.698 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.700 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.701 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.702 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.703 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.704 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.705 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.705 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.706 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.707 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.707 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.708 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.709 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.709 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.710 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.711 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.711 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.712 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanI iteration 1
10:24:00.713 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2497)
10:24:00.713 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.713 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:24:00.713 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.723 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.723 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.727 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.731 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.732 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.734 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.735 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.737 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.738 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.740 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.741 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.742 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.744 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.744 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.745 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.746 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.746 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.747 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.748 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.749 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.749 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.750 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.751 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.751 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.752 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.753 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.753 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.753 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.753 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.756 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.758 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.759 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.760 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.762 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.763 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.764 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.765 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.766 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.767 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.768 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.769 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.771 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.772 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.773 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.774 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.775 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.777 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.777 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.778 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.780 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.781 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.782 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.783 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.784 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.786 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.787 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.788 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.790 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.791 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.792 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.793 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.795 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.796 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.797 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.797 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.798 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.799 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.800 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.800 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.801 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.802 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.802 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.803 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.804 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.818 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.819 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtan iteration 0
10:24:00.820 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2556)
10:24:00.820 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.820 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2553)
10:24:00.820 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.831 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.832 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.836 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.840 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.842 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.843 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.844 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.846 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.847 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.849 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.850 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.852 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.853 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.854 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.854 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.855 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.856 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.856 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.857 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.858 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.858 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.859 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.860 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.861 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.862 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.866 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.867 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.868 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.870 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.871 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.872 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.874 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.875 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.876 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.877 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.878 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.879 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.880 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.882 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.883 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.884 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.885 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.887 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.888 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.890 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.891 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.892 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.894 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.895 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.896 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:00.897 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:00.899 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:00.900 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:00.901 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:00.903 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:00.904 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:00.905 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:00.906 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:00.907 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:00.908 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:00.908 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:00.909 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:00.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:00.910 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:00.911 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:00.912 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:00.913 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:00.913 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:00.914 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:00.915 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:00.916 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtan iteration 1
10:24:00.916 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2606)
10:24:00.916 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:00.916 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:24:00.917 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:00.927 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:00.928 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:00.932 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:00.936 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:00.938 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:00.939 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.940 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.942 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.943 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.945 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:00.946 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:00.948 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:00.949 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:00.950 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:00.951 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:00.951 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:00.952 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:00.953 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:00.953 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:00.954 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:00.955 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:00.956 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:00.956 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:00.957 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:00.958 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:00.958 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:00.958 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:00.958 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:00.958 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:00.962 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:00.963 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:00.965 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:00.966 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:00.968 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:00.969 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.970 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.972 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.973 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.974 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:00.974 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:00.976 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:00.977 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:00.978 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:00.986 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:00.987 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:00.989 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:00.990 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:00.991 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:00.991 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:00.993 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:00.994 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:00.995 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:00.997 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:00.998 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:00.999 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:01.000 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:01.002 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:01.003 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:01.005 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:01.006 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:01.007 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:01.008 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:01.010 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:01.010 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:01.011 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:01.012 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:01.012 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:01.013 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:01.014 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:01.015 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:01.015 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:01.016 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:01.017 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:01.017 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:01.021 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:01.022 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideReal iteration 0
10:24:01.022 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2656)
10:24:01.022 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:01.022 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2654)
10:24:01.022 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:01.033 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:01.033 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:01.038 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:01.042 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:01.043 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:01.045 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.046 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.048 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.049 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.050 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:01.052 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:01.053 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:01.054 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:01.055 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:01.056 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:01.056 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:01.057 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:01.058 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:01.058 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:01.059 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:01.060 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:01.061 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:01.061 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:01.062 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:01.063 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:01.063 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:01.063 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:01.063 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:01.063 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:01.067 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:01.068 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:01.070 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.071 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.072 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:01.073 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.075 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.076 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.077 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.078 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:01.079 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:01.080 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.081 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.083 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:01.084 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.085 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.086 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.088 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.088 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:01.089 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:01.091 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:01.092 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:01.093 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:01.094 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:01.096 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:01.097 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:01.098 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:01.100 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:01.101 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:01.102 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:01.104 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:01.105 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:01.106 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:01.107 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:01.108 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:01.109 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:01.109 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:01.110 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:01.111 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:01.111 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:01.112 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:01.113 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:01.114 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:01.114 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:01.115 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:01.119 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:01.120 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideZero iteration 0
10:24:01.120 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=361)
10:24:01.120 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:01.120 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2704)
10:24:01.120 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:01.132 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:01.133 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:01.137 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:01.142 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:01.143 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:01.145 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.146 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.148 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.149 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.151 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:01.152 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:01.154 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:01.155 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:01.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:01.156 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:01.157 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:01.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:01.158 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:01.159 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:01.160 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:01.161 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:01.161 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:01.162 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:01.163 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:01.164 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:01.164 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:01.164 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:01.164 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:01.164 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:01.168 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:01.169 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:01.171 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.172 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.174 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:01.175 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.176 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.178 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.179 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.180 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:01.181 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:01.182 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.184 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.185 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:01.186 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.188 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.189 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.190 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.191 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:01.192 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:01.193 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:01.195 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:01.196 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:01.197 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:01.199 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:01.200 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:01.201 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:01.203 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:01.204 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:01.205 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:01.207 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:01.208 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:01.209 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:01.210 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:01.211 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:01.212 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:01.212 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:01.213 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:01.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:01.214 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:01.215 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:01.216 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:01.216 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:01.217 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:01.218 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:01.221 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:01.223 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction iteration 0
10:24:01.223 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2764)
10:24:01.223 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:01.223 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2760)
10:24:01.224 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:01.234 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:01.234 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:01.238 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:01.242 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:01.243 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:01.245 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.246 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.248 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.249 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.250 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:01.252 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:01.253 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:01.254 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:01.255 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:01.256 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:01.256 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:01.257 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:01.258 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:01.258 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:01.259 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:01.260 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:01.260 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:01.261 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:01.262 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:01.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:01.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:01.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:01.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:01.263 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:01.267 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:01.268 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:01.270 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.271 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.272 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:01.274 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.275 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.276 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.277 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.278 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:01.279 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:01.281 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.282 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.283 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:01.284 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.286 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.287 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.288 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.289 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:01.290 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:01.291 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:01.292 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:01.294 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:01.295 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:01.296 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:01.297 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:01.299 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:01.300 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:01.302 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:01.303 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:01.304 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:01.305 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:01.307 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:01.308 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:01.308 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:01.309 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:01.310 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:01.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:01.311 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:01.312 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:01.313 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:01.313 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:01.314 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:01.321 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:01.321 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:01.322 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:01.324 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction iteration 1
10:24:01.324 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2764)
10:24:01.324 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:01.324 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2811)
10:24:01.325 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:01.335 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:01.336 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:01.340 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:01.341 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:01.345 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:01.346 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:01.348 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.349 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.350 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.352 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.353 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:01.355 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:01.356 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:01.357 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:01.358 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:01.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:01.359 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:01.360 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:01.361 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:01.362 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:01.362 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:01.363 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:01.364 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:01.365 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:01.365 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:01.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:01.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:01.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:01.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:01.367 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:01.371 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:01.372 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:01.374 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.375 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.376 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:01.378 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.379 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.380 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.382 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.382 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:01.383 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:01.385 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.386 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.387 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:01.389 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.390 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.391 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.392 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.393 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:01.394 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:01.395 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:01.396 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:01.398 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:01.399 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:01.400 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:01.401 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:01.403 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:01.404 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:01.406 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:01.407 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:01.408 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:01.409 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:01.411 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:01.412 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:01.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:01.413 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:01.414 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:01.415 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:01.415 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:01.416 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:01.417 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:01.417 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:01.418 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:01.419 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:01.420 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:01.420 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:01.422 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction iteration 2
10:24:01.422 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2859)
10:24:01.422 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:01.422 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2858)
10:24:01.423 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:01.434 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:01.434 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:01.439 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:01.443 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:01.444 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:01.446 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.447 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.449 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.450 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.452 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:01.453 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:01.455 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:01.456 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:01.456 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:01.457 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:01.458 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:01.458 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:01.459 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:01.460 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:01.460 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:01.461 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:01.462 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:01.462 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:01.463 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:01.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:01.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:01.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:01.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:01.464 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:01.468 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:01.479 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:01.481 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.482 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.484 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:01.485 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.486 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.487 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.489 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.490 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:01.490 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:01.492 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.493 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.495 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:01.496 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.497 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.498 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.500 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.501 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:01.501 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:01.503 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:01.504 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:01.506 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:01.507 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:01.508 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:01.509 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:01.511 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:01.512 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:01.514 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:01.515 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:01.516 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:01.518 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:01.519 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:01.520 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:01.521 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:01.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:01.522 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:01.523 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:01.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:01.524 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:01.525 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:01.526 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:01.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:01.527 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:01.528 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:01.531 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:01.532 [pool-536-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideImaginary iteration 0
10:24:01.533 [pool-536-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2909)
10:24:01.533 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:01.533 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2907)
10:24:01.533 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:01.544 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:01.544 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:01.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:01.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:01.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:01.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:01.548 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:01.549 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:01.549 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:01.549 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:01.549 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:01.549 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:01.552 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:01.554 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:01.555 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.556 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.558 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.559 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.561 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:01.562 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:01.564 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:01.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:01.565 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:01.566 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:01.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:01.567 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:01.568 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:01.569 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:01.570 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:01.570 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:01.571 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:01.572 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:01.572 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:01.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:01.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:01.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:01.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:01.573 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:01.577 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:01.579 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:01.580 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:01.581 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:01.583 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:01.584 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.585 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.586 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.588 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.588 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:01.589 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:01.591 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:01.592 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:01.593 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:01.594 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:01.596 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:01.597 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:01.598 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:01.599 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:01.600 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:01.601 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:01.602 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:01.604 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:01.605 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:01.606 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:01.607 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:01.608 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:01.610 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:01.611 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:01.613 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:01.614 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:01.621 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:01.623 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:01.624 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:01.625 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:01.625 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:01.626 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:01.627 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:01.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:01.628 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:01.629 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:01.630 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:01.630 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:01.631 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:01.632 [pool-536-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:01.634 [pool-536-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - Exit


========= Info ==========
Nb constants             23
Nb method invocations    60
Nb field access          3
Nb variables             3
Total                    89
Nb evaluated expressions 3
Init Execution time      646 ms
Collect Execution time   5537 ms
Combine Execution time   40.0 ms
Nb Combination par sec   75 combinations/sec
Total Execution time     6223 ms
Nb line execution        53
Nb results               1

Results:
1. divisor.isZero


========================
         Stat
========================
Operators: 
DIV 8
MUL 6
PLUS 4
OR 2
MINUS 2
AND 1
EQ 1
LT 1
Methods: 
isInfinite() 3
createComplex(double,double) 3
abs(double) 2
getReal() 1
checkNotNull(java.lang.Object) 1
isInfinite(double) 1
getImaginary() 1
isNaN(double) 1
Variable: 
real 10
imaginary 10
org.apache.commons.math.complex.Complex.NaN 10
isNaN 6
q 6
divisor 6
isZero 6
c 5
d 5
divisor 5
org.apache.commons.math.complex.Complex.ZERO 4
org.apache.commons.math.complex.Complex.INF 4
denominator 4

 & 23 & 60 & 3 & 3 & 89 & 3 & 6223 ms & 53 &
10:24:01.675 [pool-536-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Applying patch: org.apache.commons.math.complex.Complex:258: CONDITIONAL divisor.isZero
10:24:01.920 [pool-536-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Running test suite to check the patch "divisor.isZero" is working
10:24:01.978 [pool-536-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Failing tests [testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
10:24:01.978 [pool-536-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Could not find a valid patch in SourceLocation org.apache.commons.math.complex.Complex:258
10:24:01.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
10:24:01.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:583 which is executed by 4 tests
-1679819631
10:24:02.138 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:02.196 [pool-4188-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:02.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:02.541 [pool-4194-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:02.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
10:24:02.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:254 which is executed by 17 tests
-1679819631
10:24:02.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:03.049 [pool-4200-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (59 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:03.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:03.379 [pool-4206-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:03.679 [pool-4205-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideNaN
10:24:03.681 [pool-4205-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testDivideZeroZero
10:24:03.682 [pool-4205-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testAtanInf
10:24:03.683 [pool-4205-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math.complex.ComplexTest#testScalarDivideNaN
java -cp /tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/tmp/DynaMoth_Defects4J_Math_46/target/classes:/tmp/DynaMoth_Defects4J_Math_46/target/test-classes:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/home/tdurieux/defects4j4repair/repair_tools/nopol.jar:/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar: fr.inria.lille.repair.MethodTestRunner org.apache.commons.math.complex.ComplexTest#testScalarDivideZero org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction org.apache.commons.math.complex.ComplexTest#testDivideNaNInf org.apache.commons.math.complex.ComplexTest#testDivide org.apache.commons.math.complex.ComplexTest#testDivideInf org.apache.commons.math.complex.ComplexTest#testScalarDivide org.apache.commons.math.complex.ComplexTest#testScalarDivideInf org.apache.commons.math.complex.ComplexTest#testAtanI org.apache.commons.math.complex.ComplexTest#testAtan org.apache.commons.math.complex.ComplexTest#testDivideReal org.apache.commons.math.complex.ComplexTest#testDivideZero org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction org.apache.commons.math.complex.ComplexTest#testDivideImaginary 
10:24:03.970 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - ClassPrepareEvent
10:24:03.978 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.complex.Complex
10:24:03.978 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.MathUtils
10:24:03.980 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] org.apache.commons.math.util.FastMath
10:24:03.982 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.spoon.ClassCollector - [class] java.lang.Double
10:24:04.386 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:04.388 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideZero iteration 0
10:24:04.395 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=361)
10:24:04.395 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:04.395 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=359)
10:24:04.396 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:04.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:04.424 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:04.425 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:04.427 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.428 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.430 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.431 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.432 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:04.434 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:04.435 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:04.437 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:04.468 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:04.469 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:04.469 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:04.470 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:04.471 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:04.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:04.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:04.473 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:04.474 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:04.474 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:04.475 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:04.476 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:04.476 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:04.476 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:04.476 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:04.476 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:04.480 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:04.482 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:04.483 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.484 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.485 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:04.486 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.489 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.490 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.491 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:04.492 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:04.493 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.494 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.495 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:04.497 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.498 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.499 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.500 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.501 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:04.502 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:04.503 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:04.504 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:04.506 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:04.507 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:04.508 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:04.509 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:04.510 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:04.512 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:04.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:04.514 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:04.515 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:04.517 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:04.518 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:04.519 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:04.520 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:04.520 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:04.521 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:04.522 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:04.523 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:04.523 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:04.524 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:04.525 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:04.525 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:04.526 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:04.527 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:04.571 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:04.577 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 0
10:24:04.578 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=651)
10:24:04.578 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:04.578 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=647)
10:24:04.578 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:04.590 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:04.591 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:04.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:04.600 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:04.601 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:04.603 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.604 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.606 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.607 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.609 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:04.610 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:04.612 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:04.613 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:04.614 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:04.614 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:04.615 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:04.616 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:04.616 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:04.617 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:04.618 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:04.619 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:04.619 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:04.620 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:04.621 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:04.622 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:04.622 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:04.622 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:04.622 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:04.622 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:04.626 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:04.627 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:04.629 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.630 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.631 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:04.633 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.634 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.635 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.636 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.637 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:04.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:04.639 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.640 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.642 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:04.643 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.644 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.645 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.647 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.647 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:04.648 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:04.649 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:04.651 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:04.652 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:04.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:04.654 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:04.656 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:04.657 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:04.658 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:04.660 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:04.661 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:04.662 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:04.663 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:04.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:04.666 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:04.667 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:04.667 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:04.668 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:04.669 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:04.669 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:04.670 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:04.671 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:04.672 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:04.672 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:04.673 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:04.674 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:04.674 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:04.676 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 1
10:24:04.677 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=651)
10:24:04.677 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:04.677 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=716)
10:24:04.677 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:04.688 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:04.689 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:04.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:04.698 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:04.699 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:04.700 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.702 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.703 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.705 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.706 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:04.707 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:04.709 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:04.710 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:04.711 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:04.712 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:04.712 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:04.713 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:04.714 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:04.714 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:04.715 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:04.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:04.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:04.717 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:04.718 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:04.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:04.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:04.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:04.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:04.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:04.723 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:04.724 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:04.725 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.726 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.728 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:04.729 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.730 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.731 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.733 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.733 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:04.734 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:04.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.737 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.738 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:04.739 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.741 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.742 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.743 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.744 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:04.745 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:04.746 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:04.748 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:04.749 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:04.750 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:04.751 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:04.752 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:04.754 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:04.755 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:04.756 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:04.758 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:04.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:04.761 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:04.762 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:04.763 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:04.764 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:04.765 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:04.765 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:04.766 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:04.767 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:04.767 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:04.768 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:04.769 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:04.769 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:04.770 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:04.771 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:04.771 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:04.773 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 2
10:24:04.773 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=764)
10:24:04.773 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:04.774 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=763)
10:24:04.774 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:04.784 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:04.785 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:04.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:04.793 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:04.794 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:04.796 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.797 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.799 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.800 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.801 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:04.803 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:04.804 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:04.805 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:04.806 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:04.807 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:04.807 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:04.808 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:04.809 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:04.810 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:04.810 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:04.811 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:04.812 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:04.812 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:04.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:04.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:04.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:04.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:04.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:04.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:04.818 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:04.819 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:04.821 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.822 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.824 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:04.825 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.826 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.827 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.829 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.829 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:04.830 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:04.832 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.833 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.834 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:04.835 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.837 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.838 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.839 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.840 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:04.841 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:04.842 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:04.843 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:04.845 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:04.846 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:04.847 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:04.848 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:04.850 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:04.851 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:04.852 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:04.853 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:04.855 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:04.856 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:04.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:04.858 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:04.859 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:04.860 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:04.860 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:04.861 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:04.862 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:04.862 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:04.863 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:04.864 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:04.864 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:04.865 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:04.866 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:04.867 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:04.868 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 3
10:24:04.869 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=812)
10:24:04.869 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:04.869 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=811)
10:24:04.869 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:04.881 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:04.882 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:04.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:04.890 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:04.891 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:04.893 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.894 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.896 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.897 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.899 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:04.900 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:04.901 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:04.903 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:04.903 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:04.904 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:04.905 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:04.905 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:04.906 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:04.907 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:04.908 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:04.908 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:04.909 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:04.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:04.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:04.911 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:04.911 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:04.911 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:04.911 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:04.911 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:04.916 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:04.917 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:04.918 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:04.920 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:04.921 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:04.922 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.924 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.934 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.936 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.936 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:04.937 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:04.939 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:04.940 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:04.941 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:04.942 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:04.944 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:04.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:04.946 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:04.947 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:04.948 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:04.949 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:04.950 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:04.952 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:04.953 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:04.954 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:04.955 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:04.957 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:04.958 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:04.960 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:04.961 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:04.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:04.963 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:04.965 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:04.966 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:04.966 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:04.967 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:04.968 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:04.969 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:04.969 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:04.970 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:04.971 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:04.971 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:04.972 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:04.973 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:04.974 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:04.974 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:04.976 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 4
10:24:04.976 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=812)
10:24:04.976 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:04.976 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=859)
10:24:04.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:04.987 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:04.988 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:04.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:04.996 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:04.998 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:04.999 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.002 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.003 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.005 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.006 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.007 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.009 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.009 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.010 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.011 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.011 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.012 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.013 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.013 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.014 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.015 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.015 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.016 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.021 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.023 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.024 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.025 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.028 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.029 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.031 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.032 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.033 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.033 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.035 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.036 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.038 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.039 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.040 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.041 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.043 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.043 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.044 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.046 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.047 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.048 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.049 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.051 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.052 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.055 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.056 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.057 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.058 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.061 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.062 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.063 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.064 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.064 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.065 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.066 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.066 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.067 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.068 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.069 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.069 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.070 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.071 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.072 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 5
10:24:05.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=906)
10:24:05.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=763)
10:24:05.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.086 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.087 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.095 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.096 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.098 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.099 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.101 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.102 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.103 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.105 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.106 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.107 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.108 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.109 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.110 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.110 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.112 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.113 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.113 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.114 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.115 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.115 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.116 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.116 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.116 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.116 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.117 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.120 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.121 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.123 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.124 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.125 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.127 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.128 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.129 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.130 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.131 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.133 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.135 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.136 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.137 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.140 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.141 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.142 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.143 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.144 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.145 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.148 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.149 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.150 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.152 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.153 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.155 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.156 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.157 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.158 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.160 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.161 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.162 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.162 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.163 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.164 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.165 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.165 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.166 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.167 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.167 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.168 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.169 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.170 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.171 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 6
10:24:05.172 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=954)
10:24:05.172 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.172 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=953)
10:24:05.172 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.184 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.185 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.193 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.194 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.196 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.197 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.199 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.200 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.201 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.203 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.204 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.205 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.206 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.207 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.207 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.208 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.209 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.211 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.212 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.212 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.213 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.218 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.220 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.221 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.223 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.224 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.225 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.226 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.228 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.229 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.230 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.230 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.232 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.233 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.234 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.236 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.237 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.238 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.239 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.240 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.242 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.243 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.245 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.246 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.247 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.248 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.250 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.251 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.252 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.254 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.255 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.256 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.257 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.259 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.259 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.260 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.261 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.261 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.262 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.263 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.263 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.273 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.274 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.275 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.276 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.276 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.278 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 7
10:24:05.278 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=954)
10:24:05.278 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.278 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1001)
10:24:05.279 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.289 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.290 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.298 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.299 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.301 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.302 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.304 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.305 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.306 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.308 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.309 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.310 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.311 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.313 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.314 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.314 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.315 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.316 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.317 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.317 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.318 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.319 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.319 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.319 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.319 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.319 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.323 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.324 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.326 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.327 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.328 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.331 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.332 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.333 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.334 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.335 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.336 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.338 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.339 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.340 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.341 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.342 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.344 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.344 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.347 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.348 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.349 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.350 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.351 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.353 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.354 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.355 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.357 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.358 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.359 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.361 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.362 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.363 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.364 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.364 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.365 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.366 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.367 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.367 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.368 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.369 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.369 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.370 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.371 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.371 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.373 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 8
10:24:05.373 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1048)
10:24:05.374 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.374 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=763)
10:24:05.374 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.386 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.386 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.390 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.390 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.390 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.390 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.390 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.390 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.390 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.391 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.391 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.391 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.395 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.396 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.397 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.399 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.400 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.401 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.404 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.405 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.406 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.408 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.408 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.410 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.410 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.411 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.412 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.412 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.413 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.414 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.414 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.415 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.416 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.416 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.416 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.416 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.416 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.420 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.423 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.424 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.425 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.426 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.428 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.429 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.430 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.431 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.432 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.433 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.435 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.436 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.437 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.438 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.440 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.441 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.442 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.442 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.444 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.445 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.446 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.448 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.449 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.450 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.452 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.453 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.454 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.456 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.457 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.458 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.460 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.461 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.462 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.462 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.463 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.464 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.464 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.465 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.466 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.467 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.467 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.468 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.469 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.470 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.471 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 9
10:24:05.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1096)
10:24:05.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1095)
10:24:05.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.483 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.483 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.487 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.487 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.487 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.487 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.492 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.493 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.495 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.496 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.498 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.499 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.500 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.501 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.503 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.504 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.505 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.506 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.506 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.507 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.508 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.508 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.509 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.510 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.510 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.511 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.512 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.517 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.518 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.520 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.521 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.522 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.523 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.525 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.526 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.527 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.528 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.529 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.530 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.531 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.533 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.534 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.535 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.536 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.538 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.538 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.539 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.541 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.542 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.543 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.545 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.546 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.547 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.548 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.550 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.551 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.552 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.554 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.555 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.556 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.557 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.558 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.559 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.559 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.560 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.561 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.561 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.562 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.563 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.564 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.564 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.565 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.566 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.567 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 10
10:24:05.568 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1096)
10:24:05.568 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.568 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1143)
10:24:05.568 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.579 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.580 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.588 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.590 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.591 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.593 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.594 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.597 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.598 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.600 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.601 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.601 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.602 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.603 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.603 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.604 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.605 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.606 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.607 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.607 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.608 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.609 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.610 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.610 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.610 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.610 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.610 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.614 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.615 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.617 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.618 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.619 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.620 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.632 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.634 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.635 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.636 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.637 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.639 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.641 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.642 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.643 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.644 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.646 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.646 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.647 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.648 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.650 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.651 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.652 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.655 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.656 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.657 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.659 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.660 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.661 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.662 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.664 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.666 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.666 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.667 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.668 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.668 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.669 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.670 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.670 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.671 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.672 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.672 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.673 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.675 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 11
10:24:05.675 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1191)
10:24:05.675 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.675 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1190)
10:24:05.676 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.686 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.687 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.695 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.696 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.698 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.699 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.700 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.702 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.703 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.704 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.706 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.707 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.708 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.708 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.709 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.710 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.710 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.711 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.712 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.713 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.713 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.714 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.715 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.720 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.721 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.723 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.724 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.725 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.727 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.728 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.729 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.730 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.731 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.732 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.734 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.735 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.737 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.739 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.740 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.741 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.742 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.742 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.744 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.745 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.746 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.748 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.749 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.750 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.751 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.753 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.754 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.756 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.757 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.758 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.761 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.761 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.762 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.763 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.763 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.764 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.765 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.766 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.766 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.767 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.768 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.768 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.769 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.771 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 12
10:24:05.771 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1239)
10:24:05.771 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.771 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1238)
10:24:05.772 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.783 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.783 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.788 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.788 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.792 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.793 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.794 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.796 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.797 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.798 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.800 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.801 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.803 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.804 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.805 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.805 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.806 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.807 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.807 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.808 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.809 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.809 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.810 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.811 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.812 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.817 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.818 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.820 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.821 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.822 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.823 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.825 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.826 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.827 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.828 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.829 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.830 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.832 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.833 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.834 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.835 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.836 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.838 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.838 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.839 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.841 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.842 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.843 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.844 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.846 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.847 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.848 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.850 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.851 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.852 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.854 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.855 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.856 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.858 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.859 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.859 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.860 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.861 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.861 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.862 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.863 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.864 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.864 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.865 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.866 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.867 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 13
10:24:05.868 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1239)
10:24:05.868 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.868 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1286)
10:24:05.868 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.879 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.880 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:05.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:05.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:05.889 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:05.891 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.892 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.894 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.895 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.896 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:05.898 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:05.900 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:05.901 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:05.902 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:05.902 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:05.903 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:05.904 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:05.904 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:05.905 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:05.906 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:05.906 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:05.907 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:05.908 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:05.908 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:05.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:05.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:05.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:05.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:05.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:05.914 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:05.915 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:05.917 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:05.918 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:05.919 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:05.920 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.922 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.923 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.924 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.925 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:05.926 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:05.927 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:05.929 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:05.930 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:05.931 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:05.933 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:05.934 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:05.935 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:05.936 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:05.937 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:05.938 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:05.939 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:05.941 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:05.942 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:05.943 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:05.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:05.946 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:05.947 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:05.949 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:05.950 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:05.951 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:05.953 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:05.954 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:05.955 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:05.956 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:05.956 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:05.957 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:05.958 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:05.959 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:05.959 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:05.960 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:05.976 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:05.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:05.978 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:05.979 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:05.979 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:05.981 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction iteration 14
10:24:05.981 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1333)
10:24:05.982 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:05.982 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1190)
10:24:05.984 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:05.995 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:05.995 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.005 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.006 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.008 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.009 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.011 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.012 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.014 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.015 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.018 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.019 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.020 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.020 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.021 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.022 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.022 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.023 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.024 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.024 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.025 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.026 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.030 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.032 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.033 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.034 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.036 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.037 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.038 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.040 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.041 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.042 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.043 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.044 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.046 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.047 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.048 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.050 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.051 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.052 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.054 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.055 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.056 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.058 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.059 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.061 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.063 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.064 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.065 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.067 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.068 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.069 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.070 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.071 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.072 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.074 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.075 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.075 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.076 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.077 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.078 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.078 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.092 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.092 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideNaNInf iteration 0
10:24:06.093 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=370)
10:24:06.093 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.093 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1381)
10:24:06.093 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.105 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.106 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.115 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.117 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.118 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.120 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.121 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.123 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.124 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.126 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.127 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.128 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.129 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.130 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.130 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.131 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.133 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.134 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.134 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.136 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.136 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.141 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.143 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.144 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.145 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.148 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.149 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.150 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.152 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.152 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.153 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.154 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.156 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.157 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.158 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.160 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.161 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.162 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.163 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.163 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.165 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.170 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.171 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.172 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.174 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.175 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.176 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.178 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.179 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.180 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.182 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.183 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.184 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.185 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.186 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.187 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.187 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.188 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.190 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.191 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.191 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.192 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.193 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.194 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.194 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideNaNInf iteration 1
10:24:06.195 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1423)
10:24:06.195 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.195 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1422)
10:24:06.195 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.205 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.206 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.216 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.217 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.218 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.220 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.221 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.223 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.224 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.225 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.226 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.227 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.228 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.228 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.229 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.230 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.230 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.231 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.232 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.232 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.233 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.234 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.235 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.235 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.235 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.235 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.235 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.239 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.240 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.243 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.244 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.245 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.246 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.247 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.249 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.249 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.250 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.251 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.253 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.254 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.255 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.256 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.258 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.259 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.260 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.260 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.262 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.263 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.264 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.267 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.268 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.269 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.271 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.272 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.281 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.282 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.284 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.285 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.286 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.287 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.287 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.288 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.289 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.289 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.290 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.291 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.291 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.292 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.293 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.293 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.294 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.295 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideNaNInf iteration 2
10:24:06.295 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=370)
10:24:06.295 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.295 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1432)
10:24:06.296 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.307 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.308 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.316 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.317 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.318 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.319 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.321 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.322 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.324 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.325 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.326 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.328 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.328 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.329 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.331 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.332 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.332 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.333 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.334 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.334 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.335 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.336 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.336 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.336 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.336 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.336 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.340 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.341 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.342 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.344 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.346 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.347 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.349 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.350 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.351 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.351 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.353 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.354 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.355 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.357 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.358 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.359 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.361 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.361 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.362 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.364 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.365 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.366 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.367 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.369 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.370 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.371 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.373 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.374 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.375 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.377 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.378 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.379 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.380 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.381 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.382 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.383 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.383 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.384 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.385 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.385 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.386 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.387 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.387 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.388 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.402 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.403 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivide iteration 0
10:24:06.404 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1474)
10:24:06.404 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.404 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1472)
10:24:06.405 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.416 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.417 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.426 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.427 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.429 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.430 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.432 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.433 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.434 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.436 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.437 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.438 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.440 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.440 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.441 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.442 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.443 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.443 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.444 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.445 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.445 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.446 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.447 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.447 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.447 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.447 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.447 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.451 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.453 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.454 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.455 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.457 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.458 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.459 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.460 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.462 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.462 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.463 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.465 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.466 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.467 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.468 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.470 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.471 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.473 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.474 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.475 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.476 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.478 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.479 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.480 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.481 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.483 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.484 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.485 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.487 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.488 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.489 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.490 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.492 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.492 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.493 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.494 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.494 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.495 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.496 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.496 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.497 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.498 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.499 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.499 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.512 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.513 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 0
10:24:06.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1524)
10:24:06.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1522)
10:24:06.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.527 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.527 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.532 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.536 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.537 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.539 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.540 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.542 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.543 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.545 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.546 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.547 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.549 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.550 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.550 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.551 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.552 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.552 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.553 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.554 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.554 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.555 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.556 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.557 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.558 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.558 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.558 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.558 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.558 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.562 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.563 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.565 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.566 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.567 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.568 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.570 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.571 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.572 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.573 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.574 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.575 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.577 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.578 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.579 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.587 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.589 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.590 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.591 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.592 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.593 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.596 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.597 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.599 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.600 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.601 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.603 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.604 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.606 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.607 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.608 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.609 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.611 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.611 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.612 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.613 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.613 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.614 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.615 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.616 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.616 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.617 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.618 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.618 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.619 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.620 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 1
10:24:06.620 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1522)
10:24:06.620 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.620 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1524)
10:24:06.621 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.633 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.633 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.638 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.642 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.644 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.645 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.647 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.648 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.650 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.651 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.654 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.656 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.657 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.657 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.658 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.659 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.659 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.660 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.661 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.662 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.662 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.663 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.664 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.669 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.670 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.672 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.673 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.675 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.676 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.677 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.678 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.680 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.680 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.681 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.683 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.684 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.685 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.686 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.688 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.689 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.690 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.694 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.696 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.697 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.698 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.699 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.701 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.702 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.704 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.705 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.706 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.707 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.709 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.710 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.710 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.711 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.712 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.712 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.713 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.714 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.714 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.715 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.717 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.718 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.719 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 2
10:24:06.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1522)
10:24:06.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1595)
10:24:06.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.731 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.732 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.736 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.741 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.742 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.744 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.745 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.747 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.748 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.749 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.750 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.752 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.753 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.754 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.755 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.755 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.756 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.757 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.757 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.758 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.760 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.761 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.762 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.762 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.762 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.762 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.762 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.765 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.766 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.768 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.769 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.770 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.772 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.773 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.774 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.775 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.776 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.777 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.778 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.780 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.781 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.782 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.783 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.784 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.786 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.786 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.787 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.790 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.791 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.792 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.794 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.795 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.796 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.797 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.799 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.800 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.801 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.802 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.804 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.805 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.806 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.806 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.807 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.808 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.808 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.809 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.810 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.810 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.811 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.812 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.812 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.814 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideInf iteration 3
10:24:06.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1634)
10:24:06.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1634)
10:24:06.815 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.826 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.827 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.835 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.836 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.838 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.839 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.841 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.842 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.844 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.845 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.847 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.848 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.849 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.849 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.850 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.851 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.851 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.852 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.853 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.853 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.854 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.855 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.855 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.861 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.862 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.864 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.865 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.871 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.873 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.874 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.875 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.876 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.877 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.878 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.879 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.881 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.882 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.883 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.887 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:06.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:06.890 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:06.891 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:06.892 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:06.894 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:06.895 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:06.896 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:06.897 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:06.899 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:06.900 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:06.901 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:06.903 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:06.904 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:06.905 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:06.906 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:06.907 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:06.908 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:06.908 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:06.909 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:06.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:06.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:06.911 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:06.912 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:06.912 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:06.913 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:06.914 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:06.925 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:06.925 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivide iteration 0
10:24:06.927 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1668)
10:24:06.927 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:06.927 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1666)
10:24:06.929 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:06.940 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:06.941 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:06.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:06.956 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:06.957 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:06.959 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.960 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.963 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.964 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:06.966 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:06.967 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:06.969 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:06.969 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:06.970 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:06.971 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:06.971 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:06.972 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:06.973 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:06.973 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:06.974 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:06.975 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:06.975 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:06.976 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:06.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:06.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:06.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:06.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:06.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:06.981 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:06.982 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:06.983 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:06.985 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:06.986 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:06.987 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.988 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:06.989 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:06.991 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:06.991 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:06.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:06.994 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:06.995 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:06.996 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:06.997 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:06.999 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.001 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.002 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.002 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.004 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.005 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.006 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.008 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.009 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.010 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.011 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.013 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.014 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.015 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.018 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.019 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.020 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.021 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.022 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.022 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.023 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.024 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.024 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.025 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.026 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.026 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.028 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.032 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.033 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideInf iteration 0
10:24:07.034 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1718)
10:24:07.034 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.034 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1716)
10:24:07.037 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.048 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.049 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.053 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.057 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.058 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.061 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.063 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.064 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.066 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.067 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.069 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.070 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.071 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.071 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.072 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.074 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.075 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.076 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.076 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.077 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.078 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.083 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.084 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.086 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.087 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.088 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.090 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.092 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.094 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.094 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.095 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.097 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.098 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.099 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.100 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.102 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.103 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.104 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.105 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.105 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.107 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.108 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.109 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.110 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.112 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.113 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.114 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.116 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.117 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.118 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.119 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.120 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.122 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.123 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.124 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.124 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.125 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.126 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.126 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.127 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.127 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.128 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.129 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.129 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.130 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.131 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.131 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideInf iteration 1
10:24:07.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1751)
10:24:07.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1716)
10:24:07.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.143 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.143 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.147 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.148 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.152 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.153 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.155 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.156 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.157 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.160 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.161 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.163 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.164 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.165 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.166 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.166 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.167 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.168 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.168 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.169 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.170 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.170 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.171 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.172 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.173 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.173 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.173 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.173 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.173 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.176 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.177 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.179 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.180 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.181 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.183 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.184 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.185 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.186 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.187 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.188 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.189 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.191 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.192 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.193 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.194 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.196 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.197 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.198 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.198 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.200 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.201 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.202 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.203 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.205 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.206 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.207 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.209 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.211 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.212 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.215 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.216 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.217 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.218 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.218 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.219 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.220 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.220 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.221 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.222 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.222 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.223 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.224 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.224 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.225 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testScalarDivideInf iteration 2
10:24:07.225 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1751)
10:24:07.226 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.226 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1784)
10:24:07.226 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.236 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.237 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.245 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.246 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.248 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.249 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.251 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.252 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.253 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.255 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.256 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.257 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.258 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.259 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.259 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.260 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.261 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.261 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.262 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.263 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.264 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.264 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.265 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.270 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.271 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.273 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.274 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.275 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.276 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.278 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.279 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.280 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.281 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.282 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.283 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.284 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.286 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.293 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.295 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.296 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.297 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.298 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.299 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.300 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.301 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.303 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.304 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.305 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.306 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.308 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.309 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.310 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.313 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.314 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.316 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.317 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.318 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.318 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.319 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.320 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.320 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.321 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.322 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.322 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.323 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.324 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.325 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.328 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.329 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanI iteration 0
10:24:07.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1818)
10:24:07.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1816)
10:24:07.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.340 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.341 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.349 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.350 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.352 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.353 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.355 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.356 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.357 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.359 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.360 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.361 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.362 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.363 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.363 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.364 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.365 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.366 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.366 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.367 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.368 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.368 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.369 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.370 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.370 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.370 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.370 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.370 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.374 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.375 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.377 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.378 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.379 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.380 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.381 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.383 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.384 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.385 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.385 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.387 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.388 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.389 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.391 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.392 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.393 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.394 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.395 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.396 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.397 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.399 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.400 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.401 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.402 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.403 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.405 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.406 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.408 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.409 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.410 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.411 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.412 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.413 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.414 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.415 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.415 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.416 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.417 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.417 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.418 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.419 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.419 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.420 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.421 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.422 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtanI iteration 1
10:24:07.423 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1865)
10:24:07.423 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.423 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:24:07.423 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.434 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.435 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.439 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.443 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.445 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.446 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.448 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.449 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.451 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.452 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.453 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.455 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.456 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.457 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.457 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.458 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.459 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.459 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.460 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.461 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.461 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.462 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.463 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.463 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.464 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.464 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.465 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.465 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.465 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.469 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.470 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.472 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.473 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.474 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.476 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.477 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.478 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.479 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.480 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.481 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.482 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.484 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.485 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.486 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.487 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.489 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.490 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.491 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.491 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.493 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.494 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.495 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.497 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.498 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.499 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.500 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.502 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.503 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.504 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.506 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.507 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.508 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.509 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.510 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.511 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.512 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.512 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.513 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.514 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.514 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.515 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.516 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.517 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.517 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.525 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.536 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtan iteration 0
10:24:07.536 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1924)
10:24:07.537 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.537 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=1921)
10:24:07.537 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.548 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.548 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.552 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.552 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.552 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.552 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.553 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.553 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.553 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.553 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.553 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.553 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.557 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.558 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.560 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.561 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.562 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.564 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.565 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.566 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.568 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.569 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.570 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.570 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.571 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.572 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.572 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.579 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.580 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.580 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.581 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.582 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.582 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.584 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.587 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.589 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.590 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.591 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.593 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.594 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.595 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.596 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.598 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.598 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.599 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.601 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.602 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.603 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.604 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.606 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.607 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.608 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.609 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.609 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.611 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.612 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.614 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.615 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.616 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.617 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.618 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.620 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.621 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.622 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.624 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.625 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.626 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.627 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.628 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.629 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.629 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.630 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.631 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.631 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.632 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.633 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.634 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.634 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.635 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.636 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.636 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testAtan iteration 1
10:24:07.637 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=1974)
10:24:07.637 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.637 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=367)
10:24:07.637 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.648 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.649 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.653 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.657 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.658 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.660 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.661 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.662 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.664 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.665 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.666 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.668 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.669 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.670 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.671 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.671 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.672 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.673 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.673 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.674 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.675 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.675 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.676 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.677 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.678 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.678 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.678 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.678 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.678 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.682 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.683 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.685 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.686 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.687 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.688 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.690 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.691 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.692 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.693 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.694 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.695 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.696 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.698 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.699 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.700 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.702 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.703 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.704 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.704 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.706 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.707 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.708 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.710 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.711 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.712 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.713 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.715 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.716 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.719 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.720 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.721 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.723 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.724 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.724 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.725 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.726 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.726 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.727 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.728 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.728 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.729 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.730 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.730 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.731 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.739 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.740 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideReal iteration 0
10:24:07.741 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2024)
10:24:07.741 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.741 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2022)
10:24:07.742 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.754 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.754 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.758 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.758 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.758 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.759 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.763 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.764 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.766 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.767 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.769 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.770 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.772 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.773 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.774 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.776 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.776 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.777 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.778 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.778 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.779 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.780 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.780 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.781 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.782 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.782 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.783 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.784 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.784 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.784 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.784 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.784 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.788 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.789 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.790 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.792 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.793 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.794 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.795 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.797 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.798 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.799 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.799 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.801 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.802 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.803 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.805 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.806 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.807 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.809 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.809 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.810 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.812 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.813 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.814 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.816 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.817 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.818 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.820 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.821 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.822 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.824 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.825 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.826 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.828 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.829 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.830 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.830 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.831 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.832 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.833 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.833 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.834 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.835 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.836 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.836 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.837 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.840 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.841 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideZero iteration 0
10:24:07.841 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=361)
10:24:07.842 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.842 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2072)
10:24:07.842 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.852 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.853 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.857 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.861 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.863 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.870 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.872 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.873 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.874 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.876 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.877 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.879 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.880 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.881 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.881 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.882 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.882 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.883 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.884 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.885 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.886 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.887 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.888 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.892 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.894 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.895 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.896 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.898 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.899 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.900 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.902 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.903 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.904 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:07.904 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:07.906 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.907 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.908 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:07.910 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.911 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:07.912 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:07.913 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:07.914 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:07.915 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:07.916 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:07.918 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:07.919 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:07.920 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:07.922 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:07.923 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:07.924 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:07.926 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:07.927 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:07.928 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:07.929 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:07.930 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:07.932 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:07.933 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:07.934 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:07.934 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:07.935 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:07.936 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:07.936 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:07.937 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:07.937 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:07.938 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:07.939 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:07.939 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:07.940 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:07.945 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:07.946 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction iteration 0
10:24:07.947 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2132)
10:24:07.947 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:07.947 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2128)
10:24:07.947 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:07.958 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:07.958 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:07.962 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:07.966 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:07.967 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:07.969 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.970 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.972 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:07.973 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:07.975 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:07.976 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:07.977 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:07.979 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:07.979 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:07.980 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:07.981 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:07.982 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:07.982 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:07.983 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:07.984 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:07.984 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:07.985 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:07.986 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:07.986 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:07.987 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:07.987 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:07.987 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:07.987 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:07.988 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:07.991 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:07.992 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:07.994 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:07.995 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:07.996 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:07.997 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:07.999 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.000 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.001 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.002 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:08.003 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:08.004 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:08.005 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:08.007 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:08.008 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:08.009 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.010 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.012 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.012 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:08.013 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:08.014 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:08.016 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:08.017 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:08.018 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:08.019 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:08.021 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:08.022 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:08.023 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:08.025 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:08.026 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:08.027 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:08.028 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:08.030 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:08.031 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:08.032 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:08.032 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:08.033 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:08.034 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:08.034 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:08.035 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:08.036 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:08.036 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:08.037 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:08.038 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:08.039 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:08.039 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:08.041 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction iteration 1
10:24:08.041 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2132)
10:24:08.041 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:08.041 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2179)
10:24:08.042 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:08.054 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:08.055 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:08.059 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:08.059 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:08.060 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:08.064 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:08.065 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:08.067 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:08.068 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:08.070 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:08.071 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:08.073 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:08.074 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:08.075 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:08.077 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:08.077 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:08.078 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:08.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:08.079 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:08.080 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:08.081 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:08.082 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:08.082 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:08.083 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:08.084 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:08.084 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:08.085 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:08.086 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:08.086 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:08.086 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:08.086 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:08.090 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:08.091 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:08.093 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:08.094 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:08.095 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:08.096 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:08.098 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.099 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.100 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.101 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:08.102 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:08.103 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:08.104 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:08.106 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:08.107 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:08.108 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.109 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.111 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:08.112 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:08.114 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:08.115 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:08.116 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:08.117 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:08.119 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:08.120 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:08.121 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:08.123 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:08.124 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:08.125 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:08.127 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:08.128 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:08.129 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:08.131 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:08.131 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:08.132 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:08.133 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:08.133 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:08.134 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:08.135 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:08.136 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:08.136 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:08.137 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:08.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:08.138 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:08.139 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:08.141 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction iteration 2
10:24:08.141 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2227)
10:24:08.141 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:08.141 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2226)
10:24:08.141 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:08.154 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:08.154 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:08.159 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:08.163 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:08.165 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:08.166 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:08.167 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:08.169 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:08.170 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:08.172 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:08.173 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:08.175 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:08.176 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:08.177 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:08.178 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:08.179 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:08.179 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:08.180 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:08.181 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:08.182 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:08.182 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:08.183 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:08.184 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:08.184 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:08.186 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:08.186 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:08.186 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:08.186 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:08.186 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:08.190 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:08.191 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:08.193 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:08.194 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:08.195 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:08.197 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:08.198 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.199 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.200 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.201 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:08.208 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:08.210 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:08.211 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:08.213 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:08.214 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:08.215 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.216 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.218 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.218 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:08.219 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:08.220 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:08.222 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:08.223 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:08.224 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:08.225 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:08.227 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:08.228 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:08.229 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:08.231 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:08.232 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:08.233 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:08.234 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:08.236 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:08.237 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:08.238 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:08.238 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:08.239 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:08.240 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:08.240 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:08.241 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:08.242 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:08.242 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:08.243 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:08.244 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:08.244 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:08.248 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - BreakpointEvent
10:24:08.249 [pool-4205-thread-1] INFO  f.i.l.r.s.DynamothCodeGenesisImpl - [test] org.apache.commons.math.complex.ComplexTest#testDivideImaginary iteration 0
10:24:08.249 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.SpoonElementsCollector - [data] divisor=instance of org.apache.commons.math.complex.Complex(id=2277)
10:24:08.250 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - Collect Level 1
10:24:08.250 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this=instance of org.apache.commons.math.complex.Complex(id=2275)
10:24:08.250 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor
10:24:08.261 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 0)
10:24:08.261 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] org.apache.commons.math.util.FastMath.abs((int) 1)
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.I
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.NaN
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.INF
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ONE
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.ZERO
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.imaginary
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.real
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isNaN
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite
10:24:08.266 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isZero
10:24:08.270 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) this)
10:24:08.271 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.equals((java.lang.Object) divisor)
10:24:08.273 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) this)
10:24:08.274 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:08.275 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) this)
10:24:08.277 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:08.278 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) this)
10:24:08.280 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.multiply((java.lang.Object) divisor)
10:24:08.281 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) this)
10:24:08.282 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.subtract((java.lang.Object) divisor)
10:24:08.283 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.abs()
10:24:08.284 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.conjugate()
10:24:08.285 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getImaginary()
10:24:08.285 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getReal()
10:24:08.286 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.isInfinite()
10:24:08.287 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.negate()
10:24:08.287 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.exp()
10:24:08.288 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.log()
10:24:08.289 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt()
10:24:08.289 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.sqrt1z()
10:24:08.290 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] this.getArgument()
10:24:08.291 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.I
10:24:08.291 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.NaN
10:24:08.291 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.INF
10:24:08.291 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ONE
10:24:08.291 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.ZERO
10:24:08.296 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) this)
10:24:08.297 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.equals((java.lang.Object) divisor)
10:24:08.299 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this)
10:24:08.300 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) divisor)
10:24:08.301 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.I)
10:24:08.303 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.NaN)
10:24:08.304 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.305 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.306 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.307 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.imaginary)
10:24:08.308 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((double) this.real)
10:24:08.309 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this)
10:24:08.311 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) divisor)
10:24:08.312 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.I)
10:24:08.313 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.NaN)
10:24:08.314 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.INF)
10:24:08.316 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ONE)
10:24:08.317 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((org.apache.commons.math.complex.Complex) this.ZERO)
10:24:08.318 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.imaginary)
10:24:08.318 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((double) this.real)
10:24:08.320 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this)
10:24:08.321 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) divisor)
10:24:08.322 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.I)
10:24:08.324 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.NaN)
10:24:08.325 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.INF)
10:24:08.326 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ONE)
10:24:08.327 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.multiply((java.lang.Object) this.ZERO)
10:24:08.329 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this)
10:24:08.330 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) divisor)
10:24:08.332 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.I)
10:24:08.333 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.NaN)
10:24:08.334 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.INF)
10:24:08.336 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ONE)
10:24:08.337 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.subtract((java.lang.Object) this.ZERO)
10:24:08.338 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.abs()
10:24:08.338 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.conjugate()
10:24:08.339 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getImaginary()
10:24:08.340 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getReal()
10:24:08.340 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.isInfinite()
10:24:08.341 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.negate()
10:24:08.342 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.exp()
10:24:08.342 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.log()
10:24:08.343 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt()
10:24:08.344 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.sqrt1z()
10:24:08.345 [pool-4205-thread-1] DEBUG f.i.l.r.s.c.DynamothDataCollector - [data] divisor.getArgument()
10:24:08.346 [pool-4205-thread-1] DEBUG f.i.l.r.s.DynamothCodeGenesisImpl - Exit


========= Info ==========
Nb constants             21
Nb method invocations    62
Nb field access          3
Nb variables             3
Total                    89
Nb evaluated expressions 3
Init Execution time      693 ms
Collect Execution time   3967 ms
Combine Execution time   11.0 ms
Nb Combination par sec   273 combinations/sec
Total Execution time     4671 ms
Nb line execution        38
Nb results               1

Results:
1. !((nextX > xA) && (nextX < xB))


========================
         Stat
========================
Operators: 
DIV 8
MUL 6
PLUS 4
OR 2
MINUS 2
AND 1
EQ 1
LT 1
Methods: 
isInfinite() 3
createComplex(double,double) 3
abs(double) 2
getReal() 1
checkNotNull(java.lang.Object) 1
isInfinite(double) 1
getImaginary() 1
isNaN(double) 1
Variable: 
real 10
imaginary 10
org.apache.commons.math.complex.Complex.NaN 10
isNaN 6
q 6
divisor 6
isZero 6
c 5
d 5
divisor 5
org.apache.commons.math.complex.Complex.ZERO 4
org.apache.commons.math.complex.Complex.INF 4
denominator 4

 & 21 & 62 & 3 & 3 & 89 & 3 & 4672 ms & 38 &
10:24:08.358 [pool-4205-thread-1] INFO  f.i.l.repair.nopol.patch.TestPatch - Applying patch: org.apache.commons.math.complex.Complex:254: CONDITIONAL !((nextX > xA) && (nextX < xB))
10:24:08.570 [pool-4205-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:83: error: cannot find symbol
        if (!((nextX > xA) && (nextX < xB))) {
               ^
  symbol:   variable nextX
  location: class org.apache.commons.math.complex.Complex
Complex.java:83: error: cannot find symbol
        if (!((nextX > xA) && (nextX < xB))) {
                       ^
  symbol:   variable xA
  location: class org.apache.commons.math.complex.Complex
Complex.java:83: error: cannot find symbol
        if (!((nextX > xA) && (nextX < xB))) {
                               ^
  symbol:   variable nextX
  location: class org.apache.commons.math.complex.Complex
Complex.java:83: error: cannot find symbol
        if (!((nextX > xA) && (nextX < xB))) {
                                       ^
  symbol:   variable xB
  location: class org.apache.commons.math.complex.Complex
10:24:08.570 [pool-4205-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Patch malformed !((nextX > xA) && (nextX < xB))
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99) ~[nopol.jar:na]
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140) ~[nopol.jar:na]
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135) ~[nopol.jar:na]
	at fr.inria.lille.repair.nopol.patch.TestPatch.passesAllTests(TestPatch.java:60) ~[nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.isOk(NoPol.java:317) [nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:302) [nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81) [nopol.jar:na]
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260) [nopol.jar:na]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_181]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_181]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_181]
10:24:08.571 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: invalid patch
10:24:08.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
10:24:08.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:253 which is executed by 17 tests
-1679819631
10:24:08.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:08.793 [pool-6825-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:09.052 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
10:24:09.052 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:329 which is executed by 6 tests
-1679819631
10:24:09.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:09.295 [pool-6831-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:09.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
10:24:09.570 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3005 which is executed by 7 tests
1033054629
10:24:09.793 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:09.864 [pool-6837-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (63 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:10.359 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
10:24:10.359 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3004 which is executed by 7 tests
1033054629
10:24:10.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:10.633 [pool-6843-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:11.073 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:11.130 [pool-6849-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:11.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
10:24:11.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:430 which is executed by 7 tests
-1679819631
10:24:11.798 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:11.853 [pool-6855-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:12.106 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
10:24:12.106 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:278 which is executed by 9 tests
-1679819631
10:24:12.269 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:12.326 [pool-6861-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:12.523 [pool-6860-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:111: error: missing return statement
    }
    ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
10:24:12.523 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
10:24:12.523 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:277 which is executed by 9 tests
-1679819631
10:24:12.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
10:24:12.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:276 which is executed by 9 tests
-1679819631
10:24:12.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
10:24:12.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:122 which is executed by 11 tests
-1679819631
10:24:12.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:13.040 [pool-6863-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:13.279 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
10:24:13.279 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:270 which is executed by 12 tests
-1679819631
10:24:13.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:13.489 [pool-6869-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:13.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
10:24:13.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:268 which is executed by 12 tests
-1679819631
10:24:13.893 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
10:24:13.893 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:267 which is executed by 12 tests
-1679819631
10:24:14.046 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
10:24:14.046 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:263 which is executed by 12 tests
-1679819631
10:24:14.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:14.253 [pool-6875-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:14.492 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:14.548 [pool-6881-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:14.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
10:24:14.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:754 which is executed by 15 tests
-1679819631
10:24:14.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
10:24:14.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1288 which is executed by 18 tests
1033054629
10:24:15.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:15.220 [pool-6887-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:15.617 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
10:24:15.617 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1284 which is executed by 18 tests
1033054629
10:24:15.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:15.870 [pool-6893-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:16.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:16.352 [pool-6899-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:16.719 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
10:24:16.719 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:164 which is executed by 19 tests
-1679819631
10:24:16.873 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
10:24:16.873 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:750 which is executed by 21 tests
-1679819631
10:24:17.025 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:17.082 [pool-6905-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:17.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:17.375 [pool-6911-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:17.634 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
10:24:17.634 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:379 which is executed by 21 tests
-1679819631
10:24:17.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
10:24:17.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:497 which is executed by 22 tests
-1679819631
10:24:17.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
10:24:17.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:160 which is executed by 23 tests
-1679819631
10:24:18.092 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:18.148 [pool-6917-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:18.393 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:18.447 [pool-6923-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:18.684 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
10:24:18.684 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:159 which is executed by 23 tests
-1679819631
10:24:18.836 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:18.899 [pool-6929-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:19.136 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
10:24:19.136 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:493 which is executed by 25 tests
-1679819631
10:24:19.289 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:19.342 [pool-6935-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:19.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:19.629 [pool-6941-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:19.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
10:24:19.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:492 which is executed by 25 tests
-1679819631
10:24:20.016 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:20.069 [pool-6947-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:20.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
10:24:20.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:425 which is executed by 27 tests
-1679819631
10:24:20.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:20.524 [pool-6953-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:20.756 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:20.812 [pool-6959-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:21.048 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
10:24:21.048 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:121 which is executed by 34 tests
-1679819631
10:24:21.201 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:21.256 [pool-6965-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:21.496 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:21.550 [pool-6971-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:21.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
10:24:21.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:118 which is executed by 35 tests
-1679819631
10:24:21.935 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:21.989 [pool-6977-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:22.220 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:22.274 [pool-6983-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:22.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
10:24:22.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:422 which is executed by 35 tests
-1679819631
10:24:22.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:22.709 [pool-6989-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:22.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:23.004 [pool-6995-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:23.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
10:24:23.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:421 which is executed by 35 tests
-1679819631
10:24:23.385 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:23.438 [pool-7001-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:23.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
10:24:23.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:328 which is executed by 42 tests
-1679819631
10:24:23.816 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:23.870 [pool-7007-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:24.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:24.182 [pool-7013-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:24.418 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
10:24:24.418 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:327 which is executed by 42 tests
-1679819631
10:24:24.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
10:24:24.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:392 which is executed by 44 tests
-1679819631
10:24:24.720 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
10:24:24.720 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:326 which is executed by 44 tests
-1679819631
10:24:24.871 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:24.924 [pool-7019-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:25.154 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:25.211 [pool-7025-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:25.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
10:24:25.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:323 which is executed by 58 tests
-1679819631
10:24:25.619 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:25.672 [pool-7031-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:25.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:25.952 [pool-7037-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:26.184 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
10:24:26.184 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:593 which is executed by 69 tests
1857420685
10:24:26.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
10:24:26.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:570 which is executed by 69 tests
1857420685
10:24:26.491 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:24:35.536 [pool-7043-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9038 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:24:36.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:24:45.240 [pool-7047-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9208 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:24:45.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
10:24:45.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:562 which is executed by 69 tests
1857420685
10:24:45.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
10:24:45.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:560 which is executed by 69 tests
1857420685
10:24:45.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:24:54.979 [pool-7051-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8986 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:24:55.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
10:24:55.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:556 which is executed by 69 tests
1857420685
10:24:55.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:04.665 [pool-7055-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9029 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:05.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
10:25:05.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:555 which is executed by 69 tests
1857420685
10:25:05.189 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:14.219 [pool-7059-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9025 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:14.667 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:23.748 [pool-7063-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9077 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:24.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
10:25:24.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:554 which is executed by 69 tests
1857420685
10:25:24.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:33.290 [pool-7067-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9016 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:33.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
10:25:33.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:553 which is executed by 69 tests
1857420685
10:25:33.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:42.826 [pool-7071-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9001 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:43.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
10:25:43.265 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:551 which is executed by 69 tests
1857420685
10:25:43.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:52.479 [pool-7075-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9061 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:52.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
10:25:52.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:547 which is executed by 69 tests
1857420685
10:25:53.046 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:02.153 [pool-7079-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9103 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:02.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
10:26:02.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:546 which is executed by 69 tests
1857420685
10:26:02.822 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:11.845 [pool-7083-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9018 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:12.218 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:21.286 [pool-7087-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9063 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:21.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
10:26:21.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:543 which is executed by 69 tests
1857420685
10:26:21.803 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:30.925 [pool-7091-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9118 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:31.358 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
10:26:31.358 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:542 which is executed by 69 tests
1857420685
10:26:31.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:40.638 [pool-7095-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9122 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:41.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
10:26:41.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:541 which is executed by 69 tests
1857420685
10:26:41.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:50.149 [pool-7099-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8990 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:50.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:59.632 [pool-7103-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9102 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

10:26:59.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
10:26:59.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:538 which is executed by 69 tests
1857420685
10:27:00.131 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:09.166 [pool-7107-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9027 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:09.537 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
10:27:09.538 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:537 which is executed by 69 tests
1857420685
10:27:09.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:18.709 [pool-7111-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9020 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:19.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
10:27:19.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:536 which is executed by 69 tests
1857420685
10:27:19.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:28.296 [pool-7115-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9033 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:28.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:37.733 [pool-7119-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9060 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:38.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
10:27:38.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:533 which is executed by 69 tests
1857420685
10:27:38.254 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:47.244 [pool-7123-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8986 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:47.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
10:27:47.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:532 which is executed by 69 tests
1857420685
10:27:47.771 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:56.876 [pool-7127-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9100 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:57.277 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:06.323 [pool-7131-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9042 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:06.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
10:28:06.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:530 which is executed by 69 tests
1857420685
10:28:06.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:15.946 [pool-7135-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9081 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:16.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
10:28:16.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:529 which is executed by 69 tests
1857420685
10:28:16.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:25.571 [pool-7139-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9081 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:25.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
10:28:25.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:527 which is executed by 69 tests
1857420685
10:28:26.105 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
10:28:26.105 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:525 which is executed by 69 tests
1857420685
10:28:26.252 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
10:28:26.252 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:524 which is executed by 69 tests
1857420685
10:28:26.398 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
10:28:26.398 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:523 which is executed by 69 tests
1857420685
10:28:26.545 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
10:28:26.546 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:522 which is executed by 69 tests
1857420685
10:28:26.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
10:28:26.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:329 which is executed by 69 tests
1857420685
10:28:26.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
10:28:26.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:328 which is executed by 69 tests
1857420685
10:28:26.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:36.073 [pool-7143-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9081 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:36.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
10:28:36.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:266 which is executed by 69 tests
1857420685
10:28:36.590 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
10:28:36.590 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:248 which is executed by 69 tests
1857420685
10:28:36.737 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
10:28:36.737 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1488 which is executed by 69 tests
68623
10:28:36.932 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
10:28:36.932 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1485 which is executed by 69 tests
68623
10:28:37.115 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:46.356 [pool-7147-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9236 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:46.947 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
10:28:46.947 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1484 which is executed by 69 tests
68623
10:28:47.131 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:56.177 [pool-7151-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9042 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:56.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
10:28:56.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1482 which is executed by 69 tests
68623
10:28:56.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:06.138 [pool-7155-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9242 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:06.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:15.879 [pool-7159-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9176 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:16.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
10:29:16.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1476 which is executed by 69 tests
68623
10:29:16.550 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:25.710 [pool-7163-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9156 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:26.220 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:35.319 [pool-7167-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9095 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:35.789 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
10:29:35.789 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1470 which is executed by 69 tests
68623
10:29:35.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:45.081 [pool-7171-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9103 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:45.589 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:54.713 [pool-7175-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9120 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:55.257 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
10:29:55.257 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1463 which is executed by 69 tests
68623
10:29:55.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:04.689 [pool-7179-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9241 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:30:05.171 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:14.376 [pool-7183-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9201 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:30:14.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
10:30:14.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1460 which is executed by 69 tests
68623
10:30:15.026 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:24.173 [pool-7187-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9143 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:30:24.654 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
10:30:24.654 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1459 which is executed by 69 tests
68623
10:30:24.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:34.118 [pool-7191-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9282 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

10:33:54.391 [pool-7190-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
10:33:54.391 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
10:33:54.391 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
10:33:54.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1458 which is executed by 69 tests
68623
10:33:54.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
10:33:54.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1457 which is executed by 69 tests
68623
10:33:54.753 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:34:03.843 [pool-7194-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9086 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:34:44.943 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
10:34:44.944 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1456 which is executed by 69 tests
68623
10:34:45.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
10:34:45.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1454 which is executed by 69 tests
68623
10:34:45.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:34:54.374 [pool-7198-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9066 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:34:54.869 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:03.847 [pool-7202-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8974 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:04.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
10:35:04.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1438 which is executed by 69 tests
68623
10:35:04.584 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:13.678 [pool-7206-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9090 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:14.160 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
10:35:14.160 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1437 which is executed by 69 tests
68623
10:35:14.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:23.453 [pool-7210-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9098 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:23.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
10:35:23.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1419 which is executed by 69 tests
68623
10:35:24.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:33.147 [pool-7214-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9047 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:33.622 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
10:35:33.622 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1418 which is executed by 69 tests
68623
10:35:33.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
10:35:33.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:642 which is executed by 69 tests
68623
10:35:33.972 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
10:35:33.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:211 which is executed by 71 tests
1648821820
10:35:34.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
10:35:34.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:210 which is executed by 71 tests
1648821820
10:35:34.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:43.317 [pool-7218-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9055 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:43.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
10:35:43.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3003 which is executed by 71 tests
1033054629
10:35:43.864 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:35:43.917 [pool-7222-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:35:44.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:35:44.320 [pool-7228-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (60 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:35:44.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
10:35:44.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:201 which is executed by 72 tests
1648821820
10:35:44.832 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
10:35:44.833 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:199 which is executed by 72 tests
1648821820
10:35:44.975 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:54.065 [pool-7234-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9086 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:54.489 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
10:35:54.490 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:195 which is executed by 72 tests
1648821820
10:35:54.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:03.756 [pool-7238-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9120 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:04.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
10:36:04.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:194 which is executed by 72 tests
1648821820
10:36:04.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:13.427 [pool-7242-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9174 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:13.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
10:36:13.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:193 which is executed by 72 tests
1648821820
10:36:13.920 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:22.955 [pool-7246-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9031 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:23.362 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:32.479 [pool-7250-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9114 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:32.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
10:36:32.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:192 which is executed by 72 tests
1648821820
10:36:33.004 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:42.159 [pool-7254-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9151 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:42.522 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
10:36:42.522 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:191 which is executed by 72 tests
1648821820
10:36:42.664 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:51.743 [pool-7258-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9075 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:52.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
10:36:52.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:190 which is executed by 72 tests
1648821820
10:36:52.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
10:36:52.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:189 which is executed by 72 tests
1648821820
10:36:52.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
10:36:52.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:188 which is executed by 72 tests
1648821820
10:36:52.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
10:36:52.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:187 which is executed by 72 tests
1648821820
10:36:52.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:01.763 [pool-7262-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9099 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:02.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
10:37:02.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:183 which is executed by 72 tests
1648821820
10:37:02.262 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:11.366 [pool-7266-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9100 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:11.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
10:37:11.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:182 which is executed by 72 tests
1648821820
10:37:11.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:20.983 [pool-7270-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9122 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:21.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:30.490 [pool-7274-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9139 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:30.868 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
10:37:30.868 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:180 which is executed by 72 tests
1648821820
10:37:31.011 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:40.098 [pool-7278-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9083 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:40.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
10:37:40.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:179 which is executed by 72 tests
1648821820
10:37:40.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:49.606 [pool-7282-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8999 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:49.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
10:37:49.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:178 which is executed by 72 tests
1648821820
10:37:50.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:59.245 [pool-7286-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9138 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:59.604 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:08.705 [pool-7290-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9098 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:09.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
10:38:09.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:177 which is executed by 72 tests
1648821820
10:38:09.203 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:18.356 [pool-7294-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9149 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:18.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
10:38:18.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:176 which is executed by 72 tests
1648821820
10:38:18.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:27.872 [pool-7298-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9017 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:28.261 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
10:38:28.261 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:175 which is executed by 72 tests
1648821820
10:38:28.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
10:38:28.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:174 which is executed by 72 tests
1648821820
10:38:28.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
10:38:28.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:173 which is executed by 72 tests
1648821820
10:38:28.686 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
10:38:28.686 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:172 which is executed by 72 tests
1648821820
10:38:28.828 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:37.872 [pool-7302-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9040 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:38.223 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
10:38:38.223 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:170 which is executed by 72 tests
1648821820
10:38:38.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
10:38:38.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:169 which is executed by 72 tests
1648821820
10:38:38.505 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
10:38:38.505 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:168 which is executed by 72 tests
1648821820
10:38:38.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:47.885 [pool-7306-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9235 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:48.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
10:38:48.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:163 which is executed by 72 tests
1648821820
10:38:48.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:57.464 [pool-7310-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9066 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:57.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:06.960 [pool-7314-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9139 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:07.324 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
10:39:07.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2977 which is executed by 73 tests
1033054629
10:39:07.519 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:07.573 [pool-7318-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:07.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:07.945 [pool-7324-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:08.262 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
10:39:08.262 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2973 which is executed by 74 tests
1033054629
10:39:08.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:08.514 [pool-7330-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:08.839 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:08.899 [pool-7336-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:09.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
10:39:09.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:1131 which is executed by 80 tests
-1679819631
10:39:09.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
10:39:09.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:152 which is executed by 99 tests
1648821820
10:39:09.550 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
10:39:09.550 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:150 which is executed by 99 tests
1648821820
10:39:09.692 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:18.797 [pool-7342-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9101 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:19.159 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
10:39:19.159 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:149 which is executed by 99 tests
1648821820
10:39:19.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:28.468 [pool-7346-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9158 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:28.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
10:39:28.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:146 which is executed by 99 tests
1648821820
10:39:28.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:38.092 [pool-7350-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9104 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:38.443 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
10:39:38.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:145 which is executed by 99 tests
1648821820
10:39:38.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:47.669 [pool-7354-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9080 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:48.035 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
10:39:48.035 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:144 which is executed by 99 tests
1648821820
10:39:48.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
10:39:48.177 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:368 which is executed by 111 tests
-1679819631
10:39:48.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
10:39:48.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:359 which is executed by 112 tests
-1679819631
10:39:48.476 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
10:39:48.476 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:2337 which is executed by 585 tests
-1550426518
10:39:48.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
10:39:48.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:2334 which is executed by 590 tests
-1550426518
10:39:48.871 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:48.971 [pool-7358-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (68 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:49.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:49.544 [pool-7364-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (90 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:49.894 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
10:39:49.894 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3882 which is executed by 247 tests
1033054629
10:39:50.102 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
10:39:50.102 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1256 which is executed by 448 tests
1033054629
10:39:50.293 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
10:39:50.293 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1283 which is executed by 595 tests
1033054629
10:39:50.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:50.540 [pool-7370-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:50.884 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:50.940 [pool-7376-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:51.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
10:39:51.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1272 which is executed by 595 tests
1033054629
10:39:51.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:51.539 [pool-7382-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:51.903 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:51.960 [pool-7388-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:52.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
10:39:52.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1269 which is executed by 595 tests
1033054629
10:39:52.513 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
10:39:52.513 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1266 which is executed by 596 tests
1033054629
10:39:52.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:52.757 [pool-7394-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:53.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:53.157 [pool-7400-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>]
java.lang.AssertionError: expected:<(Infinity, Infinity)> but was:<(NaN, NaN)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:233)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:39:53.490 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
10:39:53.490 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3410 which is executed by 1157 tests
1033054629
10:39:53.703 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
10:39:53.880 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 571
10:39:53.880 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 3599
10:39:53.880 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 128
10:39:53.880 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 4
10:39:53.880 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 1133841ms
10:39:53.880 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
Command exited with non-zero status 255
1883.20user 22.31system 18:55.71elapsed 167%CPU (0avgtext+0avgdata 988900maxresident)k
54368inputs+12488outputs (7major+491202minor)pagefaults 0swaps


Node: graphene-67.nancy.grid5000.fr



Date: Sat Dec  1 10:39:54 EST 2018

