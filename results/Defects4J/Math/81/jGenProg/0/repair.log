cd /tmp/jGenProg_Defects4J_Math_81;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../libs/jtestex7.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-81 \
	-failing org.apache.commons.math.linear.EigenDecompositionImplTest \
	-jvm4testexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-jvm4evosuitetestexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters x:x \
	-dependencies /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_81/target/classes/:/tmp/jGenProg_Defects4J_Math_81/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
2018-12-01 14:26:36,705 INFO main - command line arguments: [-mode  jgenprog  -location  .  -id  Math-81  -failing  org.apache.commons.math.linear.EigenDecompositionImplTest  -jvm4testexecution  /home/tdurieux/openjdk-1.7.0/bin/  -jvm4evosuitetestexecution  /home/tdurieux/openjdk-1.7.0/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  x:x  -dependencies  /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_81/target/classes/:/tmp/jGenProg_Defects4J_Math_81/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar]
2018-12-01 14:26:36,708 INFO fr.inria.main.evolution.AstorMain - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:842) - Source folders: [/tmp/jGenProg_Defects4J_Math_81/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:861) - Source Test folders: [/tmp/jGenProg_Defects4J_Math_81/./src/test/java]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:75) - -Executing Gzoltar classpath: /tmp/jGenProg_Defects4J_Math_81/./output_astor/AstorMain-Math-81//bin//default from 450 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:149) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:169) - -gz-Adding classpath: [/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /tmp/jGenProg_Defects4J_Math_81/target/test-classes/, /tmp/jGenProg_Defects4J_Math_81/target/classes/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, /tmp/jGenProg_Defects4J_Math_81/./output_astor/AstorMain-Math-81//bin//default, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.apache.commons.math.linear.EigenDecompositionImplTest#testMath308
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:218) - Gzoltar Test Result Total:2101, fails: 1, GZoltar suspicious 16653, with positive susp 401
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - nr test results 2101
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:271) - Gzoltar found: 381 with susp > 0.1, we consider: 381
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:689) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:781) - Creating model,  Code location from working folder: /tmp/jGenProg_Defects4J_Math_81/./output_astor/AstorMain-Math-81//src//default
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:65) - building model: /tmp/jGenProg_Defects4J_Math_81/./output_astor/AstorMain-Math-81//src//default, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:78) - Classpath for building SpoonModel [/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /tmp/jGenProg_Defects4J_Math_81/target/classes/, /tmp/jGenProg_Defects4J_Math_81/target/test-classes/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:693) - 
---- Initial suspicious size: 381
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 381,  351
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 351
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 351, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/jGenProg_Defects4J_Math_81/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 28860
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.linear.EigenDecompositionImplTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-81
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0-u80-unofficial
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jgenprog
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_81/target/classes/:/tmp/jGenProg_Defects4J_Math_81/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:171) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:173) - Killed the Process that runs JUnit test cases 5415
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:171) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:173) - Killed the Process that runs JUnit test cases 5448
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:171) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:173) - Killed the Process that runs JUnit test cases 5663
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.processCreatedVariant(AstorCoreEngine.java:436) - -Found Solution, child variant #62
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:346) - Error variant :62 the model was not the same from the original after this generation
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:364) - Undo Error: diff: 
/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -1,66 +1,21 @@
 public class Array2DRowRealMatrix extends org.apache.commons.math.linear.AbstractRealMatrix implements java.io.Serializable {
-
-
 	private static final long serialVersionUID = -1067294169172445528L;
 
-
 	protected double[][] data;
 
-
-
-
 	public Array2DRowRealMatrix() {
 	}
 
-
-
-
-
-
-
-
-
-	public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) throws 
-	java.lang.IllegalArgumentException {
+	public Array2DRowRealMatrix(final int rowDimension, final int columnDimension) throws java.lang.IllegalArgumentException {
 		super(rowDimension, columnDimension);
 		data = new double[rowDimension][columnDimension];
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public Array2DRowRealMatrix(final double[][] d) throws 
-	java.lang.IllegalArgumentException, java.lang.NullPointerException {
+	public Array2DRowRealMatrix(final double[][] d) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
 		copyIn(d);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) throws 
-	java.lang.IllegalArgumentException, java.lang.NullPointerException {
+	public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
 		if (copyArray) {
 			copyIn(d);
 		}else {
@@ -77,23 +32,13 @@
 			}
 			for (int r = 1; r < nRows; r++) {
 				if ((d[r].length) != nCols) {
-					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-					"some rows have length {0} while others have length {1}", 
-					nCols, d[r].length);
+					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}", nCols, d[r].length);
 				}
 			}
 			data = d;
 		}
 	}
 
-
-
-
-
-
-
-
-
 	public Array2DRowRealMatrix(final double[] v) {
 		final int nRows = v.length;
 		data = new double[nRows][1];
@@ -102,23 +47,18 @@
 		}
 	}
 
-
 	@java.lang.Override
-	public org.apache.commons.math.linear.RealMatrix createMatrix(final int rowDimension, final int columnDimension) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealMatrix createMatrix(final int rowDimension, final int columnDimension) throws java.lang.IllegalArgumentException {
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(rowDimension, columnDimension);
 	}
 
-
 	@java.lang.Override
 	public org.apache.commons.math.linear.RealMatrix copy() {
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(copyOut(), false);
 	}
 
-
 	@java.lang.Override
-	public org.apache.commons.math.linear.RealMatrix add(final org.apache.commons.math.linear.RealMatrix m) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealMatrix add(final org.apache.commons.math.linear.RealMatrix m) throws java.lang.IllegalArgumentException {
 		try {
 			return add(((org.apache.commons.math.linear.Array2DRowRealMatrix) (m)));
 		} catch (java.lang.ClassCastException cce) {
@@ -126,19 +66,8 @@
 		}
 	}
 
-
-
-
-
-
-
-
-	public org.apache.commons.math.linear.Array2DRowRealMatrix add(final org.apache.commons.math.linear.Array2DRowRealMatrix m) throws 
-	java.lang.IllegalArgumentException {
-
-
+	public org.apache.commons.math.linear.Array2DRowRealMatrix add(final org.apache.commons.math.linear.Array2DRowRealMatrix m) throws java.lang.IllegalArgumentException {
 		org.apache.commons.math.linear.MatrixUtils.checkAdditionCompatible(this, m);
-
 		final int rowCount = getRowDimension();
 		final int columnCount = getColumnDimension();
 		final double[][] outData = new double[rowCount][columnCount];
@@ -150,15 +79,11 @@
 				outDataRow[col] = (dataRow[col]) + (mRow[col]);
 			}
 		}
-
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(outData, false);
-
 	}
 
-
 	@java.lang.Override
-	public org.apache.commons.math.linear.RealMatrix subtract(final org.apache.commons.math.linear.RealMatrix m) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealMatrix subtract(final org.apache.commons.math.linear.RealMatrix m) throws java.lang.IllegalArgumentException {
 		try {
 			return subtract(((org.apache.commons.math.linear.Array2DRowRealMatrix) (m)));
 		} catch (java.lang.ClassCastException cce) {
@@ -166,19 +91,8 @@
 		}
 	}
 
-
-
-
-
-
-
-
-	public org.apache.commons.math.linear.Array2DRowRealMatrix subtract(final org.apache.commons.math.linear.Array2DRowRealMatrix m) throws 
-	java.lang.IllegalArgumentException {
-
-
+	public org.apache.commons.math.linear.Array2DRowRealMatrix subtract(final org.apache.commons.math.linear.Array2DRowRealMatrix m) throws java.lang.IllegalArgumentException {
 		org.apache.commons.math.linear.MatrixUtils.checkSubtractionCompatible(this, m);
-
 		final int rowCount = getRowDimension();
 		final int columnCount = getColumnDimension();
 		final double[][] outData = new double[rowCount][columnCount];
@@ -190,15 +104,11 @@
 				outDataRow[col] = (dataRow[col]) - (mRow[col]);
 			}
 		}
-
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(outData, false);
-
 	}
 
-
 	@java.lang.Override
-	public org.apache.commons.math.linear.RealMatrix multiply(final org.apache.commons.math.linear.RealMatrix m) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealMatrix multiply(final org.apache.commons.math.linear.RealMatrix m) throws java.lang.IllegalArgumentException {
 		try {
 			return multiply(((org.apache.commons.math.linear.Array2DRowRealMatrix) (m)));
 		} catch (java.lang.ClassCastException cce) {
@@ -206,19 +116,8 @@
 		}
 	}
 
-
-
-
-
-
-
-
-	public org.apache.commons.math.linear.Array2DRowRealMatrix multiply(final org.apache.commons.math.linear.Array2DRowRealMatrix m) throws 
-	java.lang.IllegalArgumentException {
-
-
+	public org.apache.commons.math.linear.Array2DRowRealMatrix multiply(final org.apache.commons.math.linear.Array2DRowRealMatrix m) throws java.lang.IllegalArgumentException {
 		org.apache.commons.math.linear.MatrixUtils.checkMultiplicationCompatible(this, m);
-
 		final int nRows = this.getRowDimension();
 		final int nCols = m.getColumnDimension();
 		final int nSum = this.getColumnDimension();
@@ -234,48 +133,31 @@
 				outDataRow[col] = sum;
 			}
 		}
-
 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(outData, false);
-
 	}
 
-
 	@java.lang.Override
 	public double[][] getData() {
 		return copyOut();
 	}
 
-
-
-
-
-
-
-
 	public double[][] getDataRef() {
 		return data;
 	}
 
-
 	@java.lang.Override
-	public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws 
-	org.apache.commons.math.linear.MatrixIndexException {
+	public void setSubMatrix(final double[][] subMatrix, final int row, final int column) throws org.apache.commons.math.linear.MatrixIndexException {
 		if ((data) == null) {
 			if (row > 0) {
-				throw org.apache.commons.math.MathRuntimeException.createIllegalStateException(
-				"first {0} rows are not initialized yet", 
-				row);
+				throw org.apache.commons.math.MathRuntimeException.createIllegalStateException("first {0} rows are not initialized yet", row);
 			}
 			if (column > 0) {
-				throw org.apache.commons.math.MathRuntimeException.createIllegalStateException(
-				"first {0} columns are not initialized yet", 
-				column);
+				throw org.apache.commons.math.MathRuntimeException.createIllegalStateException("first {0} columns are not initialized yet", column);
 			}
 			final int nRows = subMatrix.length;
 			if (nRows == 0) {
 				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
 			}
-
 			final int nCols = subMatrix[0].length;
 			if (nCols == 0) {
 				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
@@ -283,92 +165,67 @@
 			data = new double[subMatrix.length][nCols];
 			for (int i = 0; i < (data.length); ++i) {
 				if ((subMatrix[i].length) != nCols) {
-					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-					"some rows have length {0} while others have length {1}", 
-					nCols, subMatrix[i].length);
+					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}", nCols, subMatrix[i].length);
 				}
 				java.lang.System.arraycopy(subMatrix[i], 0, data[(i + row)], column, nCols);
 			}
 		}else {
 			super.setSubMatrix(subMatrix, row, column);
 		}
-
 	}
 
-
 	@java.lang.Override
-	public double getEntry(final int row, final int column) throws 
-	org.apache.commons.math.linear.MatrixIndexException {
+	public double getEntry(final int row, final int column) throws org.apache.commons.math.linear.MatrixIndexException {
 		try {
 			return data[row][column];
 		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
-			throw new org.apache.commons.math.linear.MatrixIndexException(
-			"no entry at indices ({0}, {1}) in a {2}x{3} matrix", 
-			row, column, getRowDimension(), getColumnDimension());
+			throw new org.apache.commons.math.linear.MatrixIndexException("no entry at indices ({0}, {1}) in a {2}x{3} matrix", row, column, getRowDimension(), getColumnDimension());
 		}
 	}
 
-
 	@java.lang.Override
-	public void setEntry(final int row, final int column, final double value) throws 
-	org.apache.commons.math.linear.MatrixIndexException {
+	public void setEntry(final int row, final int column, final double value) throws org.apache.commons.math.linear.MatrixIndexException {
 		try {
 			data[row][column] = value;
 		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
-			throw new org.apache.commons.math.linear.MatrixIndexException(
-			"no entry at indices ({0}, {1}) in a {2}x{3} matrix", 
-			row, column, getRowDimension(), getColumnDimension());
+			throw new org.apache.commons.math.linear.MatrixIndexException("no entry at indices ({0}, {1}) in a {2}x{3} matrix", row, column, getRowDimension(), getColumnDimension());
 		}
 	}
 
-
 	@java.lang.Override
-	public void addToEntry(final int row, final int column, final double increment) throws 
-	org.apache.commons.math.linear.MatrixIndexException {
+	public void addToEntry(final int row, final int column, final double increment) throws org.apache.commons.math.linear.MatrixIndexException {
 		try {
 			data[row][column] += increment;
 		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
-			throw new org.apache.commons.math.linear.MatrixIndexException(
-			"no entry at indices ({0}, {1}) in a {2}x{3} matrix", 
-			row, column, getRowDimension(), getColumnDimension());
+			throw new org.apache.commons.math.linear.MatrixIndexException("no entry at indices ({0}, {1}) in a {2}x{3} matrix", row, column, getRowDimension(), getColumnDimension());
 		}
 	}
 
-
 	@java.lang.Override
-	public void multiplyEntry(final int row, final int column, final double factor) throws 
-	org.apache.commons.math.linear.MatrixIndexException {
+	public void multiplyEntry(final int row, final int column, final double factor) throws org.apache.commons.math.linear.MatrixIndexException {
 		try {
 			data[row][column] *= factor;
 		} catch (java.lang.ArrayIndexOutOfBoundsException e) {
-			throw new org.apache.commons.math.linear.MatrixIndexException(
-			"no entry at indices ({0}, {1}) in a {2}x{3} matrix", 
-			row, column, getRowDimension(), getColumnDimension());
+			throw new org.apache.commons.math.linear.MatrixIndexException("no entry at indices ({0}, {1}) in a {2}x{3} matrix", row, column, getRowDimension(), getColumnDimension());
 		}
 	}
 
-
 	@java.lang.Override
 	public int getRowDimension() {
 		return (data) == null ? 0 : data.length;
 	}
 
-
 	@java.lang.Override
 	public int getColumnDimension() {
 		return ((data) == null) || ((data[0]) == null) ? 0 : data[0].length;
 	}
 
-
 	@java.lang.Override
-	public double[] operate(final double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public double[] operate(final double[] v) throws java.lang.IllegalArgumentException {
 		final int nRows = this.getRowDimension();
 		final int nCols = this.getColumnDimension();
 		if ((v.length) != nCols) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			"vector length mismatch: got {0} but expected {1}", 
-			v.length, nCols);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", v.length, nCols);
 		}
 		final double[] out = new double[nRows];
 		for (int row = 0; row < nRows; row++) {
@@ -382,19 +239,13 @@
 		return out;
 	}
 
-
 	@java.lang.Override
-	public double[] preMultiply(final double[] v) throws 
-	java.lang.IllegalArgumentException {
-
+	public double[] preMultiply(final double[] v) throws java.lang.IllegalArgumentException {
 		final int nRows = getRowDimension();
 		final int nCols = getColumnDimension();
 		if ((v.length) != nRows) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			"vector length mismatch: got {0} but expected {1}", 
-			v.length, nRows);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", v.length, nRows);
 		}
-
 		final double[] out = new double[nCols];
 		for (int col = 0; col < nCols; ++col) {
 			double sum = 0;
@@ -403,15 +254,11 @@
 			}
 			out[col] = sum;
 		}
-
 		return out;
-
 	}
 
-
 	@java.lang.Override
-	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor) throws 
-	org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor) throws org.apache.commons.math.linear.MatrixVisitorException {
 		final int rows = getRowDimension();
 		final int columns = getColumnDimension();
 		visitor.start(rows, columns, 0, (rows - 1), 0, (columns - 1));
@@ -424,10 +271,8 @@
 		return visitor.end();
 	}
 
-
 	@java.lang.Override
-	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor) throws 
-	org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor) throws org.apache.commons.math.linear.MatrixVisitorException {
 		final int rows = getRowDimension();
 		final int columns = getColumnDimension();
 		visitor.start(rows, columns, 0, (rows - 1), 0, (columns - 1));
@@ -440,15 +285,10 @@
 		return visitor.end();
 	}
 
-
 	@java.lang.Override
-	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor, final 
-	int startRow, final int endRow, final 
-	int startColumn, final int endColumn) throws 
-	org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
 		org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
-		visitor.start(getRowDimension(), getColumnDimension(), 
-		startRow, endRow, startColumn, endColumn);
+		visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn);
 		for (int i = startRow; i <= endRow; ++i) {
 			final double[] rowI = data[i];
 			for (int j = startColumn; j <= endColumn; ++j) {
@@ -458,15 +298,10 @@
 		return visitor.end();
 	}
 
-
 	@java.lang.Override
-	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor, final 
-	int startRow, final int endRow, final 
-	int startColumn, final int endColumn) throws 
-	org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInRowOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
 		org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
-		visitor.start(getRowDimension(), getColumnDimension(), 
-		startRow, endRow, startColumn, endColumn);
+		visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn);
 		for (int i = startRow; i <= endRow; ++i) {
 			final double[] rowI = data[i];
 			for (int j = startColumn; j <= endColumn; ++j) {
@@ -476,10 +311,8 @@
 		return visitor.end();
 	}
 
-
 	@java.lang.Override
-	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor) throws 
-	org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor) throws org.apache.commons.math.linear.MatrixVisitorException {
 		final int rows = getRowDimension();
 		final int columns = getColumnDimension();
 		visitor.start(rows, columns, 0, (rows - 1), 0, (columns - 1));
@@ -492,10 +325,8 @@
 		return visitor.end();
 	}
 
-
 	@java.lang.Override
-	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor) throws 
-	org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor) throws org.apache.commons.math.linear.MatrixVisitorException {
 		final int rows = getRowDimension();
 		final int columns = getColumnDimension();
 		visitor.start(rows, columns, 0, (rows - 1), 0, (columns - 1));
@@ -507,15 +338,10 @@
 		return visitor.end();
 	}
 
-
 	@java.lang.Override
-	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor, final 
-	int startRow, final int endRow, final 
-	int startColumn, final int endColumn) throws 
-	org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixChangingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
 		org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
-		visitor.start(getRowDimension(), getColumnDimension(), 
-		startRow, endRow, startColumn, endColumn);
+		visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn);
 		for (int j = startColumn; j <= endColumn; ++j) {
 			for (int i = startRow; i <= endRow; ++i) {
 				final double[] rowI = data[i];
@@ -525,15 +351,10 @@
 		return visitor.end();
 	}
 
-
 	@java.lang.Override
-	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor, final 
-	int startRow, final int endRow, final 
-	int startColumn, final int endColumn) throws 
-	org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
+	public double walkInColumnOrder(final org.apache.commons.math.linear.RealMatrixPreservingVisitor visitor, final int startRow, final int endRow, final int startColumn, final int endColumn) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException {
 		org.apache.commons.math.linear.MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
-		visitor.start(getRowDimension(), getColumnDimension(), 
-		startRow, endRow, startColumn, endColumn);
+		visitor.start(getRowDimension(), getColumnDimension(), startRow, endRow, startColumn, endColumn);
 		for (int j = startColumn; j <= endColumn; ++j) {
 			for (int i = startRow; i <= endRow; ++i) {
 				visitor.visit(i, j, data[i][j]);
@@ -542,33 +363,16 @@
 		return visitor.end();
 	}
 
-
-
-
-
-
 	private double[][] copyOut() {
 		final int nRows = this.getRowDimension();
 		final double[][] out = new double[nRows][this.getColumnDimension()];
-
 		for (int i = 0; i < nRows; i++) {
 			java.lang.System.arraycopy(data[i], 0, out[i], 0, data[i].length);
 		}
 		return out;
 	}
 
-
-
-
-
-
-
-
-
-
-
 	private void copyIn(final double[][] in) {
 		setSubMatrix(in, 0, 0);
 	}
-
 }
\ No newline at end of file

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:168) - Time Repair Loop (s): 91.093
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - generationsexecuted: 31
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:234) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:184) - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 62
 
time(sec)= 91
operation: RemoveOp
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1526
lineSuspiciousness= 0.25
lineSuspiciousness= 260
original statement= if ((dMin) == (dN2)) {


	tType = -5;
	double s = 0.25 * (dMin);


	final int np = nn - (2 * (pingPong));
	double b1 = work[(np - 2)];
	double b2 = work[(np - 6)];
	final double gam = dN2;
	if (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {
		return;
	}
	double a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));


	if ((end - start) > 2) {
		b2 = (work[(nn - 13)]) / (work[(nn - 15)]);
		a2 = a2 + b2;
		for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {
			if (b2 == 0.0) {
				break;
			}
			b1 = b2;
			if ((work[i4]) > (work[(i4 - 2)])) {
				return;
			}
			b2 = b2 * ((work[i4]) / (work[(i4 - 2)]));
			a2 = a2 + b2;
			if (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {
				break;
			}
		}
		a2 = cnst3 * a2;
	}

	if (a2 < cnst1) {
		tau = (gam * (1 - (java.lang.Math.sqrt(a2)))) / (1 + a2);
	}else {
		tau = s;
	}

}else {


	if ((tType) == (-6)) {
		g += 0.333 * (1 - (g));
	}else 		if ((tType) == (-18)) {
			g = 0.25 * 0.333;
		}else {
			g = 0.25;
		}
	tau = (g) * (dMin);
	tType = -6;

}
buggy kind= CtIfImpl|CtBlockImpl
fixed statement= 
generation= 31
ingredientScope= -
validation=|true|0|2101|[]|
diffpatch=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -973,56 +973,8 @@
 						}
 						tau = s;
 					}
-				}else
-					if ((dMin) == (dN2)) {
-						tType = -5;
-						double s = 0.25 * (dMin);
-						final int np = nn - (2 * (pingPong));
-						double b1 = work[(np - 2)];
-						double b2 = work[(np - 6)];
-						final double gam = dN2;
-						if (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {
-							return;
-						}
-						double a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));
-						if ((end - start) > 2) {
-							b2 = (work[(nn - 13)]) / (work[(nn - 15)]);
-							a2 = a2 + b2;
-							for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {
-								if (b2 == 0.0) {
-									break;
-								}
-								b1 = b2;
-								if ((work[i4]) > (work[(i4 - 2)])) {
-									return;
-								}
-								b2 = b2 * ((work[i4]) / (work[(i4 - 2)]));
-								a2 = a2 + b2;
-								if (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {
-									break;
-								}
-							}
-							a2 = cnst3 * a2;
-						}
-						if (a2 < cnst1) {
-							tau = (gam * (1 - (java.lang.Math.sqrt(a2)))) / (1 + a2);
-						}else {
-							tau = s;
-						}
-					}else {
-						if ((tType) == (-6)) {
-							g += 0.333 * (1 - (g));
-						}else
-							if ((tType) == (-18)) {
-								g = 0.25 * 0.333;
 							}else {
-								g = 0.25;
-							}
-
-						tau = (g) * (dMin);
-						tType = -6;
 					}
-
 				break;
 			case 1 :
 				if (((dMin1) == (dN1)) && ((dMin2) == (dN2))) {


diffpatchoriginal=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -1523,61 +1523,61 @@
 						tau = s;
 
 					}
-				}else 					if ((dMin) == (dN2)) {
+				}else {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 
-						tType = -5;
-						double s = 0.25 * (dMin);
 
 
-						final int np = nn - (2 * (pingPong));
-						double b1 = work[(np - 2)];
-						double b2 = work[(np - 6)];
-						final double gam = dN2;
-						if (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {
-							return;
-						}
-						double a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));
 
 
-						if ((end - start) > 2) {
-							b2 = (work[(nn - 13)]) / (work[(nn - 15)]);
-							a2 = a2 + b2;
-							for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {
-								if (b2 == 0.0) {
-									break;
-								}
-								b1 = b2;
-								if ((work[i4]) > (work[(i4 - 2)])) {
-									return;
-								}
-								b2 = b2 * ((work[i4]) / (work[(i4 - 2)]));
-								a2 = a2 + b2;
-								if (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {
-									break;
-								}
-							}
-							a2 = cnst3 * a2;
-						}
 
-						if (a2 < cnst1) {
-							tau = (gam * (1 - (java.lang.Math.sqrt(a2)))) / (1 + a2);
-						}else {
-							tau = s;
-						}
 
-					}else {
 
 
-						if ((tType) == (-6)) {
-							g += 0.333 * (1 - (g));
-						}else 							if ((tType) == (-18)) {
-								g = 0.25 * 0.333;
-							}else {
-								g = 0.25;
-							}
-						tau = (g) * (dMin);
-						tType = -6;
 
 					}
 				break;



Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-81
TOTAL_TIME=91.093
NR_GENERATIONS=31
NR_RIGHT_COMPILATIONS=24
NR_FAILLING_COMPILATIONS=7
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND

Patch stats:

Patch 1
VARIANT_ID=62
TIME=91
VALIDATION=|true|0|2101|[]|
GENERATION=31
FOLDER_SOLUTION_CODE=/tmp/jGenProg_Defects4J_Math_81/./output_astor/AstorMain-Math-81//bin//variant-62
--Patch Hunk #1
OPERATOR=RemoveOp

LOCATION=org.apache.commons.math.linear.EigenDecompositionImpl

PATH=/tmp/jGenProg_Defects4J_Math_81/output_astor/AstorMain-Math-81/src/default/org/apache/commons/math/linear/EigenDecompositionImpl.java

MODIFIED_FILE_PATH=/tmp/jGenProg_Defects4J_Math_81/./output_astor/AstorMain-Math-81//src//variant-62_f/org/apache/commons/math/linear/EigenDecompositionImpl.java

LINE=1526

SUSPICIOUNESS=0.25

MP_RANKING=260

ORIGINAL_CODE=if ((dMin) == (dN2)) {


	tType = -5;
	double s = 0.25 * (dMin);


	final int np = nn - (2 * (pingPong));
	double b1 = work[(np - 2)];
	double b2 = work[(np - 6)];
	final double gam = dN2;
	if (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {
		return;
	}
	double a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));


	if ((end - start) > 2) {
		b2 = (work[(nn - 13)]) / (work[(nn - 15)]);
		a2 = a2 + b2;
		for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {
			if (b2 == 0.0) {
				break;
			}
			b1 = b2;
			if ((work[i4]) > (work[(i4 - 2)])) {
				return;
			}
			b2 = b2 * ((work[i4]) / (work[(i4 - 2)]));
			a2 = a2 + b2;
			if (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {
				break;
			}
		}
		a2 = cnst3 * a2;
	}

	if (a2 < cnst1) {
		tau = (gam * (1 - (java.lang.Math.sqrt(a2)))) / (1 + a2);
	}else {
		tau = s;
	}

}else {


	if ((tType) == (-6)) {
		g += 0.333 * (1 - (g));
	}else 		if ((tType) == (-18)) {
			g = 0.25 * 0.333;
		}else {
			g = 0.25;
		}
	tau = (g) * (dMin);
	tType = -6;

}

BUGGY_CODE_TYPE=CtIfImpl|CtBlockImpl

PATCH_HUNK_CODE=null

PATCH_HUNK_TYPE=null

INGREDIENT_SCOPE=-

INGREDIENT_PARENT=null

PATCH_DIFF_ORIG=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -1523,61 +1523,61 @@
 						tau = s;
 
 					}
-				}else 					if ((dMin) == (dN2)) {
+				}else {
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 
-						tType = -5;
-						double s = 0.25 * (dMin);
 
 
-						final int np = nn - (2 * (pingPong));
-						double b1 = work[(np - 2)];
-						double b2 = work[(np - 6)];
-						final double gam = dN2;
-						if (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {
-							return;
-						}
-						double a2 = ((work[(np - 8)]) / b2) * (1 + ((work[(np - 4)]) / b1));
 
 
-						if ((end - start) > 2) {
-							b2 = (work[(nn - 13)]) / (work[(nn - 15)]);
-							a2 = a2 + b2;
-							for (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {
-								if (b2 == 0.0) {
-									break;
-								}
-								b1 = b2;
-								if ((work[i4]) > (work[(i4 - 2)])) {
-									return;
-								}
-								b2 = b2 * ((work[i4]) / (work[(i4 - 2)]));
-								a2 = a2 + b2;
-								if (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {
-									break;
-								}
-							}
-							a2 = cnst3 * a2;
-						}
 
-						if (a2 < cnst1) {
-							tau = (gam * (1 - (java.lang.Math.sqrt(a2)))) / (1 + a2);
-						}else {
-							tau = s;
-						}
 
-					}else {
 
 
-						if ((tType) == (-6)) {
-							g += 0.333 * (1 - (g));
-						}else 							if ((tType) == (-18)) {
-								g = 0.25 * 0.333;
-							}else {
-								g = 0.25;
-							}
-						tau = (g) * (dMin);
-						tType = -6;
 
 					}
 				break;



[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:103) - Storing ing JSON at /tmp/jGenProg_Defects4J_Math_81/./output_astor/AstorMain-Math-81//astor_output.json
[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:104) - astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":24,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Math-81","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":7,"NR_GENERATIONS":31,"TOTAL_TIME":91.093,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"62","VALIDATION":"|true|0|2101|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.linear.EigenDecompositionImpl","PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_81\\\/output_astor\\\/AstorMain-Math-81\\\/src\\\/default\\\/org\\\/apache\\\/commons\\\/math\\\/linear\\\/EigenDecompositionImpl.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"if ((dMin) == (dN2)) {\\n\\n\\n\\ttType = -5;\\n\\tdouble s = 0.25 * (dMin);\\n\\n\\n\\tfinal int np = nn - (2 * (pingPong));\\n\\tdouble b1 = work[(np - 2)];\\n\\tdouble b2 = work[(np - 6)];\\n\\tfinal double gam = dN2;\\n\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n\\t\\treturn;\\n\\t}\\n\\tdouble a2 = ((work[(np - 8)]) \\\/ b2) * (1 + ((work[(np - 4)]) \\\/ b1));\\n\\n\\n\\tif ((end - start) > 2) {\\n\\t\\tb2 = (work[(nn - 13)]) \\\/ (work[(nn - 15)]);\\n\\t\\ta2 = a2 + b2;\\n\\t\\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\\n\\t\\t\\tif (b2 == 0.0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tb1 = b2;\\n\\t\\t\\tif ((work[i4]) > (work[(i4 - 2)])) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tb2 = b2 * ((work[i4]) \\\/ (work[(i4 - 2)]));\\n\\t\\t\\ta2 = a2 + b2;\\n\\t\\t\\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ta2 = cnst3 * a2;\\n\\t}\\n\\n\\tif (a2 < cnst1) {\\n\\t\\ttau = (gam * (1 - (java.lang.Math.sqrt(a2)))) \\\/ (1 + a2);\\n\\t}else {\\n\\t\\ttau = s;\\n\\t}\\n\\n}else {\\n\\n\\n\\tif ((tType) == (-6)) {\\n\\t\\tg += 0.333 * (1 - (g));\\n\\t}else \\t\\tif ((tType) == (-18)) {\\n\\t\\t\\tg = 0.25 * 0.333;\\n\\t\\t}else {\\n\\t\\t\\tg = 0.25;\\n\\t\\t}\\n\\ttau = (g) * (dMin);\\n\\ttType = -6;\\n\\n}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_81\\\/.\\\/output_astor\\\/AstorMain-Math-81\\\/\\\/src\\\/\\\/variant-62_f\\\/org\\\/apache\\\/commons\\\/math\\\/linear\\\/EigenDecompositionImpl.java","LINE":"1526","SUSPICIOUNESS":"0.25","MP_RANKING":"260"}],"TIME":"91","GENERATION":"31","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/jGenProg_Defects4J_Math_81\\\/.\\\/output_astor\\\/AstorMain-Math-81\\\/\\\/bin\\\/\\\/variant-62","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- org\\\/apache\\\/commons\\\/math\\\/linear\\\/EigenDecompositionImpl.java\\n+++ org\\\/apache\\\/commons\\\/math\\\/linear\\\/EigenDecompositionImpl.java\\n@@ -1523,61 +1523,61 @@\\n \\t\\t\\t\\t\\t\\ttau = s;\\n \\n \\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif ((dMin) == (dN2)) {\\n+\\t\\t\\t\\t}else {\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n-\\t\\t\\t\\t\\t\\ttType = -5;\\n-\\t\\t\\t\\t\\t\\tdouble s = 0.25 * (dMin);\\n \\n \\n-\\t\\t\\t\\t\\t\\tfinal int np = nn - (2 * (pingPong));\\n-\\t\\t\\t\\t\\t\\tdouble b1 = work[(np - 2)];\\n-\\t\\t\\t\\t\\t\\tdouble b2 = work[(np - 6)];\\n-\\t\\t\\t\\t\\t\\tfinal double gam = dN2;\\n-\\t\\t\\t\\t\\t\\tif (((work[(np - 8)]) > b2) || ((work[(np - 4)]) > b1)) {\\n-\\t\\t\\t\\t\\t\\t\\treturn;\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\tdouble a2 = ((work[(np - 8)]) \\\/ b2) * (1 + ((work[(np - 4)]) \\\/ b1));\\n \\n \\n-\\t\\t\\t\\t\\t\\tif ((end - start) > 2) {\\n-\\t\\t\\t\\t\\t\\t\\tb2 = (work[(nn - 13)]) \\\/ (work[(nn - 15)]);\\n-\\t\\t\\t\\t\\t\\t\\ta2 = a2 + b2;\\n-\\t\\t\\t\\t\\t\\t\\tfor (int i4 = nn - 17; i4 >= (((4 * start) + 2) + (pingPong)); i4 -= 4) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tif (b2 == 0.0) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t\\tb1 = b2;\\n-\\t\\t\\t\\t\\t\\t\\t\\tif ((work[i4]) > (work[(i4 - 2)])) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t\\tb2 = b2 * ((work[i4]) \\\/ (work[(i4 - 2)]));\\n-\\t\\t\\t\\t\\t\\t\\t\\ta2 = a2 + b2;\\n-\\t\\t\\t\\t\\t\\t\\t\\tif (((100 * (java.lang.Math.max(b2, b1))) < a2) || (cnst1 < a2)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t\\ta2 = cnst3 * a2;\\n-\\t\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\t\\tif (a2 < cnst1) {\\n-\\t\\t\\t\\t\\t\\t\\ttau = (gam * (1 - (java.lang.Math.sqrt(a2)))) \\\/ (1 + a2);\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\ttau = s;\\n-\\t\\t\\t\\t\\t\\t}\\n \\n-\\t\\t\\t\\t\\t}else {\\n \\n \\n-\\t\\t\\t\\t\\t\\tif ((tType) == (-6)) {\\n-\\t\\t\\t\\t\\t\\t\\tg += 0.333 * (1 - (g));\\n-\\t\\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\t\\tif ((tType) == (-18)) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tg = 0.25 * 0.333;\\n-\\t\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\t\\tg = 0.25;\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\ttau = (g) * (dMin);\\n-\\t\\t\\t\\t\\t\\ttType = -6;\\n \\n \\t\\t\\t\\t\\t}\\n \\t\\t\\t\\tbreak;\\n\\n"}]}
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:200) - Time Total(s): 380.648
535.73user 5.64system 6:21.70elapsed 141%CPU (0avgtext+0avgdata 1810304maxresident)k
96520inputs+34408outputs (32major+1099864minor)pagefaults 0swaps


Node: petitprince-11.luxembourg.grid5000.fr



Date: Sat Dec  1 14:32:57 EST 2018

