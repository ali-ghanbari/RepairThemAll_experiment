{
  "repair_end": "2018-12-01 12:29:10.558754", 
  "repair_begin": "2018-12-01 11:57:40.506668", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1014/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:33.538486114 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1534,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1673/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:59.555649009 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1583,47 +1580,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            tType = -7;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Replace", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2012/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:03.560228688 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1622,7 +1618,7 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "InsertBefore", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Replace", 
          "seed": "b2=work[nn - 5] / work[nn - 7];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_934/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:18.186311110 -0500\n@@ -1476,8 +1476,9 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n-                        a2 = 0.0;\n+                        this.main = main.clone();\n+\t\t\t\t\t\tgam = dN;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1504,7 +1505,7 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n+                        b2 = work[nn - 5] / work[nn - 7];\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Replace", 
          "seed": "b1=b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_537/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:27.061428862 -0500\n@@ -1470,8 +1470,7 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n+                    b1 = b2;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n@@ -1539,26 +1538,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_589/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:21.841568992 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1617,8 +1614,6 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1662/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:56.811642532 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1534,32 +1534,22 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2148/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:47.096482648 -0500\n@@ -1096,7 +1096,17 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1477,7 +1487,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1527,7 +1536,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_196/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:43.448586010 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,7 +1535,8 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n+                tau = 0.0;\n+\t\t\t\t// approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n@@ -1583,47 +1580,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_658/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:11.945696094 -0500\n@@ -1541,7 +1541,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    this.realEigenvalues = realEigenvalues;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "b2=work[np - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2127/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:29.100438396 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1541,7 +1540,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    b2 = work[np - 2];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "if (cachedVt == null) {\n  cachedVt=getV().transpose();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_970/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:40.302365831 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1504,7 +1503,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1539,26 +1537,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1624,7 +1603,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            g = 0.25 * 0.333;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1250/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:51.002931596 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1535,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tType -= 11;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_253/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:28.716746888 -0500\n@@ -1501,9 +1501,8 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n+                        cachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1938/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:17.032117713 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1583,47 +1583,48 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            {\n+\t\t\t\ttType = -2;\n+\t\t\t\tif (dMin1 == dN1 && dMin2 == dN2) {\n+\t\t\t\t\ttType = -7;\n+\t\t\t\t\tdouble s = 0.333 * dMin1;\n+\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\tfinal double a2 = dMin1 / (1 + b2 * b2);\n+\t\t\t\t\tfinal double gap2 = 0.5 * dMin2 - a2;\n+\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t\ttType = -8;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = 0.25 * dMin1;\n+\t\t\t\t\tif (dMin1 == dN1) {\n+\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t}\n+\t\t\t\t\ttType = -9;\n+\t\t\t\t}\n+\t\t\t}\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_948/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:27.870335078 -0500\n@@ -1514,12 +1514,10 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    cachedD = null;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1667/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:57.967645260 -0500\n@@ -1477,7 +1477,11 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        if (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1525,14 +1529,15 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                tau = g * dMin;\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_630/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:45.973630324 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1506,7 +1505,8 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t\treturn;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "Replace", 
          "seed": "Arrays.sort(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_974/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:41.086367770 -0500\n@@ -1096,7 +1096,23 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (dMin < 0.0) {\n+\t\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1525,8 +1541,7 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n-                tType = -5;\n+                Arrays.sort(realEigenvalues);\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n@@ -1537,28 +1552,8 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n-\n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                dMin2 = 0;\n+\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_646/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:08.309686900 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  final double oldB1=b1;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b1=b1 * (work[i4] / work[i4 - 2]);\n  b2=b2 + b1;\n  if (100 * Math.max(b1,oldB1) < b2) {\n    break;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1184/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:32.474751706 -0500\n@@ -1477,11 +1477,22 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1514,7 +1525,7 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -5;\n \n                     // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_509/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:07.685378954 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "final double s=0.333 * dMin2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_595/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:23.393572943 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1527,7 +1527,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                final double s = 0.333 * dMin2;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1649/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:41.955607488 -0500\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_257/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:29.508749625 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1624,7 +1624,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            tType = -6;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "InsertBefore", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_402/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:51.569180788 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,7 +1596,8 @@\n                 }\n             } else {\n \n-                // case 9.\n+                tType = -7;\n+\t\t\t\t// case 9.\n                 tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "Delete", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "s=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_902/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:03.482274694 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1509,10 +1508,8 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1525,8 +1522,6 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n-                tType = -5;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n@@ -1539,27 +1534,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_218/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:01.112649863 -0500\n@@ -1476,7 +1476,6 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1498,8 +1497,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1516,10 +1513,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1534,9 +1528,6 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1567/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:35.295450765 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1477,8 +1476,9 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        g = 0.25 * 0.333;\n+                        tType = -1;\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "b1*=work[i4] / work[i4 - 2];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1522/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:10.651393071 -0500\n@@ -1506,7 +1506,8 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            b1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\treturn;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2041/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:29.144290484 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1583,47 +1579,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1551/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:30.675439938 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = 0.5 * dMin1;\n                     tau = s;\n \n                 }\n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                this.main = main.clone();\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "tType=-2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_417/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:55.593191359 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1624,7 +1620,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            tType = -2;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1060/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:21.318591611 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "Replace", 
          "seed": "final double a2=dMin2 / (1 + b2 * b2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_357/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:10.129071204 -0500\n@@ -1537,28 +1537,9 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                final double a2 = dMin2 / (1 + b2 * b2);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1355/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:06.143104304 -0500\n@@ -1527,7 +1527,8 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                g += 0.333 * (1 - g);\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "g+=0.333 * (1 - g);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1491/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:50.939347035 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,8 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                g += 0.333 * (1 - g);\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "InsertBefore", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "InsertBefore", 
          "seed": "realEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.333 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_59/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:30.995644000 -0500\n@@ -1476,7 +1476,8 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n+                        eigenvectors = null;\n+\t\t\t\t\t\tgam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0.333 * dMin1;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1619,10 +1616,12 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n+                realEigenvalues = new double[main.length];\n+\t\t\t\tif (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                dMin1 = dMin;\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1161/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:20.138723730 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1617,8 +1617,42 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\ttType = -10;\n+\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\ttType = -11;\n+\t\t\t\t}\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_791/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:28.614038972 -0500\n@@ -1539,26 +1539,20 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_317/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:29.716950884 -0500\n@@ -1477,7 +1477,11 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        if (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1624,7 +1628,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            g = 0.25 * 0.333;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1497/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:52.171349910 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "for (int i=0; i < squaredSecondary.length; ++i) {\n  final double s=secondary[i];\n  squaredSecondary[i]=s * s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_432/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:59.537201709 -0500\n@@ -1498,8 +1498,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1478, 
          "faulty": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}", 
          "type": "InsertBefore", 
          "seed": "if (work[nn - 9] > work[nn - 11]) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1400/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:46.875198200 -0500\n@@ -1475,7 +1475,10 @@\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n-                    if (dMin == dN) {\n+                    if (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n@@ -1510,9 +1513,7 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tau = 0;\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1539,26 +1540,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "Replace", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_972/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:40.694366801 -0500\n@@ -1514,12 +1514,8 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    cachedD = null;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1598/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:21.071558293 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1955/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:27.108141732 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1508,7 +1508,6 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_374/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:32.301130003 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1532,7 +1529,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_880/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:51.926246056 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1583,47 +1582,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            tType = -7;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_117/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:36.896331084 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eigenvectors = null;\n                     tau = s;\n \n                 }\n@@ -1537,7 +1534,8 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                dMin2 = 0;\n+\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_220/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:01.508651278 -0500\n@@ -1091,7 +1091,8 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    this.realEigenvalues = realEigenvalues;\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1629/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:36.715595137 -0500\n@@ -1470,14 +1470,15 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "findEigenVectors();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1762/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:14.839827151 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,27 +1535,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,7 +1592,14 @@\n                 }\n             } else {\n \n-                // case 9.\n+                if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n+\t\t\t\t// case 9.\n                 tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "realEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "for (int i=0; i < squaredSecondary.length; ++i) {\n  final double s=secondary[i];\n  squaredSecondary[i]=s * s;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_427/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:58.361198624 -0500\n@@ -1498,8 +1498,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1509,14 +1507,16 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        dN = 0;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1534,31 +1534,11 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "b1=b1 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1623/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:35.175591508 -0500\n@@ -1509,7 +1509,6 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1525,7 +1524,8 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                Arrays.sort(realEigenvalues);\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=0.25 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_409/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:53.141184918 -0500\n@@ -1505,7 +1505,8 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n+                        tau = 0.25 * dMin1;\n+\t\t\t\t\t\tif (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1180/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:31.286749008 -0500\n@@ -1091,7 +1091,10 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    if (start >= deflatedEnd) {\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t}\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1477,7 +1480,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1518,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1541,7 +1539,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    this.realEigenvalues = realEigenvalues;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "b2=work[np - 2];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1591/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:13.035539385 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_747/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:52.245948177 -0500\n@@ -1096,7 +1096,11 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (cachedD == null) {\n+\t\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1516,10 +1520,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_938/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:25.010328001 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        s = Math.min(s, a2 - (b1 + b2));\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1514,7 +1514,8 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -5;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "cachedV.setEntry(0,0,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "Delete", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1092/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:48.170651647 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,17 +1515,11 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n-                tType = -5;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "dN2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2162/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:29:08.376534901 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0.0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1534,9 +1531,7 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                dN2 = 0;\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1617/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:33.215586890 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1619,9 +1616,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                tau *= 0.25;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1601/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:21.879560195 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1535,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1583,47 +1562,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            tType = -7;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_183/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:33.648549946 -0500\n@@ -1505,9 +1505,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (flipIfWarranted(deflatedEnd,1)) {\n  dMin2=Math.min(dMin2,work[l - 1]);\n  work[l - 1]=Math.min(work[l - 1],Math.min(work[3 + pingPong],work[7 + pingPong]));\n  work[l - 2 * pingPong]=Math.min(work[l - 2 * pingPong],Math.min(work[6 + pingPong],work[6 + pingPong]));\n  qMax=Math.max(qMax,Math.max(work[3 + pingPong],work[7 + pingPong]));\n  dMin=-0.0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  final double oldB1=b1;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b1=b1 * (work[i4] / work[i4 - 2]);\n  b2=b2 + b1;\n  if (100 * Math.max(b1,oldB1) < b2) {\n    break;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_767/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:15.830007087 -0500\n@@ -1091,7 +1091,18 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    if (flipIfWarranted(deflatedEnd, 1)) {\n+\t\t\t\t\t\tdMin2 = Math.min(dMin2, work[l - 1]);\n+\t\t\t\t\t\twork[l - 1] = Math.min(work[l - 1], Math.min(\n+\t\t\t\t\t\t\t\twork[3 + pingPong], work[7 + pingPong]));\n+\t\t\t\t\t\twork[l - 2 * pingPong] = Math\n+\t\t\t\t\t\t\t\t.min(work[l - 2 * pingPong], Math.min(\n+\t\t\t\t\t\t\t\t\t\twork[6 + pingPong], work[6 + pingPong]));\n+\t\t\t\t\t\tqMax = Math.max(qMax, Math.max(work[3 + pingPong],\n+\t\t\t\t\t\t\t\twork[7 + pingPong]));\n+\t\t\t\t\t\tdMin = -0.0;\n+\t\t\t\t\t}\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1481,7 +1492,19 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1539,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,27 +1558,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1334/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:42.431049953 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1535,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_302/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:13.508897952 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2031/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:26.376283636 -0500\n@@ -1500,20 +1500,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n+                    if (a2 < cnst1) {\n+\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t}\n                     a2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n@@ -1539,27 +1528,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1739/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:54.883779852 -0500\n@@ -1090,26 +1090,33 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n                 } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n \n         }\n@@ -1516,10 +1523,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_844/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:30.338192503 -0500\n@@ -1091,7 +1091,8 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    cachedD = null;\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1477,7 +1478,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_539/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:27.449429860 -0500\n@@ -1509,7 +1509,6 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1163/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:20.546724653 -0500\n@@ -1476,8 +1476,8 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n-                        a2 = 0.0;\n+                        tau = 0.0;\n+\t\t\t\t\t\tgam = dN;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "InsertBefore", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_762/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:08.613989075 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,7 +1535,8 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n+                a2 = cnst3 * a2;\n+\t\t\t\t// approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_321/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:31.744957448 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_593/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:23.005571957 -0500\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1617,8 +1598,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tType -= 12;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_872/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:43.534225245 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1533,33 +1529,15 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1595,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                sigmaLow = 0;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_457/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:12.621235967 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1622,7 +1619,8 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                dMin1 = dMin;\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "InsertBefore", 
          "seed": "dMin2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_563/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:03.189521429 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1527,7 +1523,8 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                dMin2 = dMin;\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1537,7 +1534,8 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                dMin2 = 0;\n+\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "cachedV.setEntry(0,0,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1806/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:44.819898299 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_185/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:34.096551606 -0500\n@@ -1509,7 +1509,8 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1597,13 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_850/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:31.966196543 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1505,7 +1505,8 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n+                        tType -= 11;\n+\t\t\t\t\t\tif (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2061/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:47.156335004 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1541,7 +1541,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    this.realEigenvalues = realEigenvalues;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1*=work[i4] / work[i4 - 2];\n    b2+=b1;\n    if (100 * b1 < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1098, 
          "faulty": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1969/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:37.112165587 -0500\n@@ -1095,15 +1095,17 @@\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n+\t\t\t\t\t\teMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t\tif (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n                 } else {\n@@ -1477,11 +1479,26 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        if (dN > b1) {\n+\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t}\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        if (b2 != 0.0) {\n+\t\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4\n+\t\t\t\t\t\t\t\t\t* start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1539,27 +1556,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "a2=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1031/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:56.102535709 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1541,7 +1537,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    a2 = 0.0;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_213/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:53.868623851 -0500\n@@ -1532,34 +1532,16 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n-                final double gam = dN2;\n+                double b2 = b1;\n+                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1533, 
          "faulty": "final int np=nn - 2 * pingPong;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1781/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:25.999853624 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        s = Math.min(s, a2 - (b1 + b2));\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1529,7 +1525,8 @@\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n-                // compute contribution to norm squared from i > nn-2.\n+                dMin = 0.0;\n+\t\t\t\t// compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_298/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:12.336894091 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1157/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:19.138721465 -0500\n@@ -1481,7 +1481,8 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1556/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:32.215443547 -0500\n@@ -1516,17 +1516,12 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n-                tType = -5;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.333 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_951/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:28.666337047 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0.333 * dMin1;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Delete", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1*=work[i4] / work[i4 - 2];\n    b2+=b1;\n    if (100 * b1 < b2) {\n      break;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_921/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:14.650302355 -0500\n@@ -1481,7 +1481,6 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Delete", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_822/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:06.730133857 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1619,9 +1615,6 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "cachedV.setEntry(0,0,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Delete", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1412/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:56.507220493 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1622,7 +1617,6 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_485/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:43.169315517 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1531,7 +1527,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin = Math.min(dMin, dN);\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_897/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:56.258256794 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1510,16 +1510,10 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tau = 0;\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1460/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:34.759309327 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1532,7 +1529,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "Delete", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1653/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:43.111610214 -0500\n@@ -1516,17 +1516,11 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n-                tType = -5;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n@@ -1539,26 +1533,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.333 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1477/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:45.683334778 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1527,12 +1527,12 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0.333 * dMin1;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1519/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:09.851391201 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1510,9 +1509,7 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tType = -6;\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1534,9 +1531,6 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1084, 
          "faulty": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "Replace", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1366/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:09.239111418 -0500\n@@ -1081,35 +1081,8 @@\n                     // the shift was good\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if ((dMin < 0.0) &&\n-                           (dMin1 > 0.0) &&\n-                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n-                           (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n-                    updateSigma(tau);\n-                    return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n-                } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+                } else\n+\t\t\t\t\ttau = g * dMin;\n             }\n \n         }\n@@ -1516,10 +1489,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1539,26 +1509,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1372/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:10.399114085 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1531,7 +1528,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin2 = dMin;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "throw new MatrixIndexException(\"empty selected row index array\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Delete", 
          "seed": "s=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1911/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:52.144058418 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1477,11 +1476,10 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1501,14 +1499,17 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n+                        cachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t\tif(b2 == 0.0) {\n                             break;\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1377/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:11.559116752 -0500\n@@ -1498,8 +1498,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1516,10 +1514,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1533,7 +1527,8 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                Arrays.sort(realEigenvalues);\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "if (a2 > (b1 + b2)) {\n  s=Math.min(s,a2 - (b1 + b2));\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "throw new SingularMatrixException();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2118/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:26.732432568 -0500\n@@ -1478,7 +1478,10 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        if (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1510,16 +1513,10 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "Replace", 
          "seed": "dN2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1135/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:12.986707549 -0500\n@@ -1096,8 +1096,7 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+                        dN2 = 0;\n                         tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_162/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:21.800505705 -0500\n@@ -1501,7 +1501,8 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n+                        eigenvectors = null;\n+\t\t\t\t\t\tif(b2 == 0.0) {\n                             break;\n                         }\n                         b1 = b2;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2038/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:28.304288405 -0500\n@@ -1516,16 +1516,13 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                Arrays.sort(realEigenvalues);\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "Replace", 
          "seed": "double a2=work[nn - 7] + work[nn - 5];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_964/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:32.690347004 -0500\n@@ -1537,28 +1537,7 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n-\n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                double a2 = work[nn - 7] + work[nn - 5];\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_435/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:00.325203776 -0500\n@@ -1508,7 +1508,6 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2155/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:49.384488270 -0500\n@@ -1477,7 +1477,11 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        if (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Delete", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1698/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:23.739706143 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1535,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1622,7 +1599,6 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1033/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:56.490536565 -0500\n@@ -1096,7 +1096,17 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1477,7 +1487,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_929/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:17.018308219 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tType=-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_855/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:33.142199463 -0500\n@@ -1514,12 +1514,9 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -9;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1531,7 +1528,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin2 = dMin;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "Replace", 
          "seed": "double a2=work[nn - 7] + work[nn - 5];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1330/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:41.251047254 -0500\n@@ -1478,7 +1478,8 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1537,7 +1534,7 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                double a2 = work[nn - 7] + work[nn - 5];\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1130/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:11.798704864 -0500\n@@ -1098,7 +1098,8 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\ttType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1532,34 +1529,13 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1953/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:26.712140788 -0500\n@@ -1534,32 +1534,25 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_940/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:25.410328991 -0500\n@@ -1510,9 +1510,7 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tType = -6;\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1619,7 +1596,8 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n+                tau = -dMin;\n+\t\t\t\tif (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n                 tType = -9;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "s=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_584/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:20.613565866 -0500\n@@ -1477,11 +1477,11 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_606/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:32.993597363 -0500\n@@ -1509,17 +1509,15 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_333/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:47.057006595 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1527,12 +1523,12 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0.0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_201/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:50.288610908 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1622,7 +1618,7 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                tType = -7;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "g=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_160/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:21.404504214 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    g = 0.25;\n                     tau = s;\n \n                 }\n@@ -1532,7 +1529,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_833/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:21.526170623 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1619,9 +1616,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                tau *= 0.25;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_670/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:21.169719398 -0500\n@@ -1477,7 +1477,9 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        if (dN > b1) {\n+\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t}\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,27 +1541,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_460/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:13.413238037 -0500\n@@ -1510,16 +1510,10 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,27 +1533,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "tType-=11;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1932/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:09.816100516 -0500\n@@ -1505,7 +1505,8 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n+                        tType -= 11;\n+\t\t\t\t\t\tif (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "InsertBefore", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1766/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:16.047830016 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1539,7 +1536,8 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n+                a2 = cnst3 * a2;\n+\t\t\t\t// approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Replace", 
          "seed": "cachedV=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_626/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:45.169628285 -0500\n@@ -1470,8 +1470,7 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n+                    cachedV = null;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1357/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:06.531105195 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1624,7 +1624,10 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            {\n+\t\t\t\ttType = -6;\n+\t\t\t\tbreak;\n+\t\t\t}\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_703/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:05.049829901 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1607/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:23.815564752 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1541,7 +1537,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    this.realEigenvalues = realEigenvalues;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "b1*=work[i4] / work[i4 - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1691/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:21.759701462 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1506,7 +1505,8 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            b1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\treturn;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_475/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:34.729293595 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1541,7 +1537,6 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Replace", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "a2=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_43/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:00:12.547497062 -0500\n@@ -1500,7 +1500,8 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+                    a2 = 0.0;\n+\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n                         }\n@@ -1509,7 +1510,7 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        tType = -1;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_750/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:53.789952037 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,16 +1516,14 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                dMin2 = dMin;\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1478, 
          "faulty": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}", 
          "type": "InsertBefore", 
          "seed": "if (work[nn - 9] > work[nn - 11]) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1571/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:37.247455341 -0500\n@@ -1475,10 +1475,14 @@\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n-                    if (dMin == dN) {\n+                    if (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        tType = -5;\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Delete", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1096/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:48.978653461 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1622,7 +1621,6 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.333 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2071/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:01.604370660 -0500\n@@ -1505,9 +1505,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1516,10 +1513,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1527,16 +1521,27 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0.333 * dMin1;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "Replace", 
          "seed": "final double a2=dMin1 / (1 + b2 * b2);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_981/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:43.430373566 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eigenvectors = null;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1537,28 +1538,9 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                final double a2 = dMin1 / (1 + b2 * b2);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tType -= 11;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1624,7 +1606,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            dMin1 = -work[4 * start + pingPong];\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "Delete", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1089/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:47.354649816 -0500\n@@ -1476,7 +1476,6 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,27 +1535,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1171/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:22.498729074 -0500\n@@ -1098,7 +1098,7 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        dMin = Math.min(dMin, dN1);\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1500,20 +1500,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n+                    if (a2 < cnst1) {\n+\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t}\n                     a2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_241/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:19.812715943 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_793/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:29.038040030 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "tType=-2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_95/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:23.836266417 -0500\n@@ -1091,7 +1091,8 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    tau = 0.0;\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1541,7 +1542,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    this.realEigenvalues = realEigenvalues;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n@@ -1583,47 +1584,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            tType = -2;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1275/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:03.814961203 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    a2 = a2 + b2;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1282/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:05.458965007 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0.0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_743/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:51.465946227 -0500\n@@ -1091,7 +1091,10 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    if (start >= deflatedEnd) {\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t}\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1510,16 +1513,17 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        if (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_694/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:50.865794242 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,27 +1535,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_835/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:21.930171626 -0500\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1513,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Replace", 
          "seed": "cachedV=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_481/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:42.365313430 -0500\n@@ -1470,14 +1470,12 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n+                    cachedV = null;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1501,7 +1499,9 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n+                        cachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t\tif(b2 == 0.0) {\n                             break;\n                         }\n                         b1 = b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_377/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:33.085132075 -0500\n@@ -1091,7 +1091,10 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    if (start >= deflatedEnd) {\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t}\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1532,33 +1535,16 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1485, 
          "faulty": "np=nn - 9;", 
          "type": "InsertBefore", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1361/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:07.687107852 -0500\n@@ -1482,7 +1482,10 @@\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n+                        if (b2 == 0.0) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnp = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n                         b2 = work[np - 2];\n@@ -1539,27 +1542,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_209/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:52.696619620 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1527,7 +1523,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0.0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1928/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:02.984084238 -0500\n@@ -1470,7 +1470,8 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    dN = 0;\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1539,26 +1540,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "Replace", 
          "seed": "double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_745/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:51.853947196 -0500\n@@ -1478,9 +1478,9 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n+                        if (dN > b1) {\n+\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t}\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1531,7 +1531,7 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1749/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:59.191790058 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1624,7 +1620,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            dMin = Math.min(dMin, dN);\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "upperSpectra=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1224/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:36.790898832 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1619,9 +1598,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                upperSpectra = Double.NEGATIVE_INFINITY;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_869/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:42.766223340 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1001/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:23.614464440 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1510,16 +1509,10 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tau = 0;\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "work[4 * end - pingPong - 1]=eMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1458/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:34.363308405 -0500\n@@ -1478,7 +1478,8 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        work[4 * end - pingPong - 1] = eMin;\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "InsertBefore", 
          "seed": "dN2=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_309/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:21.548924316 -0500\n@@ -1096,9 +1096,26 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (dMin < 0.0) {\n+\t\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        dN2 = 0;\n+\t\t\t\t\t\ttType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1539,26 +1556,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1338/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:43.631052698 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_323/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:32.136958715 -0500\n@@ -1514,7 +1514,11 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    if (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n \n                     // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n@@ -1539,27 +1543,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_106/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:27.200285309 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1532,7 +1528,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "b1=b1 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2145/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:46.320480741 -0500\n@@ -1509,17 +1509,13 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1534,31 +1530,9 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_342/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:54.737030141 -0500\n@@ -1532,34 +1532,13 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Replace", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1515/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:03.011375216 -0500\n@@ -1509,17 +1509,13 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        dMin = 0.0;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1963/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:35.520161790 -0500\n@@ -1478,7 +1478,8 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1375/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:11.175115869 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1532,7 +1532,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "cachedV.setEntry(0,0,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_580/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:19.421562830 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1533, 
          "faulty": "final int np=nn - 2 * pingPong;", 
          "type": "InsertBefore", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_760/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:08.229988117 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1529,7 +1526,8 @@\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n-                // compute contribution to norm squared from i > nn-2.\n+                tType = -7;\n+\t\t\t\t// compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_204/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:51.092613820 -0500\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1513,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_698/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:57.725811495 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1505,7 +1504,8 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n+                        tType -= 11;\n+\t\t\t\t\t\tif (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1243/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:43.030913207 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1942/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:18.268120658 -0500\n@@ -1096,7 +1096,12 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1516,10 +1521,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_313/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:28.504946956 -0500\n@@ -1498,8 +1498,7 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n+                    tType = -3;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "upperSpectra=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1965/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:35.924162754 -0500\n@@ -1504,7 +1504,8 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n+                        squaredSecondary = new double[secondary.length];\n+\t\t\t\t\t\tb1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    upperSpectra = Double.NEGATIVE_INFINITY;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tau=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1485, 
          "faulty": "np=nn - 9;", 
          "type": "InsertBefore", 
          "seed": "b2+=b1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1580/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:45.247474104 -0500\n@@ -1482,7 +1482,8 @@\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n+                        b2 += b1;\n+\t\t\t\t\t\tnp = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n                         b2 = work[np - 2];\n@@ -1514,12 +1515,10 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tau = 0;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "a2=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1849/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:03.251942092 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1541,7 +1538,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    a2 = 0.0;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_394/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:49.625175676 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "b1*=work[i4] / work[i4 - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1285/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:06.278966904 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1506,7 +1506,8 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            b1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\treturn;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n@@ -1532,7 +1533,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n@@ -1583,47 +1584,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "b1=b1 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "b2=work[nn - 9] / work[nn - 11];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_473/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:34.341292588 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        b2 = work[nn - 9] / work[nn - 11];\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1509,7 +1509,6 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1305/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:17.434992746 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,26 +1540,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_860/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:40.034216563 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    this.splitTolerance = splitTolerance;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_769/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:16.222008066 -0500\n@@ -1090,26 +1090,15 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n-                } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+                } else if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n \n         }\n@@ -1477,7 +1466,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1858/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:06.019948672 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,26 +1540,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_719/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:22.113872727 -0500\n@@ -1096,7 +1096,23 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (dMin < 0.0) {\n+\t\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1539,27 +1555,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b1*=work[i4] / work[i4 - 2];\n  b2+=b1;\n  if (100 * b1 < b2) {\n    break;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1810/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:45.623900209 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_451/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:11.029231805 -0500\n@@ -1478,7 +1478,8 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -3;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_31/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:50.759496468 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1617,8 +1614,42 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\ttType = -10;\n+\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\ttType = -11;\n+\t\t\t\t}\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1085/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:40.502634453 -0500\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1513,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2023/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:18.396264104 -0500\n@@ -1505,9 +1505,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1516,7 +1513,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Delete", 
          "seed": "tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1575/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:44.067471336 -0500\n@@ -1477,11 +1477,10 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        s = Math.min(s, a2 - (b1 + b2));\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_621/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:43.953625198 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1535,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Delete", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1665/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:57.583644353 -0500\n@@ -1501,7 +1501,8 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n+                        tType = -1;\n+\t\t\t\t\t\tif(b2 == 0.0) {\n                             break;\n                         }\n                         b1 = b2;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1622,7 +1619,6 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1485, 
          "faulty": "np=nn - 9;", 
          "type": "InsertBefore", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1880/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:37.080022554 -0500\n@@ -1482,7 +1482,10 @@\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n+                        if (b2 == 0.0) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnp = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n                         b2 = work[np - 2];\n@@ -1516,10 +1519,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "tau=0.5 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_93/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:23.348263358 -0500\n@@ -1470,17 +1470,12 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1504,7 +1499,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1541,7 +1535,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    tau = 0.5 * dMin1;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "updateSigma(tau);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1213/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:21.606863921 -0500\n@@ -1500,20 +1500,6 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n@@ -1539,27 +1525,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "InsertBefore", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "Replace", 
          "seed": "double b1=work[nn - 5] / work[nn - 7];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1779/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:25.611852702 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1531,7 +1532,7 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                double b1 = work[nn - 5] / work[nn - 7];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n@@ -1539,7 +1540,8 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n+                a2 = cnst3 * a2;\n+\t\t\t\t// approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "tau=s;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Delete", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_455/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:12.233234952 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1481,7 +1481,8 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        tau = s;\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1508,7 +1509,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1518,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1622,7 +1620,6 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_77/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:06.252139930 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "b1=b1 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1893/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:46.236044350 -0500\n@@ -1509,17 +1509,13 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1443/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:23.567283289 -0500\n@@ -1534,31 +1534,9 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1808/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:45.215899240 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1583,47 +1580,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2087/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:06.256382131 -0500\n@@ -1533,33 +1533,15 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1240/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:42.258911428 -0500\n@@ -1470,7 +1470,8 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    dN = 0;\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1516,7 +1517,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1541,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1598,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tType = -7;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_663/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:19.185714388 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "b2=work[np - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1876/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:35.880019698 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1541,7 +1541,6 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_723/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:22.897874693 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1534,9 +1529,6 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "b2=work[np - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "final double s=0.333 * dMin2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_882/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:52.314247018 -0500\n@@ -1527,7 +1527,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                final double s = 0.333 * dMin2;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1541,7 +1541,6 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2053/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:38.708314133 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "throw new MatrixIndexException(\"empty selected row index array\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_685/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:48.489788263 -0500\n@@ -1090,26 +1090,15 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n-                } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+                } else if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n \n         }\n@@ -1516,10 +1505,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Delete", 
          "seed": "if (work[nn - 9] > work[nn - 11]) {\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_623/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:44.349626203 -0500\n@@ -1481,7 +1481,14 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        if (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1509,17 +1516,14 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        dN = 0;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1622,7 +1626,6 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1904/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:50.156053684 -0500\n@@ -1096,7 +1096,23 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (dMin < 0.0) {\n+\t\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1516,10 +1532,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1551,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "InsertBefore", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1814/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:46.807903021 -0500\n@@ -1537,28 +1537,10 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n-\n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "InsertBefore", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "final double s=0.333 * dMin2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "this.imagEigenvalues=imagEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_188/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:40.648575754 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1527,19 +1526,20 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                final double s = 0.333 * dMin2;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n+                a2 = cnst3 * a2;\n+\t\t\t\t// approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1934/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:10.208101450 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1533,7 +1529,10 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "tType=-1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1687/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:14.871685181 -0500\n@@ -1533,33 +1533,13 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                tType = -1;\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "Delete", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_255/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:29.112748257 -0500\n@@ -1096,8 +1096,6 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n@@ -1516,10 +1514,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1717/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:29.679720191 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1505,9 +1504,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1516,7 +1512,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1533,7 +1530,10 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "for (int i=0; i < squaredSecondary.length; ++i) {\n  final double s=secondary[i];\n  squaredSecondary[i]=s * s;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_574/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:17.765558611 -0500\n@@ -1498,8 +1498,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1516,10 +1514,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "b2=b2 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1145/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:15.446713111 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1583,47 +1582,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1236/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:41.090908735 -0500\n@@ -1516,16 +1516,14 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                dMin2 = dMin;\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_984/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:49.870389487 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1583,47 +1580,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            tType = -7;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1478, 
          "faulty": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}", 
          "type": "Delete", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "tau=s;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_497/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:58.317354753 -0500\n@@ -1470,56 +1470,17 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n-                    if (dMin == dN) {\n-                        gam = dN;\n-                        a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n-                        b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n-                    } else {\n-                        np = nn - 2 * pingPong;\n-                        b2 = work[np - 2];\n-                        gam = dN1;\n-                        if (work[np - 4]  >  work[np - 2]) {\n-                            return;\n-                        }\n-                        a2 = work[np - 4] / work[np - 2];\n-                        if (work[nn - 9]  >  work[nn - 11]) {\n-                            return;\n-                        }\n-                        b2 = work[nn - 9] / work[nn - 11];\n-                        np = nn - 13;\n-                    }\n-\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1539,27 +1500,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2121/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:27.496434449 -0500\n@@ -1508,7 +1508,6 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "tau=0.25 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_756/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:07.065985210 -0500\n@@ -1481,7 +1481,8 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        tau = 0.25 * dMin1;\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_421/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:56.805194541 -0500\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tType=-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_227/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:03.112657004 -0500\n@@ -1514,12 +1514,9 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -9;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_222/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:01.916652736 -0500\n@@ -1505,9 +1505,7 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n+                        tType -= 11;\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1583,47 +1560,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1042/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:04.926555215 -0500\n@@ -1509,17 +1509,15 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1453/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:32.383303796 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1505,7 +1505,8 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n+                        tType -= 11;\n+\t\t\t\t\t\tif (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "if (100 * b1 < b2) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Delete", 
          "seed": "tType=-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "work[4 * end - pingPong - 1]=eMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_179/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:32.444545483 -0500\n@@ -1470,15 +1470,14 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        work[4 * end - pingPong - 1] = eMin;\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1541,7 +1540,9 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    if (100 * b1 < b2) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "cachedV.setEntry(0,0,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1744/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:56.063782647 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1532,7 +1528,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "if (cachedV == null) {\n  if (eigenvectors == null) {\n    findEigenVectors();\n  }\n  final int m=eigenvectors.length;\n  cachedV=MatrixUtils.createRealMatrix(m,m);\n  for (int k=0; k < m; ++k) {\n    cachedV.setColumnVector(k,eigenvectors[k]);\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1370/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:10.015113202 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1531,7 +1527,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                sigmaLow = 0;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n@@ -1539,7 +1536,8 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n+                tau = 0.0;\n+\t\t\t\t// approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n@@ -1617,8 +1615,6 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_960/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:31.470343986 -0500\n@@ -1500,7 +1500,10 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+                    if (a2 < cnst1) {\n+\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n                         }\n@@ -1539,27 +1542,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1710/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:27.635715357 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1143/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:15.058712233 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "Delete", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_683/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:48.097787276 -0500\n@@ -1476,7 +1476,6 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1165/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:20.938725540 -0500\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (start >= deflatedEnd) {\n  return deflatedEnd;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1098, 
          "faulty": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_521/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:11.369388458 -0500\n@@ -1091,19 +1091,26 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    if (start >= deflatedEnd) {\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t}\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n+\t\t\t\t\t\tif (dMin1 == dN1) {\n+\t\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n                 } else {\n@@ -1472,7 +1479,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1516,10 +1523,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "b1=b1 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Delete", 
          "seed": "cachedV=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_438/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:06.769220659 -0500\n@@ -1470,8 +1470,6 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n@@ -1509,7 +1507,6 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_483/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:42.777314499 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1596,42 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\ttType = -10;\n+\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\ttType = -11;\n+\t\t\t\t}\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_532/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:20.233411297 -0500\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        a2 = cnst3 * a2;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1631/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:37.099596042 -0500\n@@ -1531,7 +1531,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin2 = dMin;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1421/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:59.247226841 -0500\n@@ -1090,26 +1090,15 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n-                } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+                } else if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n \n         }\n@@ -1516,10 +1505,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Replace", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2094/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:08.192386904 -0500\n@@ -1470,14 +1470,14 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n+                    if (dMin1 == dN1) {\n+\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t}\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_919/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:14.262301394 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1596,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tType -= 12;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "tau=0.5 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Replace", 
          "seed": "a2=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "cachedVt=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_133/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:54.136399494 -0500\n@@ -1504,7 +1504,7 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n+                        a2 = 0.0;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    cachedVt = null;\n                     tau = s;\n \n                 }\n@@ -1541,7 +1538,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    tau = 0.5 * dMin1;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1578/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:44.859473193 -0500\n@@ -1470,7 +1470,8 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1509,17 +1510,15 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1619,9 +1618,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                tau *= 0.25;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_511/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:08.141380131 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1532,33 +1529,14 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1300/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:16.234989964 -0500\n@@ -1508,7 +1508,6 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1541,7 +1537,6 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_372/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:31.913128977 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1622,7 +1619,216 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                switch (deflated) {\n+\t\t\t\tcase 0:\n+\t\t\t\t\tif (dMin == dN || dMin == dN1) {\n+\t\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2)\n+\t\t\t\t\t\t\t\t\t\t\t* b2 : (b1 + b2));\n+\t\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1,\n+\t\t\t\t\t\t\t\t\t\t0.5 * dMin);\n+\t\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\t\tint np;\n+\t\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\t\ttType = -5;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble a2 = (work[np - 8] / b2)\n+\t\t\t\t\t\t\t\t* (1 + work[np - 4] / b1);\n+\t\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\t\ttType = -6;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 1:\n+\t\t\t\t\tif (dMin1 == dN1 && dMin2 == dN2) {\n+\t\t\t\t\t\ttType = -7;\n+\t\t\t\t\t\tdouble s = 0.333 * dMin1;\n+\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4\n+\t\t\t\t\t\t\t\t\t* start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\t\tfinal double a2 = dMin1 / (1 + b2 * b2);\n+\t\t\t\t\t\tfinal double gap2 = 0.5 * dMin2 - a2;\n+\t\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t\t\ttType = -8;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = 0.25 * dMin1;\n+\t\t\t\t\t\tif (dMin1 == dN1) {\n+\t\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttType = -9;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 2:\n+\t\t\t\t\tif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\t\ttType = -10;\n+\t\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4\n+\t\t\t\t\t\t\t\t\t* start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\t\ttType = -11;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\ttType = -12;\n+\t\t\t\t}\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "Delete", 
          "seed": "work=new double[6 * main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "dMin2=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1471/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:44.131331160 -0500\n@@ -1476,7 +1476,6 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1624,7 +1620,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            dMin2 = dMin;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_430/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:59.149200690 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "if (cachedVt == null) {\n  cachedVt=getV().transpose();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_858/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:39.642215591 -0500\n@@ -1498,8 +1498,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1509,17 +1507,14 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        dN = 0;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1542/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:28.319434419 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1596,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tType = -7;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "cachedVt=getV().transpose();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_865/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:41.602220454 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1501,10 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1512,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_347/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:07.637064570 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1622,7 +1601,53 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                if (dMin == dN2) {\n+\t\t\t\t\ttType = -5;\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\ttType = -6;\n+\t\t\t\t}\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "sigmaLow=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_445/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:09.429227619 -0500\n@@ -1531,7 +1531,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                sigmaLow = 0;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "InsertBefore", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2017/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:10.772245903 -0500\n@@ -1090,26 +1090,25 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n                 } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t\tif (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n \n         }\n@@ -1481,7 +1480,14 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        if (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1522,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1671/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:59.167648092 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        s = Math.min(s, a2 - (b1 + b2));\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1098, 
          "faulty": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1427/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:12.599257807 -0500\n@@ -1095,15 +1095,19 @@\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n+\t\t\t\t\t\tif (dMin1 == dN1) {\n+\t\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n                 } else {\n@@ -1516,10 +1520,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1230/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:38.374902479 -0500\n@@ -1472,12 +1472,11 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0.0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1660/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:56.383641522 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1617,8 +1614,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "realEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1700/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:24.131707070 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1531,34 +1528,13 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = Math.max(s, 0.333 * dMin);\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "b2=work[nn - 9] / work[nn - 11];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2091/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:07.412384981 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        b2 = work[nn - 9] / work[nn - 11];\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1159/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:19.534722361 -0500\n@@ -1470,7 +1470,8 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    dN = 0;\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1298/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:15.830989028 -0500\n@@ -1096,7 +1096,8 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        imagEigenvalues = new double[main.length];\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1619,9 +1617,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                tau *= 0.25;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2083/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:05.472380199 -0500\n@@ -1472,15 +1472,14 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n+                        if (dN > b1) {\n+\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t}\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1539,26 +1538,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "a2=work[np - 4] / work[np - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2132/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:36.300456108 -0500\n@@ -1498,8 +1498,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1516,10 +1514,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1682/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:07.591667984 -0500\n@@ -1510,9 +1510,6 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1534,32 +1531,22 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "Replace", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1346/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:02.991097065 -0500\n@@ -1090,26 +1090,15 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n-                } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+                } else if (tType < -22) {\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\ttType -= 11;\n+\t\t\t\t} else {\n+\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\ttType -= 12;\n+\t\t\t\t}\n             }\n \n         }\n@@ -1477,7 +1466,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1505,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_20/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:46.811496361 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_840/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:29.178189623 -0500\n@@ -1505,9 +1505,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Delete", 
          "seed": "work[4 * end - pingPong - 1]=eMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_789/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:28.198037936 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eigenvectors = null;\n                     tau = s;\n \n                 }\n@@ -1619,9 +1616,6 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_404/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:51.961181818 -0500\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "dMin1=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1833/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:58.063929762 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1622,7 +1622,8 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                dMin1 = dMin;\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tType=-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1562/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:33.759447165 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1619,9 +1616,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                tType = -9;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2096/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:08.576387851 -0500\n@@ -1477,11 +1477,18 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        if (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1523,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "cachedV.setEntry(0,0,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_414/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:54.765189184 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1527,7 +1526,127 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                if (dMin == dN || dMin == dN1) {\n+\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2\n+\t\t\t\t\t\t\t\t\t\t: (b1 + b2));\n+\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n+\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\tint np;\n+\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\ttType = -5;\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\ttType = -6;\n+\t\t\t\t}\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_287/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:03.020863233 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_177/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:32.052544029 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,8 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1533/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:25.487427786 -0500\n@@ -1527,7 +1527,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "b2=b2 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_785/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:27.042035054 -0500\n@@ -1470,14 +1470,15 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1504,7 +1505,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1533, 
          "faulty": "final int np=nn - 2 * pingPong;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_730/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:30.905894765 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1529,7 +1526,8 @@\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n-                // compute contribution to norm squared from i > nn-2.\n+                dMin = 0.0;\n+\t\t\t\t// compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1504/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:54.183354604 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1541,7 +1538,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    this.realEigenvalues = realEigenvalues;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1694/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:22.555703345 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1513,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1826/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:50.419911601 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,8 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                cachedD = null;\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1944/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:18.720121736 -0500\n@@ -1510,16 +1510,10 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1533,33 +1527,13 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                tType = -1;\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1094/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:48.558652518 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1323/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:39.167042491 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1619,9 +1598,6 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_101/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:25.624276626 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_599/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:30.221590315 -0500\n@@ -1509,7 +1509,8 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "throw new MatrixIndexException(\"empty selected row index array\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1613/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:26.251570487 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1477,7 +1476,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_491/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:56.721350625 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1532,7 +1529,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "dMin1=-work[4 * start + pingPong];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_904/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:03.882275686 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1534,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tType -= 11;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1624,7 +1600,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            dMin1 = -work[4 * start + pingPong];\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_260/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:30.308752387 -0500\n@@ -1098,7 +1098,7 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        dMin = Math.min(dMin, dN1);\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1510,9 +1510,6 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1485, 
          "faulty": "np=nn - 9;", 
          "type": "InsertBefore", 
          "seed": "b2+=b1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2003/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:00.844222206 -0500\n@@ -1482,7 +1482,8 @@\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n+                        b2 += b1;\n+\t\t\t\t\t\tnp = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n                         b2 = work[np - 2];\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "g=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_715/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:20.933869768 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1583,47 +1562,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1785/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:27.251856592 -0500\n@@ -1510,9 +1510,6 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1847/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:02.867941180 -0500\n@@ -1481,7 +1481,14 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        if (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1501,9 +1508,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1514,12 +1518,14 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n-\n-                    // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t\ta2 = cnst3 * a2;\n+\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1531,7 +1537,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                sigmaLow = 0;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Replace", 
          "seed": "cachedVt=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_245/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:20.632718805 -0500\n@@ -1098,7 +1098,7 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        cachedVt = null;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_680/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:47.325785333 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1583,47 +1579,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "dMin2=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1064/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:22.486594213 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1624,7 +1621,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            dMin2 = dMin;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1259/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:53.342936999 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                this.main = main.clone();\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_284/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:02.236860622 -0500\n@@ -1501,7 +1501,8 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n+                        eigenvectors = null;\n+\t\t\t\t\t\tif(b2 == 0.0) {\n                             break;\n                         }\n                         b1 = b2;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = 0.5 * dMin1;\n                     tau = s;\n \n                 }\n@@ -1617,8 +1615,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tType -= 12;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_514/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:08.961382247 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -8;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_911/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:05.842280542 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1622,7 +1619,8 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                g += 0.333 * (1 - g);\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1128/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:11.402703969 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1534,9 +1530,20 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_602/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:31.069592472 -0500\n@@ -1472,12 +1472,12 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1977/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:39.836172084 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        s = Math.min(s, a2 - (b1 + b2));\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1626/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:35.943593317 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1742/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:55.659781690 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,11 +1596,43 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\ttType = -10;\n+\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\ttType = -11;\n+\t\t\t\t}\n+                tau *= 0.25;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_471/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:33.953291579 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1549/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:30.283439019 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1535,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2051/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:38.320313173 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1509,7 +1509,8 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1531,9 +1532,11 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin = Math.min(dMin, dN);\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n@@ -1622,7 +1625,216 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                switch (deflated) {\n+\t\t\t\tcase 0:\n+\t\t\t\t\tif (dMin == dN || dMin == dN1) {\n+\t\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2)\n+\t\t\t\t\t\t\t\t\t\t\t* b2 : (b1 + b2));\n+\t\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1,\n+\t\t\t\t\t\t\t\t\t\t0.5 * dMin);\n+\t\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\t\tint np;\n+\t\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\t\ttType = -5;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble a2 = (work[np - 8] / b2)\n+\t\t\t\t\t\t\t\t* (1 + work[np - 4] / b1);\n+\t\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\t\ttType = -6;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 1:\n+\t\t\t\t\tif (dMin1 == dN1 && dMin2 == dN2) {\n+\t\t\t\t\t\ttType = -7;\n+\t\t\t\t\t\tdouble s = 0.333 * dMin1;\n+\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4\n+\t\t\t\t\t\t\t\t\t* start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\t\tfinal double a2 = dMin1 / (1 + b2 * b2);\n+\t\t\t\t\t\tfinal double gap2 = 0.5 * dMin2 - a2;\n+\t\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t\t\ttType = -8;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = 0.25 * dMin1;\n+\t\t\t\t\t\tif (dMin1 == dN1) {\n+\t\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttType = -9;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 2:\n+\t\t\t\t\tif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\t\ttType = -10;\n+\t\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4\n+\t\t\t\t\t\t\t\t\t* start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\t\ttType = -11;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\ttType = -12;\n+\t\t\t\t}\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_469/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:33.565290570 -0500\n@@ -1509,17 +1509,15 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        dN = 0;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1539,26 +1537,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "this.eigenvectors=eigenvectors;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1433/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:14.335261838 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1513,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    this.eigenvectors = eigenvectors;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "b1*=work[i4] / work[i4 - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_506/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:06.869376848 -0500\n@@ -1506,7 +1506,8 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            b1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\treturn;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1533, 
          "faulty": "final int np=nn - 2 * pingPong;", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_335/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:47.489007970 -0500\n@@ -1529,7 +1529,8 @@\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n-                // compute contribution to norm squared from i > nn-2.\n+                dMin = 0.0;\n+\t\t\t\t// compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1290/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:07.450969617 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1583,47 +1578,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            eigenvectors = null;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "updateSigma(tau);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1009/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:31.994482736 -0500\n@@ -1478,9 +1478,6 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1516,10 +1513,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1532,7 +1525,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "Delete", 
          "seed": "work[4 * end - pingPong - 1]=eMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_82/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:07.944154673 -0500\n@@ -1477,7 +1477,11 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        if (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1525,14 +1529,12 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n-                tType = -5;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1382/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:24.415146346 -0500\n@@ -1470,7 +1470,8 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1500,26 +1501,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1392/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:38.843179635 -0500\n@@ -1096,7 +1096,17 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1516,10 +1526,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "Replace", 
          "seed": "g=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_775/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:23.898027214 -0500\n@@ -1096,8 +1096,7 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+                        g = 0.0;\n                         tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n@@ -1470,7 +1469,10 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1539,26 +1541,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "gam=dN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "b2=work[np - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1023/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:41.942504536 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,27 +1535,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2067/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:00.444367799 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1890/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:45.472042531 -0500\n@@ -1506,7 +1506,7 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            tau = -dMin;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1801/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:43.267894614 -0500\n@@ -1500,26 +1500,8 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Delete", 
          "seed": "tau=s;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1046/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:05.706556943 -0500\n@@ -1481,7 +1481,6 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eigenvectors=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_811/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:57.490110879 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eigenvectors = null;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1820/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:48.479906992 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1532,7 +1531,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1506/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:54.567355501 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1207/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:13.930846312 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1624,7 +1620,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            tType = -6;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "InsertBefore", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2028/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:25.604281725 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1537,28 +1533,10 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n-\n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1084, 
          "faulty": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "InsertBefore", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1264/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:54.506939687 -0500\n@@ -1081,35 +1081,34 @@\n                     // the shift was good\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if ((dMin < 0.0) &&\n-                           (dMin1 > 0.0) &&\n-                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n-                           (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n-                    updateSigma(tau);\n-                    return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n                 } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\tif ((dMin < 0.0)\n+\t\t\t\t\t\t\t&& (dMin1 > 0.0)\n+\t\t\t\t\t\t\t&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE\n+\t\t\t\t\t\t\t\t\t* (sigma + dN1))\n+\t\t\t\t\t\t\t&& (Math.abs(dN) < TOLERANCE * sigma)) {\n+\t\t\t\t\t\twork[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+\t\t\t\t\t\tdMin = 0.0;\n+\t\t\t\t\t\tupdateSigma(tau);\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t} else if (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n \n         }\n@@ -1539,26 +1538,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "InsertBefore", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Delete", 
          "seed": "if (eigenvectors == null) {\n  findEigenVectors();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_166/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:22.708509121 -0500\n@@ -1470,8 +1470,6 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n@@ -1532,34 +1530,14 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                tType -= 11;\n+\t\t\t\tdouble b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1624,7 +1602,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            g = 0.25 * 0.333;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "Delete", 
          "seed": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1818/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:48.091906071 -0500\n@@ -1477,7 +1477,11 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        if (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1508,7 +1512,6 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1519,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eigenvectors = null;\n                     tau = s;\n \n                 }\n@@ -1622,7 +1622,8 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_612/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:35.005602476 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1622,7 +1602,8 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                g += 0.333 * (1 - g);\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "InsertBefore", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Replace", 
          "seed": "dN=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_265/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:31.952758055 -0500\n@@ -1470,8 +1470,7 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n+                    dN = 0;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,7 +1595,8 @@\n                 }\n             } else {\n \n-                // case 9.\n+                tType = -7;\n+\t\t\t\t// case 9.\n                 tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "s=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1117/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:07.766695759 -0500\n@@ -1477,11 +1477,12 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1462/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:35.147310230 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1527,7 +1523,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1478, 
          "faulty": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=0.0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1611/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:25.859569565 -0500\n@@ -1475,7 +1475,8 @@\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n-                    if (dMin == dN) {\n+                    dMin = 0.0;\n+\t\t\t\t\tif (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "realEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "Replace", 
          "seed": "double a2=work[nn - 7] + work[nn - 5];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_370/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:31.485127846 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1534,10 +1531,7 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                double a2 = work[nn - 7] + work[nn - 5];\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1647/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:41.571606583 -0500\n@@ -1090,26 +1090,33 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n                 } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n \n         }\n@@ -1477,7 +1484,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_628/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:45.561629279 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1534,7 +1530,8 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+                dN = 0;\n+\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_352/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:08.945068053 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_380/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:33.869134146 -0500\n@@ -1525,7 +1525,8 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                Arrays.sort(realEigenvalues);\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1715/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:29.287719264 -0500\n@@ -1508,7 +1508,6 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_618/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:42.301621006 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1583,47 +1580,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1510/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:55.723358198 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,7 +1515,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_781/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:25.898032201 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "cachedV=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_804/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:38.186062826 -0500\n@@ -1470,7 +1470,8 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    cachedV = null;\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "tau=s;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1495/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:51.787349013 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0.0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1505,10 +1505,12 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n+                        tType -= 11;\n+\t\t\t\t\t\tif (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        tau = s;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1518,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1537,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_578/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:18.929561577 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1531,7 +1528,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin = Math.min(dMin, dN);\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1485, 
          "faulty": "np=nn - 9;", 
          "type": "InsertBefore", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1280/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:05.070964109 -0500\n@@ -1482,7 +1482,10 @@\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n+                        if (b2 == 0.0) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnp = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n                         b2 = work[np - 2];\n@@ -1510,16 +1513,11 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tType = -6;\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_733/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:37.369910955 -0500\n@@ -1510,16 +1510,11 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tau = 0;\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1539,26 +1534,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "InsertBefore", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1916/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:59.400075700 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1617,9 +1617,46 @@\n                 }\n             } else {\n \n-                // case 9.\n+                if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\ttType = -10;\n+\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\ttType = -11;\n+\t\t\t\t}\n+\t\t\t\t// case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n+                tType = -9;\n+\t\t\t\tif (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n                 tType = -9;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2000/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:00.076220373 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0.0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "work[4 * end - pingPong - 1]=eMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1559/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:32.987445355 -0500\n@@ -1478,7 +1478,8 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        work[4 * end - pingPong - 1] = eMin;\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Replace", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1884/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:38.236025306 -0500\n@@ -1498,8 +1498,7 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n+                    tType = 0;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1516,16 +1515,16 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                if (cachedD == null) {\n+\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t}\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "if (work[nn - 9] > work[nn - 11]) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_367/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:30.705125784 -0500\n@@ -1472,7 +1472,10 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    if (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1516,10 +1519,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_145/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:15.616482325 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,26 +1536,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_656/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:11.561695123 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1619,9 +1595,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                dMin = Math.min(dMin, dN);\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_889/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:54.246251806 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1525,14 +1525,134 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                if (dMin == dN || dMin == dN1) {\n+\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2\n+\t\t\t\t\t\t\t\t\t\t: (b1 + b2));\n+\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n+\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\tint np;\n+\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\ttType = -5;\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\ttType = -6;\n+\t\t\t\t}\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1396/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:40.011182333 -0500\n@@ -1090,26 +1090,25 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n                 } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+\t\t\t\t\tthis.splitTolerance = splitTolerance;\n+\t\t\t\t\tif (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n \n         }\n@@ -1476,7 +1475,8 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n+                        tau = 0.0;\n+\t\t\t\t\t\tgam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "tType=-7;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1154/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:18.354719690 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1515,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1583,47 +1578,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            tType = -7;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Replace", 
          "seed": "cachedVt=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1792/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:29.191861198 -0500\n@@ -1098,7 +1098,7 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        cachedVt = null;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "realEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_741/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:51.053945196 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1534,31 +1530,11 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_649/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:09.149689025 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1619,9 +1616,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                tau *= 0.25;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1678/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:00.759651851 -0500\n@@ -1470,7 +1470,8 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1516,10 +1517,9 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    if (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1319/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:26.619013850 -0500\n@@ -1500,20 +1500,6 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n@@ -1534,31 +1520,9 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1302/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:16.658990947 -0500\n@@ -1481,7 +1481,8 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "Replace", 
          "seed": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1226/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:37.202899780 -0500\n@@ -1096,8 +1096,22 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+                        if (dMin < 0.0) {\n+\t\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t\t}\n                         tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n@@ -1539,27 +1553,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1475, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Delete", 
          "seed": "s=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1642/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:40.339603678 -0500\n@@ -1472,7 +1472,7 @@\n                 } else {\n                     // case 4.\n                     tType = -4;\n-                    double s = 0.25 * dMin;\n+                    double s = 0;\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n@@ -1481,7 +1481,6 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1658/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:55.995640605 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1531,7 +1528,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                sigmaLow = 0;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1044/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:05.318556083 -0500\n@@ -1539,26 +1539,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1835/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:58.487930770 -0500\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Replace", 
          "seed": "a2=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "Replace", 
          "seed": "dMin1=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2114/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:19.860415651 -0500\n@@ -1525,8 +1525,7 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n-                tType = -5;\n+                dMin1 = 0;\n                 double s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n@@ -1541,7 +1540,7 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n+                    a2 = 0.0;\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_721/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:22.509873721 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        s = Math.min(s, a2 - (b1 + b2));\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "this.main=main.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_944/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:26.566331852 -0500\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                this.main = main.clone();\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1261/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:53.730937895 -0500\n@@ -1478,9 +1478,9 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n+                        if (dN > b1) {\n+\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t}\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1840/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:59.671933584 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tType -= 11;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "this.eigenvectors=eigenvectors;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1547/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:29.887438092 -0500\n@@ -1508,18 +1508,13 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        this.eigenvectors = eigenvectors;\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1368/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:09.627112310 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1186/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:32.874752614 -0500\n@@ -1504,7 +1504,6 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1516,16 +1515,14 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                tau = g * dMin;\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_398/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:50.785178726 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1534,9 +1530,6 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1093, 
          "faulty": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_908/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:05.066278619 -0500\n@@ -1090,26 +1090,33 @@\n                     dMin = 0.0;\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n                 } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\ttau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n \n         }\n@@ -1477,7 +1484,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1514,7 +1521,8 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -5;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "cachedVt=null;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_447/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:09.817228635 -0500\n@@ -1478,9 +1478,7 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n+                        cachedVt = null;\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_534/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:20.621412296 -0500\n@@ -1516,16 +1516,13 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                Arrays.sort(realEigenvalues);\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tau=0.25 * dMin1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  final double oldB1=b1;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b1=b1 * (work[i4] / work[i4 - 2]);\n  b2=b2 + b1;\n  if (100 * Math.max(b1,oldB1) < b2) {\n    break;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1149/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:16.630715789 -0500\n@@ -1481,7 +1481,19 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1514,7 +1526,8 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tau = 0.25 * dMin1;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n@@ -1539,27 +1552,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "tau*=0.25;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1795/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:35.631876484 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1619,9 +1598,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                tau *= 0.25;\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "InsertBefore", 
          "seed": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_847/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:31.190194618 -0500\n@@ -1098,7 +1098,7 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        dMin = Math.min(dMin, dN1);\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1470,7 +1470,10 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n+                    if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\t// case 4.\n                     tType = -4;\n                     double s = 0.25 * dMin;\n                     double gam;\n@@ -1539,26 +1542,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "Delete", 
          "seed": "g=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1736/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:48.415764532 -0500\n@@ -1096,8 +1096,6 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n@@ -1516,10 +1514,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    this.splitTolerance = splitTolerance;\n                     tau = s;\n \n                 }\n@@ -1539,26 +1534,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1414/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:56.899221401 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1617,8 +1617,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2110/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:13.048398871 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                     tau = s;\n \n                 }\n@@ -1617,8 +1614,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                Arrays.sort(realEigenvalues);\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "Replace", 
          "seed": "double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1789/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:28.415859357 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1531,7 +1527,7 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n@@ -1539,27 +1535,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "cachedVt=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "updateSigma(tau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_175/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:31.620542424 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1500,26 +1499,8 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_23/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:47.747496386 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_493/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:06:57.121351660 -0500\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1513,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "InsertBefore", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1070/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:30.158611321 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1622,7 +1622,216 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n+                switch (deflated) {\n+\t\t\t\tcase 0:\n+\t\t\t\t\tif (dMin == dN || dMin == dN1) {\n+\t\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2)\n+\t\t\t\t\t\t\t\t\t\t\t* b2 : (b1 + b2));\n+\t\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1,\n+\t\t\t\t\t\t\t\t\t\t0.5 * dMin);\n+\t\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\t\tint np;\n+\t\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\t\ttType = -5;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble a2 = (work[np - 8] / b2)\n+\t\t\t\t\t\t\t\t* (1 + work[np - 4] / b1);\n+\t\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\t\ttType = -6;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 1:\n+\t\t\t\t\tif (dMin1 == dN1 && dMin2 == dN2) {\n+\t\t\t\t\t\ttType = -7;\n+\t\t\t\t\t\tdouble s = 0.333 * dMin1;\n+\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4\n+\t\t\t\t\t\t\t\t\t* start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\t\tfinal double a2 = dMin1 / (1 + b2 * b2);\n+\t\t\t\t\t\tfinal double gap2 = 0.5 * dMin2 - a2;\n+\t\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t\t\ttType = -8;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = 0.25 * dMin1;\n+\t\t\t\t\t\tif (dMin1 == dN1) {\n+\t\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttType = -9;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 2:\n+\t\t\t\t\tif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\t\ttType = -10;\n+\t\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4\n+\t\t\t\t\t\t\t\t\t* start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\t\ttType = -11;\n+\t\t\t\t\t}\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\ttType = -12;\n+\t\t\t\t}\n+\t\t\t\ttType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "tau=s;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "tType=-8;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_932/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:17.798310150 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1508,7 +1507,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        tau = s;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1617,8 +1613,6 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (dN > b1) {\n  s=dN - b1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tType-=12;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_129/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:52.808394287 -0500\n@@ -1505,9 +1505,9 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n+                        if (dN > b1) {\n+\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t}\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,27 +1535,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1592,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tType -= 12;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_616/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:41.897619980 -0500\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        tau = 0.0;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (cachedVt == null) {\n  cachedVt=getV().transpose();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1636/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:38.723599870 -0500\n@@ -1500,26 +1500,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1723/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:32.607727117 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1583,47 +1582,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Replace", 
          "seed": "tau=s;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2157/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:49.772489223 -0500\n@@ -1500,26 +1500,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n+                    tau = s;\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1485, 
          "faulty": "np=nn - 9;", 
          "type": "InsertBefore", 
          "seed": "b2+=b1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1774/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:24.035848963 -0500\n@@ -1482,7 +1482,8 @@\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n-                        np = nn - 9;\n+                        b2 += b1;\n+\t\t\t\t\t\tnp = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n                         b2 = work[np - 2];\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2103/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:10.540392691 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    a2 = a2 + b2;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "Replace", 
          "seed": "a2=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "if (a2 > (b1 + b2)) {\n  s=Math.min(s,a2 - (b1 + b2));\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_164/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:22.248507391 -0500\n@@ -1478,9 +1478,6 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1504,7 +1501,7 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n+                        a2 = 0.0;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = 0.0;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "tType=-3;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1478, 
          "faulty": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1308/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:18.250994638 -0500\n@@ -1475,7 +1475,8 @@\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n-                    if (dMin == dN) {\n+                    tau = g * dMin;\n+\t\t\t\t\tif (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n@@ -1533,33 +1534,13 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                tType = -3;\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "InsertBefore", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1342/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:50.511068446 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,7 +1515,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1617,7 +1617,43 @@\n                 }\n             } else {\n \n-                // case 9.\n+                if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n+\t\t\t\t\ttType = -10;\n+\t\t\t\t\tfinal double s = 0.333 * dMin2;\n+\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble b1 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\tdouble b2 = b1;\n+\t\t\t\t\tif (b2 != 0.0) {\n+\t\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start\n+\t\t\t\t\t\t\t\t+ 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tb2 = Math.sqrt(cnst3 * b2);\n+\t\t\t\t\tfinal double a2 = dMin2 / (1 + b2 * b2);\n+\t\t\t\t\tfinal double gap2 = work[nn - 7] + work[nn - 9]\n+\t\t\t\t\t\t\t- Math.sqrt(work[nn - 11])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]) - a2;\n+\t\t\t\t\tif (gap2 > 0.0 && gap2 > b2 * a2) {\n+\t\t\t\t\t\ttau = Math.max(s, a2\n+\t\t\t\t\t\t\t\t* (1 - cnst2 * a2 * (b2 / gap2) * b2));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = Math.max(s, a2 * (1 - cnst2 * b2));\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\ttau = 0.25 * dMin2;\n+\t\t\t\t\ttType = -11;\n+\t\t\t\t}\n+\t\t\t\t// case 9.\n                 tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "s=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2101/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:10.124391665 -0500\n@@ -1477,11 +1477,11 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "dN2=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1098, 
          "faulty": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1456/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:33.971307493 -0500\n@@ -1095,15 +1095,17 @@\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n+\t\t\t\t\t\tdMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tif (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n                 } else {\n@@ -1516,10 +1518,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1534,9 +1532,6 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "throw new MatrixIndexException(\"empty selected row index array\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "pingPong=1 - pingPong;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1754/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:12.059820559 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1500,26 +1499,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1408/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:55.311217723 -0500\n@@ -1476,7 +1476,6 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1951/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:26.324139863 -0500\n@@ -1098,7 +1098,8 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\ttType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1908/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:51.328056475 -0500\n@@ -1510,16 +1510,11 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tType = -6;\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "Replace", 
          "seed": "double a2=work[nn - 7] + work[nn - 5];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1310/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:18.638995538 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1537,7 +1534,7 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                double a2 = work[nn - 7] + work[nn - 5];\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1084, 
          "faulty": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "Replace", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "tType=-2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_400/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:51.181179767 -0500\n@@ -1081,35 +1081,8 @@\n                     // the shift was good\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if ((dMin < 0.0) &&\n-                           (dMin1 > 0.0) &&\n-                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n-                           (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n-                    updateSigma(tau);\n-                    return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n-                } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+                } else\n+\t\t\t\t\ttau = g * dMin;\n             }\n \n         }\n@@ -1539,27 +1512,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1624,7 +1576,10 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            {\n+\t\t\t\ttType = -2;\n+\t\t\t\tbreak;\n+\t\t\t}\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Replace", 
          "seed": "tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_986/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:50.254390437 -0500\n@@ -1481,7 +1481,7 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1729/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:23:40.247745196 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1617,8 +1613,6 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Replace", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1317/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:26.231012966 -0500\n@@ -1477,11 +1477,16 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        if (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_500/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:04.765371416 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1514,7 +1513,7 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -5;\n \n                     // rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n@@ -1539,27 +1538,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "Replace", 
          "seed": "dMin2=dMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_736/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:10:38.149912908 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1624,7 +1620,7 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            dMin2 = dMin;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_337/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:47.885009232 -0500\n@@ -1501,9 +1501,7 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n+                        tType = -1;\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,10 +1514,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1531,7 +1526,8 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n@@ -1539,26 +1535,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1627, 
          "faulty": "break;", 
          "type": "InsertBefore", 
          "seed": "tType=-2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1429/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:13.107258987 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1624,7 +1603,10 @@\n                 }\n                 tType = -9;\n             }\n-            break;\n+            {\n+\t\t\t\ttType = -2;\n+\t\t\t\tbreak;\n+\t\t\t}\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1474/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:44.907332969 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1532,7 +1529,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "Delete", 
          "seed": "imagEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1502, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_956/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:30.262340997 -0500\n@@ -1096,8 +1096,6 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n@@ -1498,8 +1496,6 @@\n                         np = nn - 13;\n                     }\n \n-                    // approximate contribution to norm squared from i < nn-1.\n-                    a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if(b2 == 0.0) {\n                             break;\n@@ -1527,7 +1523,8 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                g += 0.333 * (1 - g);\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,27 +1536,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "InsertBefore", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "Delete", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1*=work[i4] / work[i4 - 2];\n    b2+=b1;\n    if (100 * b1 < b2) {\n      break;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1133/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:12.594706663 -0500\n@@ -1481,7 +1481,6 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1533,32 +1532,15 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                Arrays.sort(realEigenvalues);\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n-\n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1946/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:19.108122661 -0500\n@@ -1505,9 +1505,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1516,10 +1513,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,27 +1532,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1540, 
          "faulty": "double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);", 
          "type": "Replace", 
          "seed": "double a2=work[nn - 7] + work[nn - 5];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1140/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:14.202710297 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1537,7 +1537,7 @@\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n-                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+                double a2 = work[nn - 7] + work[nn - 5];\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_546/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:35.453450419 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1534,32 +1535,25 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "Replace", 
          "seed": "tau=s;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1111/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:05.726691155 -0500\n@@ -1508,7 +1508,7 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        tau = s;\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2075/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:02.768373531 -0500\n@@ -1481,7 +1481,14 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        if (tType == -6) {\n+\t\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1523,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1532,7 +1536,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = b1;\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1922/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:01.444080569 -0500\n@@ -1501,9 +1501,7 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n+                        tType = -4;\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,16 +1514,14 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                dMin2 = dMin;\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_355/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:09.737070161 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1510,9 +1509,6 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_895/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:55.842255762 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        s = Math.min(s, a2 - (b1 + b2));\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1478, 
          "faulty": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}", 
          "type": "InsertBefore", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1040/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:04.494554259 -0500\n@@ -1475,7 +1475,8 @@\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n-                    if (dMin == dN) {\n+                    eigenvectors = null;\n+\t\t\t\t\tif (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_98/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:01:24.776271537 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,7 +1535,8 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n+                tau = 0.0;\n+\t\t\t\t// approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_691/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:50.041792169 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,26 +1540,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1619,7 +1603,8 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n+                dMin = Math.min(dMin, dN);\n+\t\t\t\tif (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n                 tType = -9;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "work=new double[6 * main.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2085/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:05.864381165 -0500\n@@ -1500,20 +1500,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n+                    if (a2 < cnst1) {\n+\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t}\n                     a2 = cnst3 * a2;\n \n                     // rayleigh quotient residual bound.\n@@ -1539,27 +1528,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1167/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:21.326726420 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1532,7 +1528,7 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "Replace", 
          "seed": "b1*=work[i4] / work[i4 - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1294/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:14.362985626 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1506,7 +1506,7 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            b1 *= work[i4] / work[i4 - 2];\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "computeGershgorinCircles();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2035/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:27.524286476 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1617,8 +1614,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                computeGershgorinCircles();\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "realEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1998/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:59.676219419 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1531,34 +1528,16 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin2 = dMin;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                realEigenvalues = new double[main.length];\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "transformer=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Delete", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "s=Math.min(s,a2 - (b1 + b2));"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1871/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:22.995989041 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1505,9 +1504,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1619,9 +1615,6 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "b2=work[nn - 9] / work[nn - 11];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2135/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:37.064457987 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        b2 = work[nn - 9] / work[nn - 11];\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1503, 
          "faulty": "for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n  if (b2 == 0.0) {\n    break;\n  }\n  b1=b2;\n  if (work[i4] > work[i4 - 2]) {\n    return;\n  }\n  b2=b2 * (work[i4] / work[i4 - 2]);\n  a2=a2 + b2;\n  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n    break;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1017/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:34.310487803 -0500\n@@ -1500,26 +1500,9 @@\n \n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n-                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n-                    }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_586/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:21.021566905 -0500\n@@ -1478,9 +1478,7 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n+                        dMin = Math.min(dMin, dN1);\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1536, 
          "faulty": "final double gam=dN2;", 
          "type": "InsertBefore", 
          "seed": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_558/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:55.973502989 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1533,7 +1533,10 @@\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n-                final double gam = dN2;\n+                if (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfinal double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1387/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:19:25.975149942 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1541,7 +1538,6 @@\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "Replace", 
          "seed": "double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1644/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:40.755604659 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1532,33 +1529,16 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_243/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:20.236717423 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "b1=b1 * (work[i4] / work[i4 - 2]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_551/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:36.657453509 -0500\n@@ -1509,17 +1509,12 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_295/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:11.556891519 -0500\n@@ -1091,7 +1091,8 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    cachedD = null;\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1516,7 +1517,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    eMin = work[4 * start + pingPong + 4];\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,27 +1541,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "if (tType == -6) {\n  g+=0.333 * (1 - g);\n}\n else if (tType == -18) {\n  g=0.25 * 0.333;\n}\n else {\n  g=0.25;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_814/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:58.262112800 -0500\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n@@ -1617,8 +1596,13 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                if (tType == -6) {\n+\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t} else {\n+\t\t\t\t\tg = 0.25;\n+\t\t\t\t}\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "tau=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_688/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:49.273790236 -0500\n@@ -1510,16 +1510,14 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+                        tau = 0;\n+\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1838/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:59.287932672 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n@@ -1539,26 +1536,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "Replace", 
          "seed": "double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1448/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:25.139286943 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1531,7 +1528,7 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "b2=work[np - 2];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1326/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:39.951044282 -0500\n@@ -1509,10 +1509,6 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1539,27 +1535,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1052/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:13.330573851 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0.333 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_548/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:35.885451528 -0500\n@@ -1527,7 +1527,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0.333 * dMin1;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "g=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1315/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:25.843012081 -0500\n@@ -1096,7 +1096,8 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        g = 0.0;\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_852/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:32.366197536 -0500\n@@ -1091,7 +1091,8 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    cachedD = null;\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1527,11 +1525,132 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                if (dMin == dN || dMin == dN1) {\n+\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2\n+\t\t\t\t\t\t\t\t\t\t: (b1 + b2));\n+\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n+\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\tint np;\n+\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\ttType = -5;\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\ttType = -6;\n+\t\t\t\t}\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                dMin = Math.min(dMin, dN);\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1493/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:51.399348108 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1525,7 +1525,8 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "this.secondary=secondary.clone();"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_529/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:13.793394708 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        this.secondary = secondary.clone();\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "this.eigenvectors=eigenvectors;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_570/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:16.589555614 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1510,16 +1510,10 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        this.eigenvectors = eigenvectors;\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "InsertBefore", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_224/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:02.324654192 -0500\n@@ -1478,7 +1478,8 @@\n                     if (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n+                        this.realEigenvalues = realEigenvalues;\n+\t\t\t\t\t\tif (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n                         b2 = work[nn - 5] / work[nn - 7];\n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                this.main = main.clone();\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1617,8 +1599,6 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1084, 
          "faulty": "if ((dMin < 0.0) && (dMin1 > 0.0) && (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1))&& (Math.abs(dN) < TOLERANCE * sigma)) {\n  work[4 * deflatedEnd - 3 - pingPong]=0.0;\n  dMin=0.0;\n  updateSigma(tau);\n  return deflatedEnd;\n}\n else if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}", 
          "type": "InsertBefore", 
          "seed": "if (cachedD == null) {\n  cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "cachedV.setEntry(0,0,1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_668/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:20.773718397 -0500\n@@ -1081,35 +1081,37 @@\n                     // the shift was good\n                     updateSigma(tau);\n                     return deflatedEnd;\n-                } else if ((dMin < 0.0) &&\n-                           (dMin1 > 0.0) &&\n-                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n-                           (Math.abs(dN) < TOLERANCE * sigma)) {\n-                   // convergence hidden by negative DN.\n-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n-                    dMin = 0.0;\n-                    updateSigma(tau);\n-                    return deflatedEnd;\n-                } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n-                    if (tType < -22) {\n-                        // failed twice. Play it safe.\n-                        tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n-                    } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n-                } else if (Double.isNaN(dMin)) {\n-                    tau = 0.0;\n                 } else {\n-                    // possible underflow. Play it safe.\n-                    loop = false;\n-                }\n+\t\t\t\t\tif (cachedD == null) {\n+\t\t\t\t\t\tcachedD = MatrixUtils\n+\t\t\t\t\t\t\t\t.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t\t}\n+\t\t\t\t\tif ((dMin < 0.0)\n+\t\t\t\t\t\t\t&& (dMin1 > 0.0)\n+\t\t\t\t\t\t\t&& (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE\n+\t\t\t\t\t\t\t\t\t* (sigma + dN1))\n+\t\t\t\t\t\t\t&& (Math.abs(dN) < TOLERANCE * sigma)) {\n+\t\t\t\t\t\twork[4 * deflatedEnd - 3 - pingPong] = 0.0;\n+\t\t\t\t\t\tdMin = 0.0;\n+\t\t\t\t\t\tupdateSigma(tau);\n+\t\t\t\t\t\treturn deflatedEnd;\n+\t\t\t\t\t} else if (dMin < 0.0) {\n+\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n             }\n \n         }\n@@ -1477,7 +1479,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Replace", 
          "seed": "g=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1288/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:07.062968719 -0500\n@@ -1501,9 +1501,6 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n-                            break;\n-                        }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n@@ -1516,16 +1513,14 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    eMin = work[4 * start + pingPong + 4];\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                Arrays.sort(realEigenvalues);\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n@@ -1583,47 +1578,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            g = 0.25;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "dN=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_350/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:08.481066818 -0500\n@@ -1509,17 +1509,14 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        dN = 0;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,127 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                if (dMin == dN || dMin == dN1) {\n+\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2\n+\t\t\t\t\t\t\t\t\t\t: (b1 + b2));\n+\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n+\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\tint np;\n+\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\ttType = -5;\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\ttType = -6;\n+\t\t\t\t}\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,26 +1656,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1474, 
          "faulty": "tType=-4;", 
          "type": "Replace", 
          "seed": "b1=b2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1272/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:02.906959103 -0500\n@@ -1470,8 +1470,7 @@\n                         tType = -3;\n                     }\n                 } else {\n-                    // case 4.\n-                    tType = -4;\n+                    b1 = b2;\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n@@ -1525,7 +1524,8 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_340/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:04:54.345029092 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1277/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:18:04.210962119 -0500\n@@ -1098,7 +1098,8 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\ttType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1539,26 +1537,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1098, 
          "faulty": "if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_998/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:14:17.166450405 -0500\n@@ -1095,15 +1095,19 @@\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n-                    } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n-                        // early failure. Divide by 4.\n-                        tau *= 0.25;\n-                        tType -= 12;\n-                    }\n+\t\t\t\t\t\tif (dMin1 == dN1) {\n+\t\t\t\t\t\t\ttau = 0.5 * dMin1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (dMin1 > 0.0) {\n+\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n                 } else if (Double.isNaN(dMin)) {\n                     tau = 0.0;\n                 } else {\n@@ -1516,10 +1520,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "InsertBefore", 
          "seed": "squaredSecondary=new double[secondary.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tType=-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1073/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:30.978613152 -0500\n@@ -1504,7 +1504,8 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n+                        squaredSecondary = new double[secondary.length];\n+\t\t\t\t\t\tb1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1514,12 +1515,9 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -9;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_632/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:46.577631856 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,27 +1539,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "InsertBefore", 
          "seed": "tType=-2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1203/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:12.754843617 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1532,33 +1528,15 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                tType = -2;\n+\t\t\t\tdouble b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tType -= 11;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tau=-dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1924/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:26:01.832081494 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1525,7 +1526,8 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                g = 0.25 * 0.333;\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n@@ -1539,26 +1541,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tau = -dMin;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "InsertBefore", 
          "seed": "if (dMin < 0.0) {\n  if (tType < -22) {\n    tau=0.0;\n  }\n else   if (dMin1 > 0.0) {\n    tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n    tType-=11;\n  }\n else {\n    tau*=0.25;\n    tType-=12;\n  }\n}\n else if (Double.isNaN(dMin)) {\n  tau=0.0;\n}\n else {\n  loop=false;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_391/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:43.169158682 -0500\n@@ -1096,7 +1096,23 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n+                        if (dMin < 0.0) {\n+\t\t\t\t\t\t\tif (tType < -22) {\n+\t\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t\t} else if (dMin1 > 0.0) {\n+\t\t\t\t\t\t\t\ttau = (tau + dMin)\n+\t\t\t\t\t\t\t\t\t\t* (1.0 - 2.0 * MathUtils.EPSILON);\n+\t\t\t\t\t\t\t\ttType -= 11;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\ttau *= 0.25;\n+\t\t\t\t\t\t\t\ttType -= 12;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (Double.isNaN(dMin)) {\n+\t\t\t\t\t\t\ttau = 0.0;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tloop = false;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n@@ -1477,7 +1493,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1516,10 +1531,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1550,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1769/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:16.831831874 -0500\n@@ -1516,16 +1516,133 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                if (dMin == dN || dMin == dN1) {\n+\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2\n+\t\t\t\t\t\t\t\t\t\t: (b1 + b2));\n+\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n+\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\tint np;\n+\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\ttType = -5;\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\ttType = -6;\n+\t\t\t\t}\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1100, 
          "faulty": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);", 
          "type": "Delete", 
          "seed": "g=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1201/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:12.334842655 -0500\n@@ -1096,8 +1096,6 @@\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n                     } else if (dMin1 > 0.0) {\n-                        // late failure. Gives excellent shift.\n-                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                         tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n@@ -1516,10 +1514,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "this.main=main.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1478, 
          "faulty": "if (dMin == dN) {\n  gam=dN;\n  a2=0.0;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  b2=work[nn - 5] / work[nn - 7];\n  np=nn - 9;\n}\n else {\n  np=nn - 2 * pingPong;\n  b2=work[np - 2];\n  gam=dN1;\n  if (work[np - 4] > work[np - 2]) {\n    return;\n  }\n  a2=work[np - 4] / work[np - 2];\n  if (work[nn - 9] > work[nn - 11]) {\n    return;\n  }\n  b2=work[nn - 9] / work[nn - 11];\n  np=nn - 13;\n}", 
          "type": "InsertBefore", 
          "seed": "if (work[nn - 9] > work[nn - 11]) {\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_925/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:13:15.858305347 -0500\n@@ -1475,7 +1475,10 @@\n                     double s = 0.25 * dMin;\n                     double gam;\n                     int np;\n-                    if (dMin == dN) {\n+                    if (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (dMin == dN) {\n                         gam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n@@ -1539,27 +1542,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "Arrays.sort(realEigenvalues);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "g=0.25 * 0.333;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_524/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:07:12.181390552 -0500\n@@ -1477,7 +1477,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        g = 0.25 * 0.333;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1617,8 +1617,6 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "this.realEigenvalues=realEigenvalues;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1500/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:20:52.983351804 -0500\n@@ -1091,7 +1091,8 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    this.realEigenvalues = realEigenvalues;\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1516,10 +1517,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = 0.5 * dMin1;\n                     tau = s;\n \n                 }\n@@ -1539,26 +1537,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1504, 
          "faulty": "if (b2 == 0.0) {\n  break;\n}", 
          "type": "InsertBefore", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1517, 
          "faulty": "a2=cnst3 * a2;", 
          "type": "InsertBefore", 
          "seed": "tType=-9;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_251/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:28.280745380 -0500\n@@ -1501,7 +1501,8 @@\n                     // approximate contribution to norm squared from i < nn-1.\n                     a2 = a2 + b2;\n                     for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if(b2 == 0.0) {\n+                        eigenvectors = null;\n+\t\t\t\t\t\tif(b2 == 0.0) {\n                             break;\n                         }\n                         b1 = b2;\n@@ -1514,12 +1515,9 @@\n                             break;\n                         }\n                     }\n-                    a2 = cnst3 * a2;\n+                    tType = -9;\n+\t\t\t\t\ta2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "InsertBefore", 
          "seed": "g=0.25 * 0.333;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "g+=0.333 * (1 - g);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2125/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:28:28.708437431 -0500\n@@ -1509,7 +1509,8 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n+                        g = 0.25 * 0.333;\n+\t\t\t\t\t\ta2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n@@ -1527,7 +1528,8 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                g += 0.333 * (1 - g);\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,26 +1541,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "b2+=b1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_10/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:59:31.503495943 -0500\n@@ -1505,9 +1505,7 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n+                        tType -= 11;\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1254/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:52.182934320 -0500\n@@ -1477,7 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1539,26 +1538,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1625, 
          "faulty": "tType=-9;", 
          "type": "Delete", 
          "seed": "switch (deflated) {\ncase 0:\n  if (dMin == dN || dMin == dN1) {\n    double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n    double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n    double a2=work[nn - 7] + work[nn - 5];\n    if (dMin == dN && dMin1 == dN1) {\n      final double gap2=dMin2 - a2 - dMin2 * 0.25;\n      final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n      if (gap1 > 0.0 && gap1 > b1) {\n        tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n        tType=-2;\n      }\n else {\n        double s=0.0;\n        if (dN > b1) {\n          s=dN - b1;\n        }\n        if (a2 > (b1 + b2)) {\n          s=Math.min(s,a2 - (b1 + b2));\n        }\n        tau=Math.max(s,0.333 * dMin);\n        tType=-3;\n      }\n    }\n else {\n      tType=-4;\n      double s=0.25 * dMin;\n      double gam;\n      int np;\n      if (dMin == dN) {\n        gam=dN;\n        a2=0.0;\n        if (work[nn - 5] > work[nn - 7]) {\n          return;\n        }\n        b2=work[nn - 5] / work[nn - 7];\n        np=nn - 9;\n      }\n else {\n        np=nn - 2 * pingPong;\n        b2=work[np - 2];\n        gam=dN1;\n        if (work[np - 4] > work[np - 2]) {\n          return;\n        }\n        a2=work[np - 4] / work[np - 2];\n        if (work[nn - 9] > work[nn - 11]) {\n          return;\n        }\n        b2=work[nn - 9] / work[nn - 11];\n        np=nn - 13;\n      }\n      a2=a2 + b2;\n      for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n      if (a2 < cnst1) {\n        s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n      }\n      tau=s;\n    }\n  }\n else   if (dMin == dN2) {\n    tType=-5;\n    double s=0.25 * dMin;\n    final int np=nn - 2 * pingPong;\n    double b1=work[np - 2];\n    double b2=work[np - 6];\n    final double gam=dN2;\n    if (work[np - 8] > b2 || work[np - 4] > b1) {\n      return;\n    }\n    double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n    if (end - start > 2) {\n      b2=work[nn - 13] / work[nn - 15];\n      a2=a2 + b2;\n      for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n        if (b2 == 0.0) {\n          break;\n        }\n        b1=b2;\n        if (work[i4] > work[i4 - 2]) {\n          return;\n        }\n        b2=b2 * (work[i4] / work[i4 - 2]);\n        a2=a2 + b2;\n        if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n          break;\n        }\n      }\n      a2=cnst3 * a2;\n    }\n    if (a2 < cnst1) {\n      tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n else {\n      tau=s;\n    }\n  }\n else {\n    if (tType == -6) {\n      g+=0.333 * (1 - g);\n    }\n else     if (tType == -18) {\n      g=0.25 * 0.333;\n    }\n else {\n      g=0.25;\n    }\n    tau=g * dMin;\n    tType=-6;\n  }\nbreak;\ncase 1:\nif (dMin1 == dN1 && dMin2 == dN2) {\ntType=-7;\ndouble s=0.333 * dMin1;\nif (work[nn - 5] > work[nn - 7]) {\n  return;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin1 / (1 + b2 * b2);\nfinal double gap2=0.5 * dMin2 - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\n  tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\n  tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  tType=-8;\n}\n}\n else {\ntau=0.25 * dMin1;\nif (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}\ntType=-9;\n}\nbreak;\ncase 2:\nif (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\ntType=-10;\nfinal double s=0.333 * dMin2;\nif (work[nn - 5] > work[nn - 7]) {\nreturn;\n}\ndouble b1=work[nn - 5] / work[nn - 7];\ndouble b2=b1;\nif (b2 != 0.0) {\nfor (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\nif (work[i4] > work[i4 - 2]) {\n  return;\n}\nb1*=work[i4] / work[i4 - 2];\nb2+=b1;\nif (100 * b1 < b2) {\n  break;\n}\n}\n}\nb2=Math.sqrt(cnst3 * b2);\nfinal double a2=dMin2 / (1 + b2 * b2);\nfinal double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\nif (gap2 > 0.0 && gap2 > b2 * a2) {\ntau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n}\n else {\ntau=Math.max(s,a2 * (1 - cnst2 * b2));\n}\n}\n else {\ntau=0.25 * dMin2;\ntType=-11;\n}\nbreak;\ndefault :\ntau=0.0;\ntType=-12;\n}"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1138/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:13.810709411 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1622,7 +1618,6 @@\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n-                tType = -9;\n             }\n             break;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_2006/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:27:01.632224086 -0500\n@@ -1508,7 +1508,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        this.splitTolerance = splitTolerance;\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1527,7 +1528,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n@@ -1539,27 +1540,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "InsertBefore", 
          "seed": "if (dMin == dN || dMin == dN1) {\n  double b1=Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n  double b2=Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n  double a2=work[nn - 7] + work[nn - 5];\n  if (dMin == dN && dMin1 == dN1) {\n    final double gap2=dMin2 - a2 - dMin2 * 0.25;\n    final double gap1=a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n    if (gap1 > 0.0 && gap1 > b1) {\n      tau=Math.max(dN - (b1 / gap1) * b1,0.5 * dMin);\n      tType=-2;\n    }\n else {\n      double s=0.0;\n      if (dN > b1) {\n        s=dN - b1;\n      }\n      if (a2 > (b1 + b2)) {\n        s=Math.min(s,a2 - (b1 + b2));\n      }\n      tau=Math.max(s,0.333 * dMin);\n      tType=-3;\n    }\n  }\n else {\n    tType=-4;\n    double s=0.25 * dMin;\n    double gam;\n    int np;\n    if (dMin == dN) {\n      gam=dN;\n      a2=0.0;\n      if (work[nn - 5] > work[nn - 7]) {\n        return;\n      }\n      b2=work[nn - 5] / work[nn - 7];\n      np=nn - 9;\n    }\n else {\n      np=nn - 2 * pingPong;\n      b2=work[np - 2];\n      gam=dN1;\n      if (work[np - 4] > work[np - 2]) {\n        return;\n      }\n      a2=work[np - 4] / work[np - 2];\n      if (work[nn - 9] > work[nn - 11]) {\n        return;\n      }\n      b2=work[nn - 9] / work[nn - 11];\n      np=nn - 13;\n    }\n    a2=a2 + b2;\n    for (int i4=np; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n    if (a2 < cnst1) {\n      s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n    }\n    tau=s;\n  }\n}\n else if (dMin == dN2) {\n  tType=-5;\n  double s=0.25 * dMin;\n  final int np=nn - 2 * pingPong;\n  double b1=work[np - 2];\n  double b2=work[np - 6];\n  final double gam=dN2;\n  if (work[np - 8] > b2 || work[np - 4] > b1) {\n    return;\n  }\n  double a2=(work[np - 8] / b2) * (1 + work[np - 4] / b1);\n  if (end - start > 2) {\n    b2=work[nn - 13] / work[nn - 15];\n    a2=a2 + b2;\n    for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (b2 == 0.0) {\n        break;\n      }\n      b1=b2;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b2=b2 * (work[i4] / work[i4 - 2]);\n      a2=a2 + b2;\n      if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n        break;\n      }\n    }\n    a2=cnst3 * a2;\n  }\n  if (a2 < cnst1) {\n    tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n  }\n else {\n    tau=s;\n  }\n}\n else {\n  if (tType == -6) {\n    g+=0.333 * (1 - g);\n  }\n else   if (tType == -18) {\n    g=0.25 * 0.333;\n  }\n else {\n    g=0.25;\n  }\n  tau=g * dMin;\n  tType=-6;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_406/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:52.361182869 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,127 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                if (dMin == dN || dMin == dN1) {\n+\t\t\t\t\tdouble b1 = Math.sqrt(work[nn - 3])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 5]);\n+\t\t\t\t\tdouble b2 = Math.sqrt(work[nn - 7])\n+\t\t\t\t\t\t\t* Math.sqrt(work[nn - 9]);\n+\t\t\t\t\tdouble a2 = work[nn - 7] + work[nn - 5];\n+\t\t\t\t\tif (dMin == dN && dMin1 == dN1) {\n+\t\t\t\t\t\tfinal double gap2 = dMin2 - a2 - dMin2 * 0.25;\n+\t\t\t\t\t\tfinal double gap1 = a2\n+\t\t\t\t\t\t\t\t- dN\n+\t\t\t\t\t\t\t\t- ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2\n+\t\t\t\t\t\t\t\t\t\t: (b1 + b2));\n+\t\t\t\t\t\tif (gap1 > 0.0 && gap1 > b1) {\n+\t\t\t\t\t\t\ttau = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n+\t\t\t\t\t\t\ttType = -2;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdouble s = 0.0;\n+\t\t\t\t\t\t\tif (dN > b1) {\n+\t\t\t\t\t\t\t\ts = dN - b1;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (a2 > (b1 + b2)) {\n+\t\t\t\t\t\t\t\ts = Math.min(s, a2 - (b1 + b2));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ttau = Math.max(s, 0.333 * dMin);\n+\t\t\t\t\t\t\ttType = -3;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttType = -4;\n+\t\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\t\tdouble gam;\n+\t\t\t\t\t\tint np;\n+\t\t\t\t\t\tif (dMin == dN) {\n+\t\t\t\t\t\t\tgam = dN;\n+\t\t\t\t\t\t\ta2 = 0.0;\n+\t\t\t\t\t\t\tif (work[nn - 5] > work[nn - 7]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n+\t\t\t\t\t\t\tnp = nn - 9;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnp = nn - 2 * pingPong;\n+\t\t\t\t\t\t\tb2 = work[np - 2];\n+\t\t\t\t\t\t\tgam = dN1;\n+\t\t\t\t\t\t\tif (work[np - 4] > work[np - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ta2 = work[np - 4] / work[np - 2];\n+\t\t\t\t\t\t\tif (work[nn - 9] > work[nn - 11]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = work[nn - 9] / work[nn - 11];\n+\t\t\t\t\t\t\tnp = nn - 13;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\t\ts = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (dMin == dN2) {\n+\t\t\t\t\ttType = -5;\n+\t\t\t\t\tdouble s = 0.25 * dMin;\n+\t\t\t\t\tfinal int np = nn - 2 * pingPong;\n+\t\t\t\t\tdouble b1 = work[np - 2];\n+\t\t\t\t\tdouble b2 = work[np - 6];\n+\t\t\t\t\tfinal double gam = dN2;\n+\t\t\t\t\tif (work[np - 8] > b2 || work[np - 4] > b1) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tdouble a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n+\t\t\t\t\tif (end - start > 2) {\n+\t\t\t\t\t\tb2 = work[nn - 13] / work[nn - 15];\n+\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\tfor (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n+\t\t\t\t\t\t\tif (b2 == 0.0) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb1 = b2;\n+\t\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\t\ta2 = a2 + b2;\n+\t\t\t\t\t\t\tif (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\ta2 = cnst3 * a2;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (a2 < cnst1) {\n+\t\t\t\t\t\ttau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttau = s;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (tType == -6) {\n+\t\t\t\t\t\tg += 0.333 * (1 - g);\n+\t\t\t\t\t} else if (tType == -18) {\n+\t\t\t\t\t\tg = 0.25 * 0.333;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tg = 0.25;\n+\t\t\t\t\t}\n+\t\t\t\t\ttau = g * dMin;\n+\t\t\t\t\ttType = -6;\n+\t\t\t\t}\n+\t\t\t\tdouble s = 0.25 * dMin;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    final double oldB1=b1;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1=b1 * (work[i4] / work[i4 - 2]);\n    b2=b2 + b1;\n    if (100 * Math.max(b1,oldB1) < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1256/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:17:52.574935226 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1534,9 +1531,20 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tfinal double oldB1 = b1;\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 = b1 * (work[i4] / work[i4 - 2]);\n+\t\t\t\t\t\tb2 = b2 + b1;\n+\t\t\t\t\t\tif (100 * Math.max(b1, oldB1) < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Replace", 
          "seed": "if (b2 != 0.0) {\n  for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b1*=work[i4] / work[i4 - 2];\n    b2+=b1;\n    if (100 * b1 < b2) {\n      break;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1507, 
          "faulty": "b1=b2;", 
          "type": "InsertBefore", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_199/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:02:49.896609487 -0500\n@@ -1504,7 +1504,8 @@\n                         if(b2 == 0.0) {\n                             break;\n                         }\n-                        b1 = b2;\n+                        tau = 0.5 * dMin1;\n+\t\t\t\t\t\tb1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n@@ -1534,9 +1535,19 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n+                if (b2 != 0.0) {\n+\t\t\t\t\tfor (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2\n+\t\t\t\t\t\t\t+ pingPong; i4 -= 4) {\n+\t\t\t\t\t\tif (work[i4] > work[i4 - 2]) {\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tb1 *= work[i4] / work[i4 - 2];\n+\t\t\t\t\t\tb2 += b1;\n+\t\t\t\t\t\tif (100 * b1 < b2) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_275/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:03:46.916809165 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1539,26 +1540,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                a2 = cnst3 * a2;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1535, 
          "faulty": "double b2=work[np - 6];", 
          "type": "InsertBefore", 
          "seed": "tType=-2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "InsertBefore", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_385/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:41.129153306 -0500\n@@ -1516,7 +1516,8 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n+                    tType = -4;\n+\t\t\t\t\t// rayleigh quotient residual bound.\n                     if (a2 < cnst1) {\n                         s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                     }\n@@ -1532,34 +1533,14 @@\n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n                 double b1 = work[np - 2];\n-                double b2 = work[np - 6];\n+                tType = -2;\n+\t\t\t\tdouble b2 = work[np - 6];\n                 final double gam = dN2;\n                 if (work[np - 8] > b2 || work[np - 4] > b1) {\n                     return;\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "throw new MatrixIndexException(\"empty selected row index array\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1529, 
          "faulty": "tType=-5;", 
          "type": "InsertBefore", 
          "seed": "dMin2=dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Replace", 
          "seed": "tType=-5;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1851/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:03.659943063 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1477,7 +1476,7 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n+                        tType = -5;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n@@ -1525,7 +1524,8 @@\n                 }\n             } else if (dMin == dN2) {\n \n-                // case 5.\n+                dMin2 = dMin;\n+\t\t\t\t// case 5.\n                 tType = -5;\n                 double s = 0.25 * dMin;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1479, 
          "faulty": "gam=dN;", 
          "type": "InsertBefore", 
          "seed": "tau=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Delete", 
          "seed": "if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n  tType=-10;\n  final double s=0.333 * dMin2;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1*=work[i4] / work[i4 - 2];\n      b2+=b1;\n      if (100 * b1 < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin2 / (1 + b2 * b2);\n  final double gap2=work[nn - 7] + work[nn - 9] - Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n  }\n}\n else {\n  tau=0.25 * dMin2;\n  tType=-11;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1057/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:20.534589866 -0500\n@@ -1476,7 +1476,8 @@\n                     double gam;\n                     int np;\n                     if (dMin == dN) {\n-                        gam = dN;\n+                        tau = 0.0;\n+\t\t\t\t\t\tgam = dN;\n                         a2 = 0.0;\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1617,8 +1614,6 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "b2+=b1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_893/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:55.438254760 -0500\n@@ -1539,26 +1539,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                b2 += b1;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "tType=-1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "tau*=0.25;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "lowerSpectra=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_642/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:09:07.149683967 -0500\n@@ -1506,7 +1506,8 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            tau *= 0.25;\n+\t\t\t\t\t\t\treturn;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1583,47 +1580,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1512, 
          "faulty": "a2=a2 + b2;", 
          "type": "Delete", 
          "seed": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1095, 
          "faulty": "if (tType < -22) {\n  tau=0.0;\n}\n else if (dMin1 > 0.0) {\n  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n  tType-=11;\n}\n else {\n  tau*=0.25;\n  tType-=12;\n}", 
          "type": "InsertBefore", 
          "seed": "tType=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eMin=work[4 * start + pingPong + 4];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1540/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:27.931433510 -0500\n@@ -1091,7 +1091,8 @@\n                     updateSigma(tau);\n                     return deflatedEnd;\n                 } else if (dMin < 0.0) {\n-                    // tau too big. Select new tau and try again.\n+                    tType = 0;\n+\t\t\t\t\t// tau too big. Select new tau and try again.\n                     if (tType < -22) {\n                         // failed twice. Play it safe.\n                         tau = 0.0;\n@@ -1509,17 +1510,12 @@\n                             return;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n                         }\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "realEigenvalues=new double[main.length];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1079/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:15:38.566630118 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n@@ -1534,9 +1531,6 @@\n                 double b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1509, 
          "faulty": "return;", 
          "type": "InsertBefore", 
          "seed": "tau=g * dMin;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_887/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:53.850250825 -0500\n@@ -1506,7 +1506,8 @@\n                         }\n                         b1 = b2;\n                         if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n+                            tau = g * dMin;\n+\t\t\t\t\t\t\treturn;\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Delete", 
          "seed": "a2=cnst3 * a2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1513, 
          "faulty": "if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n  break;\n}", 
          "type": "Replace", 
          "seed": "tType=-6;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1524/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:21:11.051394007 -0500\n@@ -1510,9 +1510,7 @@\n                         }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n-                            break;\n-                        }\n+                        tType = -6;\n                     }\n                     a2 = cnst3 * a2;\n \n@@ -1539,27 +1537,6 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n-\n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                 } else {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1508, 
          "faulty": "if (work[i4] > work[i4 - 2]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "this.secondary=secondary.clone();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1831/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:24:57.679928850 -0500\n@@ -1505,9 +1505,6 @@\n                             break;\n                         }\n                         b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n                         b2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n@@ -1516,10 +1513,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1537, 
          "faulty": "if (work[np - 8] > b2 || work[np - 4] > b1) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "findEigenVectors();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1544, 
          "faulty": "b2=work[nn - 13] / work[nn - 15];", 
          "type": "Delete", 
          "seed": "findEigenvalues();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1534, 
          "faulty": "double b1=work[np - 2];", 
          "type": "InsertBefore", 
          "seed": "sigmaLow=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_827/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:12:13.934151763 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1531,17 +1527,14 @@\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n-                double b1 = work[np - 2];\n+                sigmaLow = 0;\n+\t\t\t\tdouble b1 = work[np - 2];\n                 double b2 = work[np - 6];\n                 final double gam = dN2;\n-                if (work[np - 8] > b2 || work[np - 4] > b1) {\n-                    return;\n-                }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n                 if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                         if (b2 == 0.0) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "tType-=11;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1511, 
          "faulty": "b2=b2 * (work[i4] / work[i4 - 2]);", 
          "type": "InsertBefore", 
          "seed": "dMin=Math.min(dMin,dN1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "eigenvectors=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1480, 
          "faulty": "a2=0.0;", 
          "type": "Delete", 
          "seed": "if (a2 < cnst1) {\n  tau=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}\n else {\n  tau=s;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1481, 
          "faulty": "if (work[nn - 5] > work[nn - 7]) {\n  return;\n}", 
          "type": "Delete", 
          "seed": "work[4 * end - pingPong - 1]=eMin;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_565/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:08:03.621522532 -0500\n@@ -1477,10 +1477,6 @@\n                     int np;\n                     if (dMin == dN) {\n                         gam = dN;\n-                        a2 = 0.0;\n-                        if (work[nn - 5]  >  work[nn - 7]) {\n-                            return;\n-                        }\n                         b2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n@@ -1508,7 +1504,8 @@\n                         if (work[i4]  >  work[i4 - 2]) {\n                             return;\n                         }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n+                        dMin = Math.min(dMin, dN1);\n+\t\t\t\t\t\tb2 = b2 * (work[i4] / work[i4 - 2]);\n                         a2 = a2 + b2;\n                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                             break;\n@@ -1516,10 +1513,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1532,7 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                tType -= 11;\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1101, 
          "faulty": "tType-=11;", 
          "type": "Delete", 
          "seed": "cachedD=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_797/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:11:35.878057075 -0500\n@@ -1098,7 +1098,6 @@\n                     } else if (dMin1 > 0.0) {\n                         // late failure. Gives excellent shift.\n                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n-                        tType -= 11;\n                     } else {\n                         // early failure. Divide by 4.\n                         tau *= 0.25;\n@@ -1516,10 +1515,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tau = Math.max(s, 0.333 * dMin);\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1621, 
          "faulty": "tau=0.25 * dMin1;", 
          "type": "Replace", 
          "seed": "tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "a2=a2 + b2;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1638/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:39.107600775 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    a2 = a2 + b2;\n                     tau = s;\n \n                 }\n@@ -1617,8 +1614,7 @@\n                 }\n             } else {\n \n-                // case 9.\n-                tau = 0.25 * dMin1;\n+                tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                 if (dMin1 == dN1) {\n                     tau = 0.5 * dMin1;\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1543, 
          "faulty": "if (end - start > 2) {\n  b2=work[nn - 13] / work[nn - 15];\n  a2=a2 + b2;\n  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n    if (b2 == 0.0) {\n      break;\n    }\n    b1=b2;\n    if (work[i4] > work[i4 - 2]) {\n      return;\n    }\n    b2=b2 * (work[i4] / work[i4 - 2]);\n    a2=a2 + b2;\n    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {\n      break;\n    }\n  }\n  a2=cnst3 * a2;\n}", 
          "type": "Replace", 
          "seed": "if (b2 == 0.0) {\n  break;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1586, 
          "faulty": "if (dMin1 == dN1 && dMin2 == dN2) {\n  tType=-7;\n  double s=0.333 * dMin1;\n  if (work[nn - 5] > work[nn - 7]) {\n    return;\n  }\n  double b1=work[nn - 5] / work[nn - 7];\n  double b2=b1;\n  if (b2 != 0.0) {\n    for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {\n      final double oldB1=b1;\n      if (work[i4] > work[i4 - 2]) {\n        return;\n      }\n      b1=b1 * (work[i4] / work[i4 - 2]);\n      b2=b2 + b1;\n      if (100 * Math.max(b1,oldB1) < b2) {\n        break;\n      }\n    }\n  }\n  b2=Math.sqrt(cnst3 * b2);\n  final double a2=dMin1 / (1 + b2 * b2);\n  final double gap2=0.5 * dMin2 - a2;\n  if (gap2 > 0.0 && gap2 > b2 * a2) {\n    tau=Math.max(s,a2 * (1 - cnst2 * a2 * (b2 / gap2)* b2));\n  }\n else {\n    tau=Math.max(s,a2 * (1 - cnst2 * b2));\n    tType=-8;\n  }\n}\n else {\n  tau=0.25 * dMin1;\n  if (dMin1 == dN1) {\n    tau=0.5 * dMin1;\n  }\n  tType=-9;\n}", 
          "type": "Delete", 
          "seed": "tType=-4;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=0.5 * dMin1;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_424/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:05:57.577196567 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1539,26 +1535,9 @@\n                 }\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n-                // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 2) {\n-                    b2 = work[nn - 13] / work[nn - 15];\n-                    a2 = a2 + b2;\n-                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        if (b2 == 0.0) {\n-                            break;\n-                        }\n-                        b1 = b2;\n-                        if (work[i4]  >  work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b2 = b2 * (work[i4] / work[i4 - 2]);\n-                        a2 = a2 + b2;\n-                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n-                            break;\n-                        }\n-                    }\n-                    a2 = cnst3 * a2;\n-                }\n+                if (b2 == 0.0) {\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n                 if (a2 < cnst1) {\n                     tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n@@ -1583,47 +1562,7 @@\n             break;\n \n         case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n-            if (dMin1 == dN1 && dMin2 == dN2) {\n-\n-                // cases 7 and 8.\n-                tType = -7;\n-                double s = 0.333 * dMin1;\n-                if (work[nn - 5] > work[nn - 7]) {\n-                    return;\n-                }\n-                double b1 = work[nn - 5] / work[nn - 7];\n-                double b2 = b1;\n-                if (b2 != 0.0) {\n-                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n-                        final double oldB1 = b1;\n-                        if (work[i4] > work[i4 - 2]) {\n-                            return;\n-                        }\n-                        b1 = b1 * (work[i4] / work[i4 - 2]);\n-                        b2 = b2 + b1;\n-                        if (100 * Math.max(b1, oldB1) < b2) {\n-                            break;\n-                        }\n-                    }\n-                }\n-                b2 = Math.sqrt(cnst3 * b2);\n-                final double a2 = dMin1 / (1 + b2 * b2);\n-                final double gap2 = 0.5 * dMin2 - a2;\n-                if (gap2 > 0.0 && gap2 > b2 * a2) {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n-                } else {\n-                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n-                    tType = -8;\n-                }\n-            } else {\n-\n-                // case 9.\n-                tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n-                tType = -9;\n-            }\n+            ;\n             break;\n \n         case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1622, 
          "faulty": "if (dMin1 == dN1) {\n  tau=0.5 * dMin1;\n}", 
          "type": "Replace", 
          "seed": "g+=0.333 * (1 - g);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "tau=Math.max(s,0.333 * dMin);"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1675/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:22:59.943649924 -0500\n@@ -1516,10 +1516,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n@@ -1619,9 +1615,7 @@\n \n                 // case 9.\n                 tau = 0.25 * dMin1;\n-                if (dMin1 == dN1) {\n-                    tau = 0.5 * dMin1;\n-                }\n+                g += 0.333 * (1 - g);\n                 tType = -9;\n             }\n             break;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Delete", 
          "seed": "this.splitTolerance=splitTolerance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1484, 
          "faulty": "b2=work[nn - 5] / work[nn - 7];", 
          "type": "InsertBefore", 
          "seed": "realEigenvalues=new double[main.length];"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1121/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:16:08.958698449 -0500\n@@ -1481,7 +1481,8 @@\n                         if (work[nn - 5]  >  work[nn - 7]) {\n                             return;\n                         }\n-                        b2 = work[nn - 5] / work[nn - 7];\n+                        realEigenvalues = new double[main.length];\n+\t\t\t\t\t\tb2 = work[nn - 5] / work[nn - 7];\n                         np = nn - 9;\n                     } else {\n                         np = nn - 2 * pingPong;\n@@ -1516,10 +1517,6 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n                     tau = s;\n \n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1530, 
          "faulty": "double s=0.25 * dMin;", 
          "type": "Replace", 
          "seed": "double s=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java", 
          "line": 1520, 
          "faulty": "if (a2 < cnst1) {\n  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);\n}", 
          "type": "Replace", 
          "seed": "tType=-4;"
        }
      ], 
      "patch": "--- /tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 05:57:29.659492621 -0500\n+++ /tmp/Arja_Defects4J_Math_81/patches_57bl/Patch_1888/patched/tmp/Arja_Defects4J_Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\t2018-12-01 06:25:45.056041540 -0500\n@@ -1516,10 +1516,7 @@\n                     }\n                     a2 = cnst3 * a2;\n \n-                    // rayleigh quotient residual bound.\n-                    if (a2 < cnst1) {\n-                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n-                    }\n+                    tType = -4;\n                     tau = s;\n \n                 }\n@@ -1527,7 +1524,7 @@\n \n                 // case 5.\n                 tType = -5;\n-                double s = 0.25 * dMin;\n+                double s = 0;\n \n                 // compute contribution to norm squared from i > nn-2.\n                 final int np = nn - 2 * pingPong;\n\n\n"
    }
  ]
}