cd /tmp/Cardumen_Defects4J_Math_63;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/RepairThemAll/script/../libs/jtestex7.jar:/home/tdurieux/RepairThemAll/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode cardumen \
	-location . \
	-id Math-63 \
	-failing org.apache.commons.math.util.MathUtilsTest \
	-jvm4testexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-jvm4evosuitetestexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters x:x \
	-dependencies /tmp/Cardumen_Defects4J_Math_63/target/classes/:/tmp/Cardumen_Defects4J_Math_63/target/test-classes/:/home/tdurieux/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
2018-12-28 15:06:40,676 INFO main - command line arguments: [-mode  cardumen  -location  .  -id  Math-63  -failing  org.apache.commons.math.util.MathUtilsTest  -jvm4testexecution  /home/tdurieux/openjdk-1.7.0/bin/  -jvm4evosuitetestexecution  /home/tdurieux/openjdk-1.7.0/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  x:x  -dependencies  /tmp/Cardumen_Defects4J_Math_63/target/classes/:/tmp/Cardumen_Defects4J_Math_63/target/test-classes/:/home/tdurieux/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
2018-12-28 15:06:40,678 INFO fr.inria.main.evolution.AstorMain - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:842) - Source folders: [/tmp/Cardumen_Defects4J_Math_63/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:861) - Source Test folders: [/tmp/Cardumen_Defects4J_Math_63/./src/test/java]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:75) - -Executing Gzoltar classpath: /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//bin//default from 506 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:149) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:169) - -gz-Adding classpath: [/tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//bin//default, /tmp/Cardumen_Defects4J_Math_63/target/test-classes/, /tmp/Cardumen_Defects4J_Math_63/target/classes/, /home/tdurieux/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.apache.commons.math.util.MathUtilsTest#testArrayEquals
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:218) - Gzoltar Test Result Total:2282, fails: 1, GZoltar suspicious 18094, with positive susp 8
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - nr test results 2282
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:271) - Gzoltar found: 8 with susp > 0.1, we consider: 8
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:689) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:781) - Creating model,  Code location from working folder: /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//src//default
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:65) - building model: /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//src//default, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:78) - Classpath for building SpoonModel [/tmp/Cardumen_Defects4J_Math_63/target/classes/, /tmp/Cardumen_Defects4J_Math_63/target/test-classes/, /home/tdurieux/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:693) - 
---- Initial suspicious size: 8
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 8,  19
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 19
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 19, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.spaces.ingredients.scopes.ExpressionTypeIngredientSpace.defineSpace(ExpressionTypeIngredientSpace.java:121) - Ingredient search space info : number keys 17 , number values 321 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/Cardumen_Defects4J_Math_63/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= r-expression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 43860
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ingredienttransformstrategy= name-probability-based
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= expression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.util.MathUtilsTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-63
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0-u80-unofficial
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= cardumen
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /tmp/Cardumen_Defects4J_Math_63/target/classes/:/tmp/Cardumen_Defects4J_Math_63/target/test-classes/:/home/tdurieux/RepairThemAll/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ingredientstrategy= name-probability-based
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[ERROR] fr.inria.astor.core.entities.StatementOperatorInstance.defineParentInformation(StatementOperatorInstance.java:81) - Parent null or it is not a block
[ERROR] fr.inria.astor.core.entities.StatementOperatorInstance.defineParentInformation(StatementOperatorInstance.java:81) - Parent null or it is not a block
[ERROR] fr.inria.astor.core.entities.StatementOperatorInstance.defineParentInformation(StatementOperatorInstance.java:81) - Parent null or it is not a block
[ERROR] fr.inria.astor.core.entities.StatementOperatorInstance.defineParentInformation(StatementOperatorInstance.java:81) - Parent null or it is not a block
[ERROR] fr.inria.astor.core.entities.StatementOperatorInstance.defineParentInformation(StatementOperatorInstance.java:81) - Parent null or it is not a block
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.processCreatedVariant(AstorCoreEngine.java:436) - -Found Solution, child variant #10
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:346) - Error variant :10 the model was not the same from the original after this generation
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:364) - Undo Error: diff: 
/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org.apache.commons.math.util.MathUtils
+++ org.apache.commons.math.util.MathUtils
@@ -1,71 +1,32 @@
 public final class MathUtils {
-
-
 	public static final double EPSILON = 1.1102230246251565E-16;
 
-
-
-
-
 	public static final double SAFE_MIN = 2.2250738585072014E-308;
 
-
-
-
-
 	public static final double TWO_PI = 2 * (org.apache.commons.math.util.FastMath.PI);
 
-
 	private static final byte NB = ((byte) (-1));
 
-
 	private static final short NS = ((short) (-1));
 
-
 	private static final byte PB = ((byte) (1));
 
-
 	private static final short PS = ((short) (1));
 
-
 	private static final byte ZB = ((byte) (0));
 
-
 	private static final short ZS = ((short) (0));
 
-
 	private static final int NAN_GAP = (4 * 1024) * 1024;
 
-
 	private static final long SGN_MASK = -9223372036854775808L;
 
-
-	private static final long[] FACTORIALS = new long[]{ 
-	1L, 1L, 2L, 
-	6L, 24L, 120L, 
-	720L, 5040L, 40320L, 
-	362880L, 3628800L, 39916800L, 
-	479001600L, 6227020800L, 87178291200L, 
-	1307674368000L, 20922789888000L, 355687428096000L, 
-	6402373705728000L, 121645100408832000L, 2432902008176640000L };
-
-
-
+	private static final long[] FACTORIALS = new long[]{ 1L, 1L, 2L, 6L, 24L, 120L, 720L, 5040L, 40320L, 362880L, 3628800L, 39916800L, 479001600L, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L };
 
 	private MathUtils() {
 		super();
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static int addAndCheck(int x, int y) {
 		long s = ((long) (x)) + ((long) (y));
 		if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
@@ -74,56 +35,26 @@
 		return ((int) (s));
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static long addAndCheck(long a, long b) {
 		return org.apache.commons.math.util.MathUtils.addAndCheck(a, b, org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
 	private static long addAndCheck(long a, long b, org.apache.commons.math.exception.util.Localizable pattern) {
 		long ret;
 		if (a > b) {
-
 			ret = org.apache.commons.math.util.MathUtils.addAndCheck(b, a, pattern);
 		}else {
-
-
 			if (a < 0) {
 				if (b < 0) {
-
 					if (((java.lang.Long.MIN_VALUE) - b) <= a) {
 						ret = a + b;
 					}else {
 						throw org.apache.commons.math.MathRuntimeException.createArithmeticException(pattern, a, b);
 					}
 				}else {
-
 					ret = a + b;
 				}
 			}else {
-
-
-
-
 				if (a <= ((java.lang.Long.MAX_VALUE) - b)) {
 					ret = a + b;
 				}else {
@@ -134,31 +65,6 @@
 		return ret;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static long binomialCoefficient(final int n, final int k) {
 		org.apache.commons.math.util.MathUtils.checkBinomial(n, k);
 		if ((n == k) || (k == 0)) {
@@ -167,42 +73,25 @@
 		if ((k == 1) || (k == (n - 1))) {
 			return n;
 		}
-
 		if (k > (n / 2))
 			return org.apache.commons.math.util.MathUtils.binomialCoefficient(n, (n - k));
 
-
-
-
-
-
 		long result = 1;
 		if (n <= 61) {
-
 			int i = (n - k) + 1;
 			for (int j = 1; j <= k; j++) {
 				result = (result * i) / j;
 				i++;
 			}
-		}else 			if (n <= 66) {
-
-
+		}else
+			if (n <= 66) {
 				int i = (n - k) + 1;
 				for (int j = 1; j <= k; j++) {
-
-
-
-
-
-
 					final long d = org.apache.commons.math.util.MathUtils.gcd(i, j);
 					result = (result / (j / d)) * (i / d);
 					i++;
 				}
 			}else {
-
-
-
 				int i = (n - k) + 1;
 				for (int j = 1; j <= k; j++) {
 					final long d = org.apache.commons.math.util.MathUtils.gcd(i, j);
@@ -210,31 +99,10 @@
 					i++;
 				}
 			}
+
 		return result;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double binomialCoefficientDouble(final int n, final int k) {
 		org.apache.commons.math.util.MathUtils.checkBinomial(n, k);
 		if ((n == k) || (k == 0)) {
@@ -249,33 +117,13 @@
 		if (n < 67) {
 			return org.apache.commons.math.util.MathUtils.binomialCoefficient(n, k);
 		}
-
 		double result = 1.0;
 		for (int i = 1; i <= k; i++) {
 			result *= ((double) ((n - k) + i)) / ((double) (i));
 		}
-
 		return org.apache.commons.math.util.FastMath.floor((result + 0.5));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double binomialCoefficientLog(final int n, final int k) {
 		org.apache.commons.math.util.MathUtils.checkBinomial(n, k);
 		if ((n == k) || (k == 0)) {
@@ -284,209 +132,83 @@
 		if ((k == 1) || (k == (n - 1))) {
 			return org.apache.commons.math.util.FastMath.log(n);
 		}
-
-
-
-
-
 		if (n < 67) {
 			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.binomialCoefficient(n, k));
 		}
-
-
-
-
-
 		if (n < 1030) {
 			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(n, k));
 		}
-
 		if (k > (n / 2)) {
 			return org.apache.commons.math.util.MathUtils.binomialCoefficientLog(n, (n - k));
 		}
-
-
-
-
 		double logSum = 0;
-
-
 		for (int i = (n - k) + 1; i <= n; i++) {
 			logSum += org.apache.commons.math.util.FastMath.log(i);
 		}
-
-
 		for (int i = 2; i <= k; i++) {
 			logSum -= org.apache.commons.math.util.FastMath.log(i);
 		}
-
 		return logSum;
 	}
 
-
-
-
-
-
-
-	private static void checkBinomial(final int n, final int k) throws 
-	java.lang.IllegalArgumentException {
+	private static void checkBinomial(final int n, final int k) throws java.lang.IllegalArgumentException {
 		if (n < k) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
-			n, k);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, n, k);
 		}
 		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, 
-			n);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
 		}
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static int compareTo(double x, double y, double eps) {
 		if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) {
 			return 0;
-		}else 			if (x < y) {
+		}else
+			if (x < y) {
 				return -1;
 			}
+
 		return 1;
 	}
 
-
-
-
-
-
-
-
 	public static double cosh(double x) {
 		return ((org.apache.commons.math.util.FastMath.exp(x)) + (org.apache.commons.math.util.FastMath.exp((-x)))) / 2.0;
 	}
 
-
-
-
-
-
-
-
-
 	public static boolean equals(double x, double y) {
 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
 	}
 
-
-
-
-
-
-
-
-
 	public static boolean equalsIncludingNaN(double x, double y) {
 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));
 	}
 
-
-
-
-
-
-
-
-
-
 	public static boolean equals(double x, double y, double eps) {
 		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static boolean equalsIncludingNaN(double x, double y, double eps) {
 		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static boolean equals(double x, double y, int maxUlps) {
-
-
 		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));
-
 		long xInt = java.lang.Double.doubleToLongBits(x);
 		long yInt = java.lang.Double.doubleToLongBits(y);
-
-
 		if (xInt < 0) {
 			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;
 		}
 		if (yInt < 0) {
 			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;
 		}
-
 		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;
-
 		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
 	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {
 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static boolean equals(double[] x, double[] y) {
 		if ((x == null) || (y == null)) {
 			return !((x == null) ^ (y == null));
@@ -502,16 +224,6 @@
 		return true;
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static boolean equalsIncludingNaN(double[] x, double[] y) {
 		if ((x == null) || (y == null)) {
 			return !((x == null) ^ (y == null));
@@ -527,66 +239,19 @@
 		return true;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static long factorial(final int n) {
 		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);
 		}
 		if (n > 20) {
-			throw new java.lang.ArithmeticException(
-			"factorial value is too large to fit in a long");
+			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");
 		}
 		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double factorialDouble(final int n) {
 		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);
 		}
 		if (n < 21) {
 			return org.apache.commons.math.util.MathUtils.factorial(n);
@@ -594,24 +259,9 @@
 		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double factorialLog(final int n) {
 		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);
 		}
 		if (n < 21) {
 			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));
@@ -623,224 +273,96 @@
 		return logSum;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static int gcd(final int p, final int q) {
 		int u = p;
 		int v = q;
 		if ((u == 0) || (v == 0)) {
 			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-				p, q);
+				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);
 			}
 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
 		}
-
-
-
-
-
 		if (u > 0) {
 			u = -u;
 		}
 		if (v > 0) {
 			v = -v;
 		}
-
 		int k = 0;
 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
-
 			u /= 2;
 			v /= 2;
 			k++;
 		} 
 		if (k == 31) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-			p, q);
+			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);
 		}
-
-
 		int t = ((u & 1) == 1) ? v : -(u / 2);
-
-
 		do {
-
-
 			while ((t & 1) == 0) {
 				t /= 2;
 			} 
-
 			if (t > 0) {
 				u = -t;
 			}else {
 				v = t;
 			}
-
 			t = (v - u) / 2;
-
-
 		} while (t != 0 );
 		return (-u) * (1 << k);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static long gcd(final long p, final long q) {
 		long u = p;
 		long v = q;
 		if ((u == 0) || (v == 0)) {
 			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-				p, q);
+				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);
 			}
 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
 		}
-
-
-
-
-
 		if (u > 0) {
 			u = -u;
 		}
 		if (v > 0) {
 			v = -v;
 		}
-
 		int k = 0;
 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {
-
 			u /= 2;
 			v /= 2;
 			k++;
 		} 
 		if (k == 63) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-			p, q);
+			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);
 		}
-
-
 		long t = ((u & 1) == 1) ? v : -(u / 2);
-
-
 		do {
-
-
 			while ((t & 1) == 0) {
 				t /= 2;
 			} 
-
 			if (t > 0) {
 				u = -t;
 			}else {
 				v = t;
 			}
-
 			t = (v - u) / 2;
-
-
 		} while (t != 0 );
 		return (-u) * (1L << k);
 	}
 
-
-
-
-
-
-
 	public static int hash(double value) {
 		return new java.lang.Double(value).hashCode();
 	}
 
-
-
-
-
-
-
-
 	public static int hash(double[] value) {
 		return java.util.Arrays.hashCode(value);
 	}
 
-
-
-
-
-
-
-
 	public static byte indicator(final byte x) {
 		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
 	}
 
-
-
-
-
-
-
-
-
 	public static double indicator(final double x) {
 		if (java.lang.Double.isNaN(x)) {
 			return java.lang.Double.NaN;
@@ -848,13 +370,6 @@
 		return x >= 0.0 ? 1.0 : -1.0;
 	}
 
-
-
-
-
-
-
-
 	public static float indicator(final float x) {
 		if (java.lang.Float.isNaN(x)) {
 			return java.lang.Float.NaN;
@@ -862,138 +377,44 @@
 		return x >= 0.0F ? 1.0F : -1.0F;
 	}
 
-
-
-
-
-
-
 	public static int indicator(final int x) {
 		return x >= 0 ? 1 : -1;
 	}
 
-
-
-
-
-
-
 	public static long indicator(final long x) {
 		return x >= 0L ? 1L : -1L;
 	}
 
-
-
-
-
-
-
-
 	public static short indicator(final short x) {
 		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static int lcm(int a, int b) {
 		if ((a == 0) || (b == 0)) {
 			return 0;
 		}
 		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
 		if (lcm == (java.lang.Integer.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
-			a, b);
+			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);
 		}
 		return lcm;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static long lcm(long a, long b) {
 		if ((a == 0) || (b == 0)) {
 			return 0;
 		}
 		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
 		if (lcm == (java.lang.Long.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
-			a, b);
+			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);
 		}
 		return lcm;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double log(double base, double x) {
 		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static int mulAndCheck(int x, int y) {
 		long m = ((long) (x)) * ((long) (y));
 		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
@@ -1002,149 +423,73 @@
 		return ((int) (m));
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static long mulAndCheck(long a, long b) {
 		long ret;
 		java.lang.String msg = "overflow: multiply";
 		if (a > b) {
-
 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
 		}else {
 			if (a < 0) {
 				if (b < 0) {
-
 					if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
 						ret = a * b;
 					}else {
 						throw new java.lang.ArithmeticException(msg);
 					}
-				}else 					if (b > 0) {
-
+				}else
+					if (b > 0) {
 						if (((java.lang.Long.MIN_VALUE) / b) <= a) {
 							ret = a * b;
 						}else {
 							throw new java.lang.ArithmeticException(msg);
-
 						}
 					}else {
-
 						ret = 0;
 					}
-			}else 				if (a > 0) {
-
-
-
 
+			}else
+				if (a > 0) {
 					if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
 						ret = a * b;
 					}else {
 						throw new java.lang.ArithmeticException(msg);
 					}
 				}else {
-
 					ret = 0;
 				}
+
 		}
 		return ret;
 	}
 
-
-
-
-
-
-
-
-
-
 	public static double scalb(final double d, final int scaleFactor) {
-
-
 		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
 			return d;
 		}
-
-
 		final long bits = java.lang.Double.doubleToLongBits(d);
 		final long exponent = bits & 9218868437227405312L;
 		final long rest = bits & -9218868437227405313L;
-
-
 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
 		return java.lang.Double.longBitsToDouble(newBits);
-
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double normalizeAngle(double a, double center) {
 		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public static double[] normalizeArray(double[] values, double normalizedSum) throws 
-	java.lang.ArithmeticException, java.lang.IllegalArgumentException {
+	public static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException {
 		if (java.lang.Double.isInfinite(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
 		}
 		if (java.lang.Double.isNaN(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
 		}
 		double sum = 0.0;
 		final int len = values.length;
 		double[] out = new double[len];
 		for (int i = 0; i < len; i++) {
 			if (java.lang.Double.isInfinite(values[i])) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
+				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
 			}
 			if (!(java.lang.Double.isNaN(values[i]))) {
 				sum += values[i];
@@ -1163,37 +508,13 @@
 		return out;
 	}
 
-
-
-
-
-
-
-
-
-
 	public static double round(double x, int scale) {
 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double round(double x, int scale, int roundingMethod) {
 		try {
-			return new java.math.BigDecimal(
-			java.lang.Double.toString(x)).setScale(
-			scale, roundingMethod).doubleValue();
-
+			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();
 		} catch (java.lang.NumberFormatException ex) {
 			if (java.lang.Double.isInfinite(x)) {
 				return x;
@@ -1203,51 +524,17 @@
 		}
 	}
 
-
-
-
-
-
-
-
-
-
 	public static float round(float x, int scale) {
 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
 	public static float round(float x, int scale, int roundingMethod) {
 		float sign = org.apache.commons.math.util.MathUtils.indicator(x);
 		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;
 		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-	private static double roundUnscaled(double unscaled, double sign, 
-	int roundingMethod) {
+	private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {
 		switch (roundingMethod) {
 			case java.math.BigDecimal.ROUND_CEILING :
 				if (sign == (-1)) {
@@ -1266,7 +553,8 @@
 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
 				}
 				break;
-			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{
+			case java.math.BigDecimal.ROUND_HALF_DOWN :
+				{
 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
 					if (fraction > 0.5) {
@@ -1276,24 +564,26 @@
 					}
 					break;
 				}
-			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{
+			case java.math.BigDecimal.ROUND_HALF_EVEN :
+				{
 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
 					if (fraction > 0.5) {
 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else 						if (fraction < 0.5) {
+					}else
+						if (fraction < 0.5) {
 							unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
 						}else {
-
-							if (((org.apache.commons.math.util.FastMath.floor(unscaled)) / 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(
-							unscaled)) / 2.0)))) {
+							if (((org.apache.commons.math.util.FastMath.floor(unscaled)) / 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) {
 								unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
 							}else {
 								unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
 							}
 						}
+
 					break;
 				}
-			case java.math.BigDecimal.ROUND_HALF_UP : 				{
+			case java.math.BigDecimal.ROUND_HALF_UP :
+				{
 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
 					if (fraction >= 0.5) {
@@ -1312,47 +602,15 @@
 				unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
 				break;
 			default :
-				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, 
-				roundingMethod, 
-				"ROUND_CEILING", java.math.BigDecimal.ROUND_CEILING, 
-				"ROUND_DOWN", java.math.BigDecimal.ROUND_DOWN, 
-				"ROUND_FLOOR", java.math.BigDecimal.ROUND_FLOOR, 
-				"ROUND_HALF_DOWN", java.math.BigDecimal.ROUND_HALF_DOWN, 
-				"ROUND_HALF_EVEN", java.math.BigDecimal.ROUND_HALF_EVEN, 
-				"ROUND_HALF_UP", java.math.BigDecimal.ROUND_HALF_UP, 
-				"ROUND_UNNECESSARY", java.math.BigDecimal.ROUND_UNNECESSARY, 
-				"ROUND_UP", java.math.BigDecimal.ROUND_UP);}
-
+				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, "ROUND_CEILING", java.math.BigDecimal.ROUND_CEILING, "ROUND_DOWN", java.math.BigDecimal.ROUND_DOWN, "ROUND_FLOOR", java.math.BigDecimal.ROUND_FLOOR, "ROUND_HALF_DOWN", java.math.BigDecimal.ROUND_HALF_DOWN, "ROUND_HALF_EVEN", java.math.BigDecimal.ROUND_HALF_EVEN, "ROUND_HALF_UP", java.math.BigDecimal.ROUND_HALF_UP, "ROUND_UNNECESSARY", java.math.BigDecimal.ROUND_UNNECESSARY, "ROUND_UP", java.math.BigDecimal.ROUND_UP);
+		}
 		return unscaled;
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static byte sign(final byte x) {
 		return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double sign(final double x) {
 		if (java.lang.Double.isNaN(x)) {
 			return java.lang.Double.NaN;
@@ -1360,17 +618,6 @@
 		return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
 	public static float sign(final float x) {
 		if (java.lang.Float.isNaN(x)) {
 			return java.lang.Float.NaN;
@@ -1378,70 +625,22 @@
 		return x == 0.0F ? 0.0F : x > 0.0F ? 1.0F : -1.0F;
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static int sign(final int x) {
 		return x == 0 ? 0 : x > 0 ? 1 : -1;
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static long sign(final long x) {
 		return x == 0L ? 0L : x > 0L ? 1L : -1L;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
 	public static short sign(final short x) {
 		return x == (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.ZS : x > (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
 	}
 
-
-
-
-
-
-
-
 	public static double sinh(double x) {
 		return ((org.apache.commons.math.util.FastMath.exp(x)) - (org.apache.commons.math.util.FastMath.exp((-x)))) / 2.0;
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static int subAndCheck(int x, int y) {
 		long s = ((long) (x)) - ((long) (y));
 		if ((s < (java.lang.Integer.MIN_VALUE)) || (s > (java.lang.Integer.MAX_VALUE))) {
@@ -1450,16 +649,6 @@
 		return ((int) (s));
 	}
 
-
-
-
-
-
-
-
-
-
-
 	public static long subAndCheck(long a, long b) {
 		long ret;
 		java.lang.String msg = "overflow: subtract";
@@ -1470,28 +659,15 @@
 				throw new java.lang.ArithmeticException(msg);
 			}
 		}else {
-
 			ret = org.apache.commons.math.util.MathUtils.addAndCheck(a, (-b), org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
 		}
 		return ret;
 	}
 
-
-
-
-
-
-
-
-	public static int pow(final int k, int e) throws 
-	java.lang.IllegalArgumentException {
-
+	public static int pow(final int k, int e) throws java.lang.IllegalArgumentException {
 		if (e < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, 
-			k, e);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);
 		}
-
 		int result = 1;
 		int k2p = k;
 		while (e != 0) {
@@ -1501,27 +677,13 @@
 			k2p *= k2p;
 			e = e >> 1;
 		} 
-
 		return result;
-
 	}
 
-
-
-
-
-
-
-
-	public static int pow(final int k, long e) throws 
-	java.lang.IllegalArgumentException {
-
+	public static int pow(final int k, long e) throws java.lang.IllegalArgumentException {
 		if (e < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, 
-			k, e);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);
 		}
-
 		int result = 1;
 		int k2p = k;
 		while (e != 0) {
@@ -1531,27 +693,13 @@
 			k2p *= k2p;
 			e = e >> 1;
 		} 
-
 		return result;
-
 	}
 
-
-
-
-
-
-
-
-	public static long pow(final long k, int e) throws 
-	java.lang.IllegalArgumentException {
-
+	public static long pow(final long k, int e) throws java.lang.IllegalArgumentException {
 		if (e < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, 
-			k, e);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);
 		}
-
 		long result = 1L;
 		long k2p = k;
 		while (e != 0) {
@@ -1561,27 +709,13 @@
 			k2p *= k2p;
 			e = e >> 1;
 		} 
-
 		return result;
-
 	}
 
-
-
-
-
-
-
-
-	public static long pow(final long k, long e) throws 
-	java.lang.IllegalArgumentException {
-
+	public static long pow(final long k, long e) throws java.lang.IllegalArgumentException {
 		if (e < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, 
-			k, e);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);
 		}
-
 		long result = 1L;
 		long k2p = k;
 		while (e != 0) {
@@ -1591,47 +725,20 @@
 			k2p *= k2p;
 			e = e >> 1;
 		} 
-
 		return result;
-
 	}
 
-
-
-
-
-
-
-
-	public static java.math.BigInteger pow(final java.math.BigInteger k, int e) throws 
-	java.lang.IllegalArgumentException {
-
+	public static java.math.BigInteger pow(final java.math.BigInteger k, int e) throws java.lang.IllegalArgumentException {
 		if (e < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, 
-			k, e);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);
 		}
-
 		return k.pow(e);
-
 	}
 
-
-
-
-
-
-
-
-	public static java.math.BigInteger pow(final java.math.BigInteger k, long e) throws 
-	java.lang.IllegalArgumentException {
-
+	public static java.math.BigInteger pow(final java.math.BigInteger k, long e) throws java.lang.IllegalArgumentException {
 		if (e < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, 
-			k, e);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);
 		}
-
 		java.math.BigInteger result = java.math.BigInteger.ONE;
 		java.math.BigInteger k2p = k;
 		while (e != 0) {
@@ -1641,27 +748,13 @@
 			k2p = k2p.multiply(k2p);
 			e = e >> 1;
 		} 
-
 		return result;
-
 	}
 
-
-
-
-
-
-
-
-	public static java.math.BigInteger pow(final java.math.BigInteger k, java.math.BigInteger e) throws 
-	java.lang.IllegalArgumentException {
-
+	public static java.math.BigInteger pow(final java.math.BigInteger k, java.math.BigInteger e) throws java.lang.IllegalArgumentException {
 		if ((e.compareTo(java.math.BigInteger.ZERO)) < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, 
-			k, e);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.POWER_NEGATIVE_PARAMETERS, k, e);
 		}
-
 		java.math.BigInteger result = java.math.BigInteger.ONE;
 		java.math.BigInteger k2p = k;
 		while (!(java.math.BigInteger.ZERO.equals(e))) {
@@ -1671,18 +764,9 @@
 			k2p = k2p.multiply(k2p);
 			e = e.shiftRight(1);
 		} 
-
 		return result;
-
 	}
 
-
-
-
-
-
-
-
 	public static double distance1(double[] p1, double[] p2) {
 		double sum = 0;
 		for (int i = 0; i < (p1.length); i++) {
@@ -1691,13 +775,6 @@
 		return sum;
 	}
 
-
-
-
-
-
-
-
 	public static int distance1(int[] p1, int[] p2) {
 		int sum = 0;
 		for (int i = 0; i < (p1.length); i++) {
@@ -1706,13 +783,6 @@
 		return sum;
 	}
 
-
-
-
-
-
-
-
 	public static double distance(double[] p1, double[] p2) {
 		double sum = 0;
 		for (int i = 0; i < (p1.length); i++) {
@@ -1722,13 +792,6 @@
 		return org.apache.commons.math.util.FastMath.sqrt(sum);
 	}
 
-
-
-
-
-
-
-
 	public static double distance(int[] p1, int[] p2) {
 		double sum = 0;
 		for (int i = 0; i < (p1.length); i++) {
@@ -1738,13 +801,6 @@
 		return org.apache.commons.math.util.FastMath.sqrt(sum);
 	}
 
-
-
-
-
-
-
-
 	public static double distanceInf(double[] p1, double[] p2) {
 		double max = 0;
 		for (int i = 0; i < (p1.length); i++) {
@@ -1753,13 +809,6 @@
 		return max;
 	}
 
-
-
-
-
-
-
-
 	public static int distanceInf(int[] p1, int[] p2) {
 		int max = 0;
 		for (int i = 0; i < (p1.length); i++) {
@@ -1768,28 +817,14 @@
 		return max;
 	}
 
-
-
-
 	public static enum OrderDirection {
 
 		INCREASING,
-
 		DECREASING;}
 
-
-
-
-
-
-
-
-
-
 	public static void checkOrder(double[] val, org.apache.commons.math.util.MathUtils.OrderDirection dir, boolean strict) {
 		double previous = val[0];
 		boolean ok = true;
-
 		int max = val.length;
 		for (int i = 1; i < max; i++) {
 			switch (dir) {
@@ -1816,10 +851,8 @@
 					}
 					break;
 				default :
-
-					throw new java.lang.IllegalArgumentException();}
-
-
+					throw new java.lang.IllegalArgumentException();
+			}
 			if (!ok) {
 				throw new org.apache.commons.math.exception.NonMonotonousSequenceException(val[i], previous, i, dir, strict);
 			}
@@ -1827,75 +860,10 @@
 		}
 	}
 
-
-
-
-
-
-
 	public static void checkOrder(double[] val) {
 		org.apache.commons.math.util.MathUtils.checkOrder(val, org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING, true);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	public static double safeNorm(double[] v) {
 		double rdwarf = 3.834E-20;
 		double rgiant = 1.304E19;
@@ -1950,5 +918,4 @@
 		}
 		return norm;
 	}
-
 }
\ No newline at end of file

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:168) - Time Repair Loop (s): 29.278
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - generationsexecuted: 5
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:234) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.printFinalStatus(IngredientBasedEvolutionaryRepairApproachImpl.java:123) - Total mod points: 19
[INFO ] fr.inria.astor.core.solutionsearch.spaces.ingredients.scopes.ExpressionTypeIngredientSpace.toJSON(ExpressionTypeIngredientSpace.java:233) - Storing ing JSON at /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//src/ingredients.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:253) - Storing ing JSON at /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//ingredientSpaceSize.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:254) - ingredientSpaceSize:{"allAttempts":5,"space":[{"a":79,"v":1},{"a":121,"v":3},{"a":120,"v":1}]}
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:253) - Storing ing JSON at /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//combinationsTemplatesingredientSpaceSize.json
[INFO ] fr.inria.astor.core.stats.IngredientStats.toJSON(IngredientStats.java:254) - combinationsTemplatesingredientSpaceSize:{"allAttempts":19,"space":[{"a":4,"v":2},{"a":1,"v":11},{"a":3,"v":2},{"a":0,"v":4}]}
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:184) - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 10
 
time(sec)= 29
operation: ExpressionReplaceOperator
location= org.apache.commons.math.util.MathUtils
line= 417
lineSuspiciousness= 1
lineSuspiciousness= 0
original statement= (java.lang.Double.isNaN(x))
buggy kind= CtInvocationImpl|CtBinaryOperatorImpl
fixed statement= ((org.apache.commons.math.util.MathUtils.NB) == (org.apache.commons.math.util.MathUtils.ZB))
Patch kind= CtBinaryOperatorImpl|CtBinaryOperatorImpl
generation= 5
ingredientScope= -
ingredientParent= _byte_0 == (org.apache.commons.math.util.MathUtils.ZB)
validation=|true|0|2282|[]|
diffpatch=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/util/MathUtils.java
+++ org/apache/commons/math/util/MathUtils.java
@@ -179,7 +179,7 @@
 	}
 
 	public static boolean equals(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
+		return (((NB) == (org.apache.commons.math.util.MathUtils.ZB)) && (java.lang.Double.isNaN(y))) || (x == y);
 	}
 
 	public static boolean equalsIncludingNaN(double x, double y) {


diffpatchoriginal=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/util/MathUtils.java
+++ org/apache/commons/math/util/MathUtils.java
@@ -414,8 +414,435 @@
 
 
 	public static boolean equals(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
-	}
+		return (
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 
 
@@ -425,9 +852,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));
-	}
 
 
 
@@ -438,9 +862,6 @@
 
 
 
-	public static boolean equals(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -452,9 +873,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -473,26 +891,13 @@
 
 
 
-	public static boolean equals(double x, double y, int maxUlps) {
 
 
-		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));
 
-		long xInt = java.lang.Double.doubleToLongBits(x);
-		long yInt = java.lang.Double.doubleToLongBits(y);
 
 
-		if (xInt < 0) {
-			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;
-		}
-		if (yInt < 0) {
-			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;
-		}
 
-		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;
 
-		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));
-	}
 
 
 
@@ -505,9 +910,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));
-	}
 
 
 
@@ -519,20 +921,6 @@
 
 
 
-	public static boolean equals(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -544,20 +932,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -581,18 +955,6 @@
 
 
 
-	public static long factorial(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n > 20) {
-			throw new java.lang.ArithmeticException(
-			"factorial value is too large to fit in a long");
-		}
-		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];
-	}
 
 
 
@@ -614,17 +976,6 @@
 
 
 
-	public static double factorialDouble(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.MathUtils.factorial(n);
-		}
-		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
-	}
 
 
 
@@ -639,21 +990,6 @@
 
 
 
-	public static double factorialLog(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));
-		}
-		double logSum = 0;
-		for (int i = 2; i <= n; i++) {
-			logSum += org.apache.commons.math.util.FastMath.log(i);
-		}
-		return logSum;
-	}
 
 
 
@@ -684,65 +1020,23 @@
 
 
 
-	public static int gcd(final int p, final int q) {
-		int u = p;
-		int v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 31) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-			p, q);
-		}
 
 
-		int t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1 << k);
-	}
 
 
 
@@ -773,65 +1067,23 @@
 
 
 
-	public static long gcd(final long p, final long q) {
-		long u = p;
-		long v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 63) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-			p, q);
-		}
 
 
-		long t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1L << k);
-	}
 
 
 
@@ -839,9 +1091,6 @@
 
 
 
-	public static int hash(double value) {
-		return new java.lang.Double(value).hashCode();
-	}
 
 
 
@@ -850,9 +1099,6 @@
 
 
 
-	public static int hash(double[] value) {
-		return java.util.Arrays.hashCode(value);
-	}
 
 
 
@@ -861,9 +1107,6 @@
 
 
 
-	public static byte indicator(final byte x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
-	}
 
 
 
@@ -873,12 +1116,6 @@
 
 
 
-	public static double indicator(final double x) {
-		if (java.lang.Double.isNaN(x)) {
-			return java.lang.Double.NaN;
-		}
-		return x >= 0.0 ? 1.0 : -1.0;
-	}
 
 
 
@@ -887,12 +1124,6 @@
 
 
 
-	public static float indicator(final float x) {
-		if (java.lang.Float.isNaN(x)) {
-			return java.lang.Float.NaN;
-		}
-		return x >= 0.0F ? 1.0F : -1.0F;
-	}
 
 
 
@@ -900,9 +1131,6 @@
 
 
 
-	public static int indicator(final int x) {
-		return x >= 0 ? 1 : -1;
-	}
 
 
 
@@ -910,9 +1138,6 @@
 
 
 
-	public static long indicator(final long x) {
-		return x >= 0L ? 1L : -1L;
-	}
 
 
 
@@ -921,9 +1146,6 @@
 
 
 
-	public static short indicator(final short x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
-	}
 
 
 
@@ -948,18 +1170,6 @@
 
 
 
-	public static int lcm(int a, int b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Integer.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -983,18 +1193,6 @@
 
 
 
-	public static long lcm(long a, long b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Long.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -1012,9 +1210,6 @@
 
 
 
-	public static double log(double base, double x) {
-		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));
-	}
 
 
 
@@ -1026,13 +1221,6 @@
 
 
 
-	public static int mulAndCheck(int x, int y) {
-		long m = ((long) (x)) * ((long) (y));
-		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
-			throw new java.lang.ArithmeticException("overflow: mul");
-		}
-		return ((int) (m));
-	}
 
 
 
@@ -1044,50 +1232,14 @@
 
 
 
-	public static long mulAndCheck(long a, long b) {
-		long ret;
-		java.lang.String msg = "overflow: multiply";
-		if (a > b) {
-
-			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
-		}else {
-			if (a < 0) {
-				if (b < 0) {
-
-					if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else 					if (b > 0) {
 
-						if (((java.lang.Long.MIN_VALUE) / b) <= a) {
-							ret = a * b;
-						}else {
-							throw new java.lang.ArithmeticException(msg);
 
-						}
-					}else {
 
-						ret = 0;
-					}
-			}else 				if (a > 0) {
 
 
 
 
-					if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else {
 
-					ret = 0;
-				}
-		}
-		return ret;
-	}
 
 
 
@@ -1098,23 +1250,13 @@
 
 
 
-	public static double scalb(final double d, final int scaleFactor) {
 
 
-		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
-			return d;
-		}
 
 
-		final long bits = java.lang.Double.doubleToLongBits(d);
-		final long exponent = bits & 9218868437227405312L;
-		final long rest = bits & -9218868437227405313L;
 
 
-		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
-		return java.lang.Double.longBitsToDouble(newBits);
 
-	}
 
 
 
@@ -1135,9 +1277,6 @@
 
 
 
-	public static double normalizeAngle(double a, double center) {
-		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
-	}
 
 
 
@@ -1160,40 +1299,6 @@
 
 
 
-	public static double[] normalizeArray(double[] values, double normalizedSum) throws 
-	java.lang.ArithmeticException, java.lang.IllegalArgumentException {
-		if (java.lang.Double.isInfinite(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
-		}
-		if (java.lang.Double.isNaN(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
-		}
-		double sum = 0.0;
-		final int len = values.length;
-		double[] out = new double[len];
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isInfinite(values[i])) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
-			}
-			if (!(java.lang.Double.isNaN(values[i]))) {
-				sum += values[i];
-			}
-		}
-		if (sum == 0) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
-		}
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isNaN(values[i])) {
-				out[i] = java.lang.Double.NaN;
-			}else {
-				out[i] = ((values[i]) * normalizedSum) / sum;
-			}
-		}
-		return out;
-	}
 
 
 
@@ -1204,9 +1309,6 @@
 
 
 
-	public static double round(double x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1220,20 +1322,6 @@
 
 
 
-	public static double round(double x, int scale, int roundingMethod) {
-		try {
-			return new java.math.BigDecimal(
-			java.lang.Double.toString(x)).setScale(
-			scale, roundingMethod).doubleValue();
-
-		} catch (java.lang.NumberFormatException ex) {
-			if (java.lang.Double.isInfinite(x)) {
-				return x;
-			}else {
-				return java.lang.Double.NaN;
-			}
-		}
-	}
 
 
 
@@ -1244,9 +1332,6 @@
 
 
 
-	public static float round(float x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1260,11 +1345,6 @@
 
 
 
-	public static float round(float x, int scale, int roundingMethod) {
-		float sign = org.apache.commons.math.util.MathUtils.indicator(x);
-		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;
-		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
-	}
 
 
 
@@ -1278,86 +1358,7 @@
 
 
 
-	private static double roundUnscaled(double unscaled, double sign, 
-	int roundingMethod) {
-		switch (roundingMethod) {
-			case java.math.BigDecimal.ROUND_CEILING :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_DOWN :
-				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				break;
-			case java.math.BigDecimal.ROUND_FLOOR :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{
-					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else {
-						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-					}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else 						if (fraction < 0.5) {
-							unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-						}else {
-
-							if (((org.apache.commons.math.util.FastMath.floor(unscaled)) / 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(
-							unscaled)) / 2.0)))) {
-								unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-							}else {
-								unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-							}
-						}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_HALF_UP : 				{
-					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction >= 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else {
-						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-					}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_UNNECESSARY :
-				if (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) {
-					throw new java.lang.ArithmeticException("Inexact result from rounding");
-				}
-				break;
-			case java.math.BigDecimal.ROUND_UP :
-				unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				break;
-			default :
-				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, 
-				roundingMethod, 
-				"ROUND_CEILING", java.math.BigDecimal.ROUND_CEILING, 
-				"ROUND_DOWN", java.math.BigDecimal.ROUND_DOWN, 
-				"ROUND_FLOOR", java.math.BigDecimal.ROUND_FLOOR, 
-				"ROUND_HALF_DOWN", java.math.BigDecimal.ROUND_HALF_DOWN, 
-				"ROUND_HALF_EVEN", java.math.BigDecimal.ROUND_HALF_EVEN, 
-				"ROUND_HALF_UP", java.math.BigDecimal.ROUND_HALF_UP, 
-				"ROUND_UNNECESSARY", java.math.BigDecimal.ROUND_UNNECESSARY, 
-				"ROUND_UP", java.math.BigDecimal.ROUND_UP);}
 
-		return unscaled;
-	}
 
 
 
@@ -1369,8 +1370,7 @@
 
 
 
-	public static byte sign(final byte x) {
-		return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
+		((NB) == (org.apache.commons.math.util.MathUtils.ZB)) && (java.lang.Double.isNaN(y))) || (x == y);} 	public static boolean equalsIncludingNaN(double x, double y) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} 	public static boolean equals(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equalsIncludingNaN(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equals(double x, double y, int maxUlps) { 		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); 		long xInt = java.lang.Double.doubleToLongBits(x); 		long yInt = java.lang.Double.doubleToLongBits(y); 		if (xInt < 0) { 			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} 		if (yInt < 0) { 			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} 		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; 		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} 	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { 				return false;}} 		return true;} 	public static boolean equalsIncludingNaN(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { 				return false;}} 		return true;} 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];} 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += org.apache.commons.math.util.FastMath.log(i);} 		return logSum;} 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 		int t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1 << k);} 	public static long gcd(final long p, final long q) { 		long u = p; 		long v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 63) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 		long t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1L << k);} 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	public static byte indicator(final byte x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	public static short indicator(final short x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Integer.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} 		return lcm;} 	public static long lcm(long a, long b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Long.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} 		return lcm;} 	public static double log(double base, double x) { 		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));} 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { 			if (a < 0) { 				if (b < 0) { 					if (a >= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else 					if (b > 0) { 						if (((java.lang.Long.MIN_VALUE) / b) <= a) { 							ret = a * b;}else { 							throw new java.lang.ArithmeticException(msg);}}else { 						ret = 0;}}else 				if (a > 0) { 					if (a <= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else { 					ret = 0;}} 		return ret;} 	public static double scalb(final double d, final int scaleFactor) { 		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { 			return d;} 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 9218868437227405312L; 		final long rest = bits & -9218868437227405313L; 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	public static double normalizeAngle(double a, double center) { 		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));} 	public static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { 		if (java.lang.Double.isInfinite(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} 		if (java.lang.Double.isNaN(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} 		double sum = 0.0; 		final int len = values.length; 		double[] out = new double[len]; 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isInfinite(values[i])) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} 			if (!(java.lang.Double.isNaN(values[i]))) { 				sum += values[i];}} 		if (sum == 0) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isNaN(values[i])) { 				out[i] = java.lang.Double.NaN;}else { 				out[i] = ((values[i]) * normalizedSum) / sum;}} 		return out;} 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;}else { 				return java.lang.Double.NaN;}}} 	public static float round(float x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static float round(float x, int scale, int roundingMethod) { 		float sign = org.apache.commons.math.util.MathUtils.indicator(x); 		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; 		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;} 	private static double roundUnscaled(double unscaled, double sign, int roundingMethod) { 		switch (roundingMethod) { 			case java.math.BigDecimal.ROUND_CEILING : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_DOWN : 				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); 				break; 			case java.math.BigDecimal.ROUND_FLOOR : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{ 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { 						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} 					break;} 			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{ 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else 						if (fraction < 0.5) { 							unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { 							if (((org.apache.commons.math.util.FastMath.floor(unscaled)) / 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) { 								unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { 								unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}} 					break;} 			case java.math.BigDecimal.ROUND_HALF_UP : 				{ 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY); 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction >= 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { 						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} 					break;} 			case java.math.BigDecimal.ROUND_UNNECESSARY : 				if (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) { 					throw new java.lang.ArithmeticException("Inexact result from rounding");} 				break; 			case java.math.BigDecimal.ROUND_UP : 				unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)); 				break; 			default : 				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, "ROUND_CEILING", java.math.BigDecimal.ROUND_CEILING, "ROUND_DOWN", java.math.BigDecimal.ROUND_DOWN, "ROUND_FLOOR", java.math.BigDecimal.ROUND_FLOOR, "ROUND_HALF_DOWN", java.math.BigDecimal.ROUND_HALF_DOWN, "ROUND_HALF_EVEN", java.math.BigDecimal.ROUND_HALF_EVEN, "ROUND_HALF_UP", java.math.BigDecimal.ROUND_HALF_UP, "ROUND_UNNECESSARY", java.math.BigDecimal.ROUND_UNNECESSARY, "ROUND_UP", java.math.BigDecimal.ROUND_UP);} 		return unscaled;} 	public static byte sign(final byte x) { 		return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
 	}
 
 



Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-63
TOTAL_TIME=29.278
NR_GENERATIONS=5
NR_RIGHT_COMPILATIONS=3
NR_FAILLING_COMPILATIONS=2
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND

Patch stats:

Patch 1
VARIANT_ID=10
TIME=29
VALIDATION=|true|0|2282|[]|
GENERATION=5
FOLDER_SOLUTION_CODE=/tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//bin//variant-10
--Patch Hunk #1
OPERATOR=ExpressionReplaceOperator

LOCATION=org.apache.commons.math.util.MathUtils

PATH=/tmp/Cardumen_Defects4J_Math_63/output_astor/AstorMain-Math-63/src/default/org/apache/commons/math/util/MathUtils.java

MODIFIED_FILE_PATH=/tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//src//variant-10_f/org/apache/commons/math/util/MathUtils.java

LINE=417

SUSPICIOUNESS=1

MP_RANKING=0

ORIGINAL_CODE=(java.lang.Double.isNaN(x))

BUGGY_CODE_TYPE=CtInvocationImpl|CtBinaryOperatorImpl

PATCH_HUNK_CODE=((org.apache.commons.math.util.MathUtils.NB) == (org.apache.commons.math.util.MathUtils.ZB))

PATCH_HUNK_TYPE=CtBinaryOperatorImpl|CtBinaryOperatorImpl

INGREDIENT_SCOPE=-

INGREDIENT_PARENT=_byte_0 == (org.apache.commons.math.util.MathUtils.ZB)

PATCH_DIFF_ORIG=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/util/MathUtils.java
+++ org/apache/commons/math/util/MathUtils.java
@@ -414,8 +414,435 @@
 
 
 	public static boolean equals(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);
-	}
+		return (
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 
 
@@ -425,9 +852,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));
-	}
 
 
 
@@ -438,9 +862,6 @@
 
 
 
-	public static boolean equals(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -452,9 +873,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, double eps) {
-		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);
-	}
 
 
 
@@ -473,26 +891,13 @@
 
 
 
-	public static boolean equals(double x, double y, int maxUlps) {
 
 
-		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));
 
-		long xInt = java.lang.Double.doubleToLongBits(x);
-		long yInt = java.lang.Double.doubleToLongBits(y);
 
 
-		if (xInt < 0) {
-			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;
-		}
-		if (yInt < 0) {
-			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;
-		}
 
-		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;
 
-		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));
-	}
 
 
 
@@ -505,9 +910,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) {
-		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));
-	}
 
 
 
@@ -519,20 +921,6 @@
 
 
 
-	public static boolean equals(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -544,20 +932,6 @@
 
 
 
-	public static boolean equalsIncludingNaN(double[] x, double[] y) {
-		if ((x == null) || (y == null)) {
-			return !((x == null) ^ (y == null));
-		}
-		if ((x.length) != (y.length)) {
-			return false;
-		}
-		for (int i = 0; i < (x.length); ++i) {
-			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
 
 
@@ -581,18 +955,6 @@
 
 
 
-	public static long factorial(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n > 20) {
-			throw new java.lang.ArithmeticException(
-			"factorial value is too large to fit in a long");
-		}
-		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];
-	}
 
 
 
@@ -614,17 +976,6 @@
 
 
 
-	public static double factorialDouble(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.MathUtils.factorial(n);
-		}
-		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));
-	}
 
 
 
@@ -639,21 +990,6 @@
 
 
 
-	public static double factorialLog(final int n) {
-		if (n < 0) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
-			n);
-		}
-		if (n < 21) {
-			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));
-		}
-		double logSum = 0;
-		for (int i = 2; i <= n; i++) {
-			logSum += org.apache.commons.math.util.FastMath.log(i);
-		}
-		return logSum;
-	}
 
 
 
@@ -684,65 +1020,23 @@
 
 
 
-	public static int gcd(final int p, final int q) {
-		int u = p;
-		int v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 31) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
-			p, q);
-		}
 
 
-		int t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1 << k);
-	}
 
 
 
@@ -773,65 +1067,23 @@
 
 
 
-	public static long gcd(final long p, final long q) {
-		long u = p;
-		long v = q;
-		if ((u == 0) || (v == 0)) {
-			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-				p, q);
-			}
-			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));
-		}
 
 
 
 
 
-		if (u > 0) {
-			u = -u;
-		}
-		if (v > 0) {
-			v = -v;
-		}
 
-		int k = 0;
-		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {
 
-			u /= 2;
-			v /= 2;
-			k++;
-		} 
-		if (k == 63) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
-			p, q);
-		}
 
 
-		long t = ((u & 1) == 1) ? v : -(u / 2);
 
 
-		do {
 
 
-			while ((t & 1) == 0) {
-				t /= 2;
-			} 
 
-			if (t > 0) {
-				u = -t;
-			}else {
-				v = t;
-			}
 
-			t = (v - u) / 2;
 
 
-		} while (t != 0 );
-		return (-u) * (1L << k);
-	}
 
 
 
@@ -839,9 +1091,6 @@
 
 
 
-	public static int hash(double value) {
-		return new java.lang.Double(value).hashCode();
-	}
 
 
 
@@ -850,9 +1099,6 @@
 
 
 
-	public static int hash(double[] value) {
-		return java.util.Arrays.hashCode(value);
-	}
 
 
 
@@ -861,9 +1107,6 @@
 
 
 
-	public static byte indicator(final byte x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
-	}
 
 
 
@@ -873,12 +1116,6 @@
 
 
 
-	public static double indicator(final double x) {
-		if (java.lang.Double.isNaN(x)) {
-			return java.lang.Double.NaN;
-		}
-		return x >= 0.0 ? 1.0 : -1.0;
-	}
 
 
 
@@ -887,12 +1124,6 @@
 
 
 
-	public static float indicator(final float x) {
-		if (java.lang.Float.isNaN(x)) {
-			return java.lang.Float.NaN;
-		}
-		return x >= 0.0F ? 1.0F : -1.0F;
-	}
 
 
 
@@ -900,9 +1131,6 @@
 
 
 
-	public static int indicator(final int x) {
-		return x >= 0 ? 1 : -1;
-	}
 
 
 
@@ -910,9 +1138,6 @@
 
 
 
-	public static long indicator(final long x) {
-		return x >= 0L ? 1L : -1L;
-	}
 
 
 
@@ -921,9 +1146,6 @@
 
 
 
-	public static short indicator(final short x) {
-		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;
-	}
 
 
 
@@ -948,18 +1170,6 @@
 
 
 
-	public static int lcm(int a, int b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Integer.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -983,18 +1193,6 @@
 
 
 
-	public static long lcm(long a, long b) {
-		if ((a == 0) || (b == 0)) {
-			return 0;
-		}
-		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));
-		if (lcm == (java.lang.Long.MIN_VALUE)) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-			org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
-			a, b);
-		}
-		return lcm;
-	}
 
 
 
@@ -1012,9 +1210,6 @@
 
 
 
-	public static double log(double base, double x) {
-		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));
-	}
 
 
 
@@ -1026,13 +1221,6 @@
 
 
 
-	public static int mulAndCheck(int x, int y) {
-		long m = ((long) (x)) * ((long) (y));
-		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {
-			throw new java.lang.ArithmeticException("overflow: mul");
-		}
-		return ((int) (m));
-	}
 
 
 
@@ -1044,50 +1232,14 @@
 
 
 
-	public static long mulAndCheck(long a, long b) {
-		long ret;
-		java.lang.String msg = "overflow: multiply";
-		if (a > b) {
-
-			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);
-		}else {
-			if (a < 0) {
-				if (b < 0) {
-
-					if (a >= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else 					if (b > 0) {
 
-						if (((java.lang.Long.MIN_VALUE) / b) <= a) {
-							ret = a * b;
-						}else {
-							throw new java.lang.ArithmeticException(msg);
 
-						}
-					}else {
 
-						ret = 0;
-					}
-			}else 				if (a > 0) {
 
 
 
 
-					if (a <= ((java.lang.Long.MAX_VALUE) / b)) {
-						ret = a * b;
-					}else {
-						throw new java.lang.ArithmeticException(msg);
-					}
-				}else {
 
-					ret = 0;
-				}
-		}
-		return ret;
-	}
 
 
 
@@ -1098,23 +1250,13 @@
 
 
 
-	public static double scalb(final double d, final int scaleFactor) {
 
 
-		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {
-			return d;
-		}
 
 
-		final long bits = java.lang.Double.doubleToLongBits(d);
-		final long exponent = bits & 9218868437227405312L;
-		final long rest = bits & -9218868437227405313L;
 
 
-		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));
-		return java.lang.Double.longBitsToDouble(newBits);
 
-	}
 
 
 
@@ -1135,9 +1277,6 @@
 
 
 
-	public static double normalizeAngle(double a, double center) {
-		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));
-	}
 
 
 
@@ -1160,40 +1299,6 @@
 
 
 
-	public static double[] normalizeArray(double[] values, double normalizedSum) throws 
-	java.lang.ArithmeticException, java.lang.IllegalArgumentException {
-		if (java.lang.Double.isInfinite(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
-		}
-		if (java.lang.Double.isNaN(normalizedSum)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
-		}
-		double sum = 0.0;
-		final int len = values.length;
-		double[] out = new double[len];
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isInfinite(values[i])) {
-				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
-			}
-			if (!(java.lang.Double.isNaN(values[i]))) {
-				sum += values[i];
-			}
-		}
-		if (sum == 0) {
-			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
-		}
-		for (int i = 0; i < len; i++) {
-			if (java.lang.Double.isNaN(values[i])) {
-				out[i] = java.lang.Double.NaN;
-			}else {
-				out[i] = ((values[i]) * normalizedSum) / sum;
-			}
-		}
-		return out;
-	}
 
 
 
@@ -1204,9 +1309,6 @@
 
 
 
-	public static double round(double x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1220,20 +1322,6 @@
 
 
 
-	public static double round(double x, int scale, int roundingMethod) {
-		try {
-			return new java.math.BigDecimal(
-			java.lang.Double.toString(x)).setScale(
-			scale, roundingMethod).doubleValue();
-
-		} catch (java.lang.NumberFormatException ex) {
-			if (java.lang.Double.isInfinite(x)) {
-				return x;
-			}else {
-				return java.lang.Double.NaN;
-			}
-		}
-	}
 
 
 
@@ -1244,9 +1332,6 @@
 
 
 
-	public static float round(float x, int scale) {
-		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);
-	}
 
 
 
@@ -1260,11 +1345,6 @@
 
 
 
-	public static float round(float x, int scale, int roundingMethod) {
-		float sign = org.apache.commons.math.util.MathUtils.indicator(x);
-		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;
-		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;
-	}
 
 
 
@@ -1278,86 +1358,7 @@
 
 
 
-	private static double roundUnscaled(double unscaled, double sign, 
-	int roundingMethod) {
-		switch (roundingMethod) {
-			case java.math.BigDecimal.ROUND_CEILING :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_DOWN :
-				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				break;
-			case java.math.BigDecimal.ROUND_FLOOR :
-				if (sign == (-1)) {
-					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				}else {
-					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
-				}
-				break;
-			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{
-					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else {
-						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-					}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction > 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else 						if (fraction < 0.5) {
-							unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-						}else {
-
-							if (((org.apache.commons.math.util.FastMath.floor(unscaled)) / 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(
-							unscaled)) / 2.0)))) {
-								unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-							}else {
-								unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-							}
-						}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_HALF_UP : 				{
-					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
-					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));
-					if (fraction >= 0.5) {
-						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
-					}else {
-						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
-					}
-					break;
-				}
-			case java.math.BigDecimal.ROUND_UNNECESSARY :
-				if (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) {
-					throw new java.lang.ArithmeticException("Inexact result from rounding");
-				}
-				break;
-			case java.math.BigDecimal.ROUND_UP :
-				unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
-				break;
-			default :
-				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-				org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, 
-				roundingMethod, 
-				"ROUND_CEILING", java.math.BigDecimal.ROUND_CEILING, 
-				"ROUND_DOWN", java.math.BigDecimal.ROUND_DOWN, 
-				"ROUND_FLOOR", java.math.BigDecimal.ROUND_FLOOR, 
-				"ROUND_HALF_DOWN", java.math.BigDecimal.ROUND_HALF_DOWN, 
-				"ROUND_HALF_EVEN", java.math.BigDecimal.ROUND_HALF_EVEN, 
-				"ROUND_HALF_UP", java.math.BigDecimal.ROUND_HALF_UP, 
-				"ROUND_UNNECESSARY", java.math.BigDecimal.ROUND_UNNECESSARY, 
-				"ROUND_UP", java.math.BigDecimal.ROUND_UP);}
 
-		return unscaled;
-	}
 
 
 
@@ -1369,8 +1370,7 @@
 
 
 
-	public static byte sign(final byte x) {
-		return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
+		((NB) == (org.apache.commons.math.util.MathUtils.ZB)) && (java.lang.Double.isNaN(y))) || (x == y);} 	public static boolean equalsIncludingNaN(double x, double y) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} 	public static boolean equals(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equalsIncludingNaN(double x, double y, double eps) { 		return (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} 	public static boolean equals(double x, double y, int maxUlps) { 		assert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); 		long xInt = java.lang.Double.doubleToLongBits(x); 		long yInt = java.lang.Double.doubleToLongBits(y); 		if (xInt < 0) { 			xInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} 		if (yInt < 0) { 			yInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} 		final boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; 		return (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} 	public static boolean equalsIncludingNaN(double x, double y, int maxUlps) { 		return ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { 				return false;}} 		return true;} 	public static boolean equalsIncludingNaN(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if ((x.length) != (y.length)) { 			return false;} 		for (int i = 0; i < (x.length); ++i) { 			if (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { 				return false;}} 		return true;} 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.FACTORIALS[n];} 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} 		if (n < 21) { 			return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += org.apache.commons.math.util.FastMath.log(i);} 		return logSum;} 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} 		int t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1 << k);} 	public static long gcd(final long p, final long q) { 		long u = p; 		long v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 			return (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} 		if (u > 0) { 			u = -u;} 		if (v > 0) { 			v = -v;} 		int k = 0; 		while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { 			u /= 2; 			v /= 2; 			k++;} 		if (k == 63) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} 		long t = ((u & 1) == 1) ? v : -(u / 2); 		do { 			while ((t & 1) == 0) { 				t /= 2;} 			if (t > 0) { 				u = -t;}else { 				v = t;} 			t = (v - u) / 2;} while (t != 0 ); 		return (-u) * (1L << k);} 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	public static byte indicator(final byte x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	public static short indicator(final short x) { 		return x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Integer.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} 		return lcm;} 	public static long lcm(long a, long b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		long lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a / (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); 		if (lcm == (java.lang.Long.MIN_VALUE)) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} 		return lcm;} 	public static double log(double base, double x) { 		return (org.apache.commons.math.util.FastMath.log(x)) / (org.apache.commons.math.util.FastMath.log(base));} 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { 			if (a < 0) { 				if (b < 0) { 					if (a >= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else 					if (b > 0) { 						if (((java.lang.Long.MIN_VALUE) / b) <= a) { 							ret = a * b;}else { 							throw new java.lang.ArithmeticException(msg);}}else { 						ret = 0;}}else 				if (a > 0) { 					if (a <= ((java.lang.Long.MAX_VALUE) / b)) { 						ret = a * b;}else { 						throw new java.lang.ArithmeticException(msg);}}else { 					ret = 0;}} 		return ret;} 	public static double scalb(final double d, final int scaleFactor) { 		if (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { 			return d;} 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 9218868437227405312L; 		final long rest = bits & -9218868437227405313L; 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	public static double normalizeAngle(double a, double center) { 		return a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) / (org.apache.commons.math.util.MathUtils.TWO_PI)))));} 	public static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { 		if (java.lang.Double.isInfinite(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} 		if (java.lang.Double.isNaN(normalizedSum)) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} 		double sum = 0.0; 		final int len = values.length; 		double[] out = new double[len]; 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isInfinite(values[i])) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} 			if (!(java.lang.Double.isNaN(values[i]))) { 				sum += values[i];}} 		if (sum == 0) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} 		for (int i = 0; i < len; i++) { 			if (java.lang.Double.isNaN(values[i])) { 				out[i] = java.lang.Double.NaN;}else { 				out[i] = ((values[i]) * normalizedSum) / sum;}} 		return out;} 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;}else { 				return java.lang.Double.NaN;}}} 	public static float round(float x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	public static float round(float x, int scale, int roundingMethod) { 		float sign = org.apache.commons.math.util.MathUtils.indicator(x); 		float factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; 		return ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) / factor;} 	private static double roundUnscaled(double unscaled, double sign, int roundingMethod) { 		switch (roundingMethod) { 			case java.math.BigDecimal.ROUND_CEILING : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_DOWN : 				unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); 				break; 			case java.math.BigDecimal.ROUND_FLOOR : 				if (sign == (-1)) { 					unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { 					unscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} 				break; 			case java.math.BigDecimal.ROUND_HALF_DOWN : 				{ 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { 						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} 					break;} 			case java.math.BigDecimal.ROUND_HALF_EVEN : 				{ 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction > 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else 						if (fraction < 0.5) { 							unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { 							if (((org.apache.commons.math.util.FastMath.floor(unscaled)) / 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(unscaled)) / 2.0)))) { 								unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { 								unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}} 					break;} 			case java.math.BigDecimal.ROUND_HALF_UP : 				{ 					unscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY); 					double fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); 					if (fraction >= 0.5) { 						unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { 						unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} 					break;} 			case java.math.BigDecimal.ROUND_UNNECESSARY : 				if (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) { 					throw new java.lang.ArithmeticException("Inexact result from rounding");} 				break; 			case java.math.BigDecimal.ROUND_UP : 				unscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)); 				break; 			default : 				throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, "ROUND_CEILING", java.math.BigDecimal.ROUND_CEILING, "ROUND_DOWN", java.math.BigDecimal.ROUND_DOWN, "ROUND_FLOOR", java.math.BigDecimal.ROUND_FLOOR, "ROUND_HALF_DOWN", java.math.BigDecimal.ROUND_HALF_DOWN, "ROUND_HALF_EVEN", java.math.BigDecimal.ROUND_HALF_EVEN, "ROUND_HALF_UP", java.math.BigDecimal.ROUND_HALF_UP, "ROUND_UNNECESSARY", java.math.BigDecimal.ROUND_UNNECESSARY, "ROUND_UP", java.math.BigDecimal.ROUND_UP);} 		return unscaled;} 	public static byte sign(final byte x) { 		return x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;
 	}
 
 



[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:103) - Storing ing JSON at /tmp/Cardumen_Defects4J_Math_63/./output_astor/AstorMain-Math-63//astor_output.json
[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:104) - astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":3,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Math-63","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":2,"NR_GENERATIONS":5,"TOTAL_TIME":29.278,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"10","VALIDATION":"|true|0|2282|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.util.MathUtils","PATH":"\\\/tmp\\\/Cardumen_Defects4J_Math_63\\\/output_astor\\\/AstorMain-Math-63\\\/src\\\/default\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtils.java","INGREDIENT_SCOPE":"-","SUSPICIOUNESS":"1","INGREDIENT_PARENT":"_byte_0 == (org.apache.commons.math.util.MathUtils.ZB)","PATCH_HUNK_TYPE":"CtBinaryOperatorImpl|CtBinaryOperatorImpl","ORIGINAL_CODE":"(java.lang.Double.isNaN(x))","BUGGY_CODE_TYPE":"CtInvocationImpl|CtBinaryOperatorImpl","OPERATOR":"ExpressionReplaceOperator","MODIFIED_FILE_PATH":"\\\/tmp\\\/Cardumen_Defects4J_Math_63\\\/.\\\/output_astor\\\/AstorMain-Math-63\\\/\\\/src\\\/\\\/variant-10_f\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtils.java","LINE":"417","MP_RANKING":"0","PATCH_HUNK_CODE":"((org.apache.commons.math.util.MathUtils.NB) == (org.apache.commons.math.util.MathUtils.ZB))"}],"TIME":"29","GENERATION":"5","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/Cardumen_Defects4J_Math_63\\\/.\\\/output_astor\\\/AstorMain-Math-63\\\/\\\/bin\\\/\\\/variant-10","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtils.java\\n+++ org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtils.java\\n@@ -414,8 +414,435 @@\\n \\n \\n \\tpublic static boolean equals(double x, double y) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (x == y);\\n-\\t}\\n+\\t\\treturn (\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n \\n \\n \\n@@ -425,9 +852,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));\\n-\\t}\\n \\n \\n \\n@@ -438,9 +862,6 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double x, double y, double eps) {\\n-\\t\\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\\n-\\t}\\n \\n \\n \\n@@ -452,9 +873,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) {\\n-\\t\\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);\\n-\\t}\\n \\n \\n \\n@@ -473,26 +891,13 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double x, double y, int maxUlps) {\\n \\n \\n-\\t\\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP));\\n \\n-\\t\\tlong xInt = java.lang.Double.doubleToLongBits(x);\\n-\\t\\tlong yInt = java.lang.Double.doubleToLongBits(y);\\n \\n \\n-\\t\\tif (xInt < 0) {\\n-\\t\\t\\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;\\n-\\t\\t}\\n-\\t\\tif (yInt < 0) {\\n-\\t\\t\\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;\\n-\\t\\t}\\n \\n-\\t\\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps;\\n \\n-\\t\\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));\\n-\\t}\\n \\n \\n \\n@@ -505,9 +910,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) {\\n-\\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));\\n-\\t}\\n \\n \\n \\n@@ -519,20 +921,6 @@\\n \\n \\n \\n-\\tpublic static boolean equals(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif ((x.length) != (y.length)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < (x.length); ++i) {\\n-\\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n \\n \\n \\n@@ -544,20 +932,6 @@\\n \\n \\n \\n-\\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif ((x.length) != (y.length)) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < (x.length); ++i) {\\n-\\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n \\n \\n \\n@@ -581,18 +955,6 @@\\n \\n \\n \\n-\\tpublic static long factorial(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n > 20) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\n-\\t\\t\\t\\\"factorial value is too large to fit in a long\\\");\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];\\n-\\t}\\n \\n \\n \\n@@ -614,17 +976,6 @@\\n \\n \\n \\n-\\tpublic static double factorialDouble(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));\\n-\\t}\\n \\n \\n \\n@@ -639,21 +990,6 @@\\n \\n \\n \\n-\\tpublic static double factorialLog(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));\\n-\\t\\t}\\n-\\t\\tdouble logSum = 0;\\n-\\t\\tfor (int i = 2; i <= n; i++) {\\n-\\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);\\n-\\t\\t}\\n-\\t\\treturn logSum;\\n-\\t}\\n \\n \\n \\n@@ -684,65 +1020,23 @@\\n \\n \\n \\n-\\tpublic static int gcd(final int p, final int q) {\\n-\\t\\tint u = p;\\n-\\t\\tint v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\\n-\\t\\t}\\n \\n \\n \\n \\n \\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n \\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\\n \\n-\\t\\t\\tu \\\/= 2;\\n-\\t\\t\\tv \\\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 31) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n \\n \\n-\\t\\tint t = ((u & 1) == 1) ? v : -(u \\\/ 2);\\n \\n \\n-\\t\\tdo {\\n \\n \\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\\/= 2;\\n-\\t\\t\\t} \\n \\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tt = (v - u) \\\/ 2;\\n \\n \\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1 << k);\\n-\\t}\\n \\n \\n \\n@@ -773,65 +1067,23 @@\\n \\n \\n \\n-\\tpublic static long gcd(final long p, final long q) {\\n-\\t\\tlong u = p;\\n-\\t\\tlong v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));\\n-\\t\\t}\\n \\n \\n \\n \\n \\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n \\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {\\n \\n-\\t\\t\\tu \\\/= 2;\\n-\\t\\t\\tv \\\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 63) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n \\n \\n-\\t\\tlong t = ((u & 1) == 1) ? v : -(u \\\/ 2);\\n \\n \\n-\\t\\tdo {\\n \\n \\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\\/= 2;\\n-\\t\\t\\t} \\n \\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n \\n-\\t\\t\\tt = (v - u) \\\/ 2;\\n \\n \\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1L << k);\\n-\\t}\\n \\n \\n \\n@@ -839,9 +1091,6 @@\\n \\n \\n \\n-\\tpublic static int hash(double value) {\\n-\\t\\treturn new java.lang.Double(value).hashCode();\\n-\\t}\\n \\n \\n \\n@@ -850,9 +1099,6 @@\\n \\n \\n \\n-\\tpublic static int hash(double[] value) {\\n-\\t\\treturn java.util.Arrays.hashCode(value);\\n-\\t}\\n \\n \\n \\n@@ -861,9 +1107,6 @@\\n \\n \\n \\n-\\tpublic static byte indicator(final byte x) {\\n-\\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n-\\t}\\n \\n \\n \\n@@ -873,12 +1116,6 @@\\n \\n \\n \\n-\\tpublic static double indicator(final double x) {\\n-\\t\\tif (java.lang.Double.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0 ? 1.0 : -1.0;\\n-\\t}\\n \\n \\n \\n@@ -887,12 +1124,6 @@\\n \\n \\n \\n-\\tpublic static float indicator(final float x) {\\n-\\t\\tif (java.lang.Float.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Float.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0F ? 1.0F : -1.0F;\\n-\\t}\\n \\n \\n \\n@@ -900,9 +1131,6 @@\\n \\n \\n \\n-\\tpublic static int indicator(final int x) {\\n-\\t\\treturn x >= 0 ? 1 : -1;\\n-\\t}\\n \\n \\n \\n@@ -910,9 +1138,6 @@\\n \\n \\n \\n-\\tpublic static long indicator(final long x) {\\n-\\t\\treturn x >= 0L ? 1L : -1L;\\n-\\t}\\n \\n \\n \\n@@ -921,9 +1146,6 @@\\n \\n \\n \\n-\\tpublic static short indicator(final short x) {\\n-\\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\\n-\\t}\\n \\n \\n \\n@@ -948,18 +1170,6 @@\\n \\n \\n \\n-\\tpublic static int lcm(int a, int b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\\n-\\t\\tif (lcm == (java.lang.Integer.MIN_VALUE)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n \\n \\n \\n@@ -983,18 +1193,6 @@\\n \\n \\n \\n-\\tpublic static long lcm(long a, long b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b));\\n-\\t\\tif (lcm == (java.lang.Long.MIN_VALUE)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n \\n \\n \\n@@ -1012,9 +1210,6 @@\\n \\n \\n \\n-\\tpublic static double log(double base, double x) {\\n-\\t\\treturn (org.apache.commons.math.util.FastMath.log(x)) \\\/ (org.apache.commons.math.util.FastMath.log(base));\\n-\\t}\\n \\n \\n \\n@@ -1026,13 +1221,6 @@\\n \\n \\n \\n-\\tpublic static int mulAndCheck(int x, int y) {\\n-\\t\\tlong m = ((long) (x)) * ((long) (y));\\n-\\t\\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");\\n-\\t\\t}\\n-\\t\\treturn ((int) (m));\\n-\\t}\\n \\n \\n \\n@@ -1044,50 +1232,14 @@\\n \\n \\n \\n-\\tpublic static long mulAndCheck(long a, long b) {\\n-\\t\\tlong ret;\\n-\\t\\tjava.lang.String msg = \\\"overflow: multiply\\\";\\n-\\t\\tif (a > b) {\\n-\\n-\\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);\\n-\\t\\t}else {\\n-\\t\\t\\tif (a < 0) {\\n-\\t\\t\\t\\tif (b < 0) {\\n-\\n-\\t\\t\\t\\t\\tif (a >= ((java.lang.Long.MAX_VALUE) \\\/ b)) {\\n-\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else \\t\\t\\t\\t\\tif (b > 0) {\\n \\n-\\t\\t\\t\\t\\t\\tif (((java.lang.Long.MIN_VALUE) \\\/ b) <= a) {\\n-\\t\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n \\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\t\\tret = 0;\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t}else \\t\\t\\t\\tif (a > 0) {\\n \\n \\n \\n \\n-\\t\\t\\t\\t\\tif (a <= ((java.lang.Long.MAX_VALUE) \\\/ b)) {\\n-\\t\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t}else {\\n \\n-\\t\\t\\t\\t\\tret = 0;\\n-\\t\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn ret;\\n-\\t}\\n \\n \\n \\n@@ -1098,23 +1250,13 @@\\n \\n \\n \\n-\\tpublic static double scalb(final double d, final int scaleFactor) {\\n \\n \\n-\\t\\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) {\\n-\\t\\t\\treturn d;\\n-\\t\\t}\\n \\n \\n-\\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d);\\n-\\t\\tfinal long exponent = bits & 9218868437227405312L;\\n-\\t\\tfinal long rest = bits & -9218868437227405313L;\\n \\n \\n-\\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));\\n-\\t\\treturn java.lang.Double.longBitsToDouble(newBits);\\n \\n-\\t}\\n \\n \\n \\n@@ -1135,9 +1277,6 @@\\n \\n \\n \\n-\\tpublic static double normalizeAngle(double a, double center) {\\n-\\t\\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) \\\/ (org.apache.commons.math.util.MathUtils.TWO_PI)))));\\n-\\t}\\n \\n \\n \\n@@ -1160,40 +1299,6 @@\\n \\n \\n \\n-\\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws \\n-\\tjava.lang.ArithmeticException, java.lang.IllegalArgumentException {\\n-\\t\\tif (java.lang.Double.isInfinite(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isNaN(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);\\n-\\t\\t}\\n-\\t\\tdouble sum = 0.0;\\n-\\t\\tfinal int len = values.length;\\n-\\t\\tdouble[] out = new double[len];\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(values[i])) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\\n-\\t\\t\\t}\\n-\\t\\t\\tif (!(java.lang.Double.isNaN(values[i]))) {\\n-\\t\\t\\t\\tsum += values[i];\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tif (sum == 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(values[i])) {\\n-\\t\\t\\t\\tout[i] = java.lang.Double.NaN;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\tout[i] = ((values[i]) * normalizedSum) \\\/ sum;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn out;\\n-\\t}\\n \\n \\n \\n@@ -1204,9 +1309,6 @@\\n \\n \\n \\n-\\tpublic static double round(double x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n \\n \\n \\n@@ -1220,20 +1322,6 @@\\n \\n \\n \\n-\\tpublic static double round(double x, int scale, int roundingMethod) {\\n-\\t\\ttry {\\n-\\t\\t\\treturn new java.math.BigDecimal(\\n-\\t\\t\\tjava.lang.Double.toString(x)).setScale(\\n-\\t\\t\\tscale, roundingMethod).doubleValue();\\n-\\n-\\t\\t} catch (java.lang.NumberFormatException ex) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(x)) {\\n-\\t\\t\\t\\treturn x;\\n-\\t\\t\\t}else {\\n-\\t\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n \\n \\n \\n@@ -1244,9 +1332,6 @@\\n \\n \\n \\n-\\tpublic static float round(float x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n \\n \\n \\n@@ -1260,11 +1345,6 @@\\n \\n \\n \\n-\\tpublic static float round(float x, int scale, int roundingMethod) {\\n-\\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x);\\n-\\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;\\n-\\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) \\\/ factor;\\n-\\t}\\n \\n \\n \\n@@ -1278,86 +1358,7 @@\\n \\n \\n \\n-\\tprivate static double roundUnscaled(double unscaled, double sign, \\n-\\tint roundingMethod) {\\n-\\t\\tswitch (roundingMethod) {\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else \\t\\t\\t\\t\\t\\tif (fraction < 0.5) {\\n-\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t\\t}else {\\n-\\n-\\t\\t\\t\\t\\t\\t\\tif (((org.apache.commons.math.util.FastMath.floor(unscaled)) \\\/ 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(\\n-\\t\\t\\t\\t\\t\\t\\tunscaled)) \\\/ 2.0)))) {\\n-\\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled));\\n-\\t\\t\\t\\t\\tif (fraction >= 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY :\\n-\\t\\t\\t\\tif (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) {\\n-\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UP :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tdefault :\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, \\n-\\t\\t\\t\\troundingMethod, \\n-\\t\\t\\t\\t\\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\n-\\t\\t\\t\\t\\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\n-\\t\\t\\t\\t\\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\n-\\t\\t\\t\\t\\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);}\\n \\n-\\t\\treturn unscaled;\\n-\\t}\\n \\n \\n \\n@@ -1369,8 +1370,7 @@\\n \\n \\n \\n-\\tpublic static byte sign(final byte x) {\\n-\\t\\treturn x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n+\\t\\t((NB) == (org.apache.commons.math.util.MathUtils.ZB)) && (java.lang.Double.isNaN(y))) || (x == y);} \\tpublic static boolean equalsIncludingNaN(double x, double y) { \\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, 1));} \\tpublic static boolean equals(double x, double y, double eps) { \\t\\treturn (org.apache.commons.math.util.MathUtils.equals(x, y, 1)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) { \\t\\treturn (org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y)) || ((org.apache.commons.math.util.FastMath.abs((y - x))) <= eps);} \\tpublic static boolean equals(double x, double y, int maxUlps) { \\t\\tassert (maxUlps > 0) && (maxUlps < (org.apache.commons.math.util.MathUtils.NAN_GAP)); \\t\\tlong xInt = java.lang.Double.doubleToLongBits(x); \\t\\tlong yInt = java.lang.Double.doubleToLongBits(y); \\t\\tif (xInt < 0) { \\t\\t\\txInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - xInt;} \\t\\tif (yInt < 0) { \\t\\t\\tyInt = (org.apache.commons.math.util.MathUtils.SGN_MASK) - yInt;} \\t\\tfinal boolean isEqual = (org.apache.commons.math.util.FastMath.abs((xInt - yInt))) <= maxUlps; \\t\\treturn (isEqual && (!(java.lang.Double.isNaN(x)))) && (!(java.lang.Double.isNaN(y)));} \\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) { \\t\\treturn ((java.lang.Double.isNaN(x)) && (java.lang.Double.isNaN(y))) || (org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps));} \\tpublic static boolean equals(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif ((x.length) != (y.length)) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < (x.length); ++i) { \\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equals(x[i], y[i]))) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif ((x.length) != (y.length)) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < (x.length); ++i) { \\t\\t\\tif (!(org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i]))) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static long factorial(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n > 20) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"factorial value is too large to fit in a long\\\");} \\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];} \\tpublic static double factorialDouble(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);} \\t\\treturn org.apache.commons.math.util.FastMath.floor(((org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n))) + 0.5));} \\tpublic static double factorialLog(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} \\t\\tdouble logSum = 0; \\t\\tfor (int i = 2; i <= n; i++) { \\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);} \\t\\treturn logSum;} \\tpublic static int gcd(final int p, final int q) { \\t\\tint u = p; \\t\\tint v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == (java.lang.Integer.MIN_VALUE)) || (v == (java.lang.Integer.MIN_VALUE))) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { \\t\\t\\tu \\\/= 2; \\t\\t\\tv \\\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 31) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\tint t = ((u & 1) == 1) ? v : -(u \\\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;}else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1 << k);} \\tpublic static long gcd(final long p, final long q) { \\t\\tlong u = p; \\t\\tlong v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == (java.lang.Long.MIN_VALUE)) || (v == (java.lang.Long.MIN_VALUE))) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\t\\treturn (org.apache.commons.math.util.FastMath.abs(u)) + (org.apache.commons.math.util.FastMath.abs(v));} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { \\t\\t\\tu \\\/= 2; \\t\\t\\tv \\\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 63) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\tlong t = ((u & 1) == 1) ? v : -(u \\\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;}else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1L << k);} \\tpublic static int hash(double value) { \\t\\treturn new java.lang.Double(value).hashCode();} \\tpublic static int hash(double[] value) { \\t\\treturn java.util.Arrays.hashCode(value);} \\tpublic static byte indicator(final byte x) { \\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} \\tpublic static double indicator(final double x) { \\t\\tif (java.lang.Double.isNaN(x)) { \\t\\t\\treturn java.lang.Double.NaN;} \\t\\treturn x >= 0.0 ? 1.0 : -1.0;} \\tpublic static float indicator(final float x) { \\t\\tif (java.lang.Float.isNaN(x)) { \\t\\t\\treturn java.lang.Float.NaN;} \\t\\treturn x >= 0.0F ? 1.0F : -1.0F;} \\tpublic static int indicator(final int x) { \\t\\treturn x >= 0 ? 1 : -1;} \\tpublic static long indicator(final long x) { \\t\\treturn x >= 0L ? 1L : -1L;} \\tpublic static short indicator(final short x) { \\t\\treturn x >= (org.apache.commons.math.util.MathUtils.ZS) ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} \\tpublic static int lcm(int a, int b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \\t\\tif (lcm == (java.lang.Integer.MIN_VALUE)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static long lcm(long a, long b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck((a \\\/ (org.apache.commons.math.util.MathUtils.gcd(a, b))), b)); \\t\\tif (lcm == (java.lang.Long.MIN_VALUE)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static double log(double base, double x) { \\t\\treturn (org.apache.commons.math.util.FastMath.log(x)) \\\/ (org.apache.commons.math.util.FastMath.log(base));} \\tpublic static int mulAndCheck(int x, int y) { \\t\\tlong m = ((long) (x)) * ((long) (y)); \\t\\tif ((m < (java.lang.Integer.MIN_VALUE)) || (m > (java.lang.Integer.MAX_VALUE))) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");} \\t\\treturn ((int) (m));} \\tpublic static long mulAndCheck(long a, long b) { \\t\\tlong ret; \\t\\tjava.lang.String msg = \\\"overflow: multiply\\\"; \\t\\tif (a > b) { \\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);}else { \\t\\t\\tif (a < 0) { \\t\\t\\t\\tif (b < 0) { \\t\\t\\t\\t\\tif (a >= ((java.lang.Long.MAX_VALUE) \\\/ b)) { \\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else \\t\\t\\t\\t\\tif (b > 0) { \\t\\t\\t\\t\\t\\tif (((java.lang.Long.MIN_VALUE) \\\/ b) <= a) { \\t\\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else { \\t\\t\\t\\t\\t\\tret = 0;}}else \\t\\t\\t\\tif (a > 0) { \\t\\t\\t\\t\\tif (a <= ((java.lang.Long.MAX_VALUE) \\\/ b)) { \\t\\t\\t\\t\\t\\tret = a * b;}else { \\t\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}}else { \\t\\t\\t\\t\\tret = 0;}} \\t\\treturn ret;} \\tpublic static double scalb(final double d, final int scaleFactor) { \\t\\tif (((d == 0) || (java.lang.Double.isNaN(d))) || (java.lang.Double.isInfinite(d))) { \\t\\t\\treturn d;} \\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d); \\t\\tfinal long exponent = bits & 9218868437227405312L; \\t\\tfinal long rest = bits & -9218868437227405313L; \\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); \\t\\treturn java.lang.Double.longBitsToDouble(newBits);} \\tpublic static double normalizeAngle(double a, double center) { \\t\\treturn a - ((org.apache.commons.math.util.MathUtils.TWO_PI) * (org.apache.commons.math.util.FastMath.floor((((a + (org.apache.commons.math.util.FastMath.PI)) - center) \\\/ (org.apache.commons.math.util.MathUtils.TWO_PI)))));} \\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { \\t\\tif (java.lang.Double.isInfinite(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} \\t\\tif (java.lang.Double.isNaN(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} \\t\\tdouble sum = 0.0; \\t\\tfinal int len = values.length; \\t\\tdouble[] out = new double[len]; \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isInfinite(values[i])) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} \\t\\t\\tif (!(java.lang.Double.isNaN(values[i]))) { \\t\\t\\t\\tsum += values[i];}} \\t\\tif (sum == 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isNaN(values[i])) { \\t\\t\\t\\tout[i] = java.lang.Double.NaN;}else { \\t\\t\\t\\tout[i] = ((values[i]) * normalizedSum) \\\/ sum;}} \\t\\treturn out;} \\tpublic static double round(double x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static double round(double x, int scale, int roundingMethod) { \\t\\ttry { \\t\\t\\treturn new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { \\t\\t\\tif (java.lang.Double.isInfinite(x)) { \\t\\t\\t\\treturn x;}else { \\t\\t\\t\\treturn java.lang.Double.NaN;}}} \\tpublic static float round(float x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static float round(float x, int scale, int roundingMethod) { \\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x); \\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; \\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled((x * factor), sign, roundingMethod))) \\\/ factor;} \\tprivate static double roundUnscaled(double unscaled, double sign, int roundingMethod) { \\t\\tswitch (roundingMethod) { \\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));}else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));}else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else \\t\\t\\t\\t\\t\\tif (fraction < 0.5) { \\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { \\t\\t\\t\\t\\t\\t\\tif (((org.apache.commons.math.util.FastMath.floor(unscaled)) \\\/ 2.0) == (org.apache.commons.math.util.FastMath.floor(((java.lang.Math.floor(unscaled)) \\\/ 2.0)))) { \\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);}else { \\t\\t\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - (org.apache.commons.math.util.FastMath.floor(unscaled)); \\t\\t\\t\\t\\tif (fraction >= 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);}else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY : \\t\\t\\t\\tif (unscaled != (org.apache.commons.math.util.FastMath.floor(unscaled))) { \\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_UP : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tdefault : \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, \\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);} \\t\\treturn unscaled;} \\tpublic static byte sign(final byte x) { \\t\\treturn x == (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.ZB : x > (org.apache.commons.math.util.MathUtils.ZB) ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n \\t}\\n \\n \\n\\n"}]}
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:200) - Time Total(s): 105.153
230.22user 3.75system 1:46.17elapsed 220%CPU (0avgtext+0avgdata 1328284maxresident)k
96112inputs+30184outputs (31major+924167minor)pagefaults 0swaps


Node: suno-30.sophia.grid5000.fr



Date: Fri Dec 28 15:08:26 EST 2018

