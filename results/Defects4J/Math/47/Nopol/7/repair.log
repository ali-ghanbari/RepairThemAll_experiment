cd /tmp/Nopol_Defects4J_Math_47;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/main/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/Nopol_Defects4J_Math_47/target/classes/:/tmp/Nopol_Defects4J_Math_47/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
23:07:36.568 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
23:07:36.573 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Math_47/target/classes/, file:/tmp/Nopol_Defects4J_Math_47/target/test-classes/, file:/tmp/Nopol_Defects4J_Math_47/target/classes/, file:/tmp/Nopol_Defects4J_Math_47/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
23:07:36.573 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
23:07:36.574 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
23:07:36.577 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
23:07:36.578 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 24
23:07:36.585 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 404 MB
23:07:36.585 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
23:07:36.585 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 483 MB
23:07:36.585 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
23:07:36.586 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
23:07:36.586 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
23:10:43.840 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
23:10:43.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:1179 which is executed by 2 tests
-1679819631
23:10:44.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
23:10:44.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:257 which is executed by 4 tests
-1679819631
23:10:44.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:44.764 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (106 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:46.158 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:46.162 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:46.168 [pool-7-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:46.171 [pool-8-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:46.172 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:46.172 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:46.173 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:257.
23:10:46.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
23:10:46.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:583 which is executed by 3 tests
-1679819631
23:10:46.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
23:10:46.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:256 which is executed by 15 tests
-1679819631
23:10:46.541 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:46.634 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (81 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:47.197 [pool-11-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:47.200 [pool-12-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:47.206 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:47.209 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:47.210 [pool-9-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:47.210 [pool-9-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:47.210 [pool-9-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:256.
23:10:47.210 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:47.615 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (389 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:48.075 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:48.078 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:48.083 [pool-19-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:48.085 [pool-20-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:48.086 [pool-15-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:48.086 [pool-15-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:48.086 [pool-15-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:256.
23:10:48.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
23:10:48.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:579 which is executed by 4 tests
-1679819631
23:10:48.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:48.294 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:48.637 [pool-23-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:48.640 [pool-24-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:48.646 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:48.650 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:48.651 [pool-21-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:48.651 [pool-21-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:48.651 [pool-21-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:579.
23:10:48.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:48.711 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:49.039 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:49.041 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:49.044 [pool-31-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:49.045 [pool-32-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:49.046 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:49.047 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:49.047 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:579.
23:10:49.047 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
23:10:49.047 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2994 which is executed by 4 tests
1033054629
23:10:49.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:49.309 [pool-34-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:49.920 [pool-35-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (35 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:49.922 [pool-36-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:49.925 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:49.927 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:49.928 [pool-33-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:49.928 [pool-33-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:49.928 [pool-33-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2994.
23:10:49.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
23:10:49.929 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:252 which is executed by 17 tests
-1679819631
23:10:50.099 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:50.172 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (64 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:50.540 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:50.542 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:50.545 [pool-43-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:50.546 [pool-44-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:50.547 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:50.547 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:50.548 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:252.
23:10:50.548 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:50.615 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (60 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:50.934 [pool-47-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:50.937 [pool-48-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:50.940 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:50.941 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:50.941 [pool-45-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:50.942 [pool-45-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:50.942 [pool-45-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:252.
23:10:50.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
23:10:50.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:251 which is executed by 17 tests
-1679819631
23:10:51.080 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:51.146 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:51.425 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:51.426 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:51.429 [pool-55-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:51.430 [pool-56-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:51.431 [pool-51-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:51.431 [pool-51-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:51.431 [pool-51-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:251.
23:10:51.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
23:10:51.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:270 which is executed by 5 tests
-1679819631
23:10:51.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:51.626 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:51.859 [pool-57-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:162: error: missing return statement
    }
    ^
23:10:51.875 [pool-57-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Complex implements java.io.Serializable , org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex> {
    public static final org.apache.commons.math.complex.Complex I = new org.apache.commons.math.complex.Complex(0.0, 1.0);

    public static final org.apache.commons.math.complex.Complex NaN = new org.apache.commons.math.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);

    public static final org.apache.commons.math.complex.Complex INF = new org.apache.commons.math.complex.Complex(java.lang.Double.POSITIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY);

    public static final org.apache.commons.math.complex.Complex ONE = new org.apache.commons.math.complex.Complex(1.0, 0.0);

    public static final org.apache.commons.math.complex.Complex ZERO = new org.apache.commons.math.complex.Complex(0.0, 0.0);

    private static final long serialVersionUID = -6195664516687396620L;

    private final double imaginary;

    private final double real;

    private final transient boolean isNaN;

    private final transient boolean isInfinite;

    public Complex(double real) {
        this(real, 0.0);
    }

    public Complex(double real, double imaginary) {
        this.real = real;
        this.imaginary = imaginary;
        isNaN = (java.lang.Double.isNaN(real)) || (java.lang.Double.isNaN(imaginary));
        isInfinite = (!(isNaN)) && ((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary)));
    }

    public double abs() {
        if (isNaN) {
            return java.lang.Double.NaN;
        }
        if (isInfinite()) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((org.apache.commons.math.util.FastMath.abs(real)) < (org.apache.commons.math.util.FastMath.abs(imaginary))) {
            if ((imaginary) == 0.0) {
                return org.apache.commons.math.util.FastMath.abs(real);
            }
            double q = (real) / (imaginary);
            return (org.apache.commons.math.util.FastMath.abs(imaginary)) * (org.apache.commons.math.util.FastMath.sqrt((1 + (q * q))));
        }else {
            if ((real) == 0.0) {
                return org.apache.commons.math.util.FastMath.abs(imaginary);
            }
            double q = (imaginary) / (real);
            return (org.apache.commons.math.util.FastMath.abs(real)) * (org.apache.commons.math.util.FastMath.sqrt((1 + (q * q))));
        }
    }

    public org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex addend) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(addend);
        if ((isNaN) || (addend.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) + (addend.getReal())), ((imaginary) + (addend.getImaginary())));
    }

    public org.apache.commons.math.complex.Complex add(double addend) {
        if ((isNaN) || (java.lang.Double.isNaN(addend))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) + addend), imaginary);
    }

    public org.apache.commons.math.complex.Complex conjugate() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(real, (-(imaginary)));
    }

    public org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex divisor) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(divisor);
        if ((isNaN) || (divisor.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((divisor.getReal()) == 0.0) && ((divisor.getImaginary()) == 0.0)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if ((divisor.isInfinite()) && (!(isInfinite()))) {
            return org.apache.commons.math.complex.Complex.ZERO;
        }
        final double c = divisor.getReal();
        final double d = divisor.getImaginary();
        if ((org.apache.commons.math.util.FastMath.abs(c)) < (org.apache.commons.math.util.FastMath.abs(d))) {
            double q = c / d;
            double denominator = (c * q) + d;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(9).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.this.isInfinite",org.apache.commons.math.complex.Complex.this.isInfinite);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("d",d);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.this.isNaN",org.apache.commons.math.complex.Complex.this.isNaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ZERO",org.apache.commons.math.complex.Complex.ZERO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.serialVersionUID",org.apache.commons.math.complex.Complex.serialVersionUID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("divisor.imaginary",divisor.imaginary);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ONE",org.apache.commons.math.complex.Complex.ONE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("denominator",denominator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("divisor.real",divisor.real);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("q",q);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("divisor",divisor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("divisor.isNaN",divisor.isNaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.INF",org.apache.commons.math.complex.Complex.INF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.this.real",org.apache.commons.math.complex.Complex.this.real);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.NaN",org.apache.commons.math.complex.Complex.NaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.I",org.apache.commons.math.complex.Complex.I);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.this.imaginary",org.apache.commons.math.complex.Complex.this.imaginary);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("divisor.isInfinite",divisor.isInfinite);} catch (Exception ex1) {ex1.printStackTrace();};
                if (org.apache.commons.math.complex.Complex.ZERO!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ZERO.getReal()",org.apache.commons.math.complex.Complex.ZERO.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ZERO.getImaginary()",org.apache.commons.math.complex.Complex.ZERO.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ZERO.isNaN()",org.apache.commons.math.complex.Complex.ZERO.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ZERO.isInfinite()",org.apache.commons.math.complex.Complex.ZERO.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.INF!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.INF.getReal()",org.apache.commons.math.complex.Complex.INF.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.INF.getImaginary()",org.apache.commons.math.complex.Complex.INF.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.INF.isNaN()",org.apache.commons.math.complex.Complex.INF.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.INF.isInfinite()",org.apache.commons.math.complex.Complex.INF.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.NaN!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.NaN.getReal()",org.apache.commons.math.complex.Complex.NaN.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.NaN.getImaginary()",org.apache.commons.math.complex.Complex.NaN.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.NaN.isNaN()",org.apache.commons.math.complex.Complex.NaN.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.NaN.isInfinite()",org.apache.commons.math.complex.Complex.NaN.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.I!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.I.getReal()",org.apache.commons.math.complex.Complex.I.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.I.getImaginary()",org.apache.commons.math.complex.Complex.I.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.I.isNaN()",org.apache.commons.math.complex.Complex.I.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.I.isInfinite()",org.apache.commons.math.complex.Complex.I.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.ONE!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ONE.getReal()",org.apache.commons.math.complex.Complex.ONE.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ONE.getImaginary()",org.apache.commons.math.complex.Complex.ONE.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ONE.isNaN()",org.apache.commons.math.complex.Complex.ONE.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("org.apache.commons.math.complex.Complex.ONE.isInfinite()",org.apache.commons.math.complex.Complex.ONE.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionEnds();
            }
            if (runtimeAngelicValue)
                return createComplex(((((real) * q) + (imaginary)) / denominator), ((((imaginary) * q) - (real)) / denominator));

        }else {
            double q = d / c;
            double denominator = (d * q) + c;
            return createComplex(((((imaginary) * q) + (real)) / denominator), (((imaginary) - ((real) * q)) / denominator));
        }
    }

    public org.apache.commons.math.complex.Complex divide(double divisor) {
        if ((isNaN) || (java.lang.Double.isNaN(divisor))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (divisor == 0.0) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (java.lang.Double.isInfinite(divisor)) {
            return !(isInfinite()) ? org.apache.commons.math.complex.Complex.ZERO : org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) / divisor), ((imaginary) / divisor));
    }

    @java.lang.Override
    public boolean equals(java.lang.Object other) {
        if ((this) == other) {
            return true;
        }
        if (other instanceof org.apache.commons.math.complex.Complex) {
            org.apache.commons.math.complex.Complex c = ((org.apache.commons.math.complex.Complex) (other));
            if (c.isNaN) {
                return isNaN;
            }else {
                return ((real) == (c.real)) && ((imaginary) == (c.imaginary));
            }
        }
        return false;
    }

    @java.lang.Override
    public int hashCode() {
        if (isNaN) {
            return 7;
        }
        return 37 * ((17 * (org.apache.commons.math.util.MathUtils.hash(imaginary))) + (org.apache.commons.math.util.MathUtils.hash(real)));
    }

    public double getImaginary() {
        return imaginary;
    }

    public double getReal() {
        return real;
    }

    public boolean isNaN() {
        return isNaN;
    }

    public boolean isInfinite() {
        return isInfinite;
    }

    public org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex factor) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(factor);
        if ((isNaN) || (factor.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) {
            return org.apache.commons.math.complex.Complex.INF;
        }
        return createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), (((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));
    }

    public org.apache.commons.math.complex.Complex multiply(double factor) {
        if ((isNaN) || (java.lang.Double.isNaN(factor))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor))) {
            return org.apache.commons.math.complex.Complex.INF;
        }
        return createComplex(((real) * factor), ((imaginary) * factor));
    }

    public org.apache.commons.math.complex.Complex negate() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex((-(real)), (-(imaginary)));
    }

    public org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex subtrahend) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(subtrahend);
        if ((isNaN) || (subtrahend.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) - (subtrahend.getReal())), ((imaginary) - (subtrahend.getImaginary())));
    }

    public org.apache.commons.math.complex.Complex subtract(double subtrahend) {
        if ((isNaN) || (java.lang.Double.isNaN(subtrahend))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) - subtrahend), imaginary);
    }

    public org.apache.commons.math.complex.Complex acos() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return this.add(this.sqrt1z().multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());
    }

    public org.apache.commons.math.complex.Complex asin() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return sqrt1z().add(this.multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());
    }

    public org.apache.commons.math.complex.Complex atan() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return this.add(org.apache.commons.math.complex.Complex.I).divide(org.apache.commons.math.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math.complex.Complex.I.divide(createComplex(2.0, 0.0)));
    }

    public org.apache.commons.math.complex.Complex cos() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.FastMath.cos(real)) * (org.apache.commons.math.util.MathUtils.cosh(imaginary))), ((-(org.apache.commons.math.util.FastMath.sin(real))) * (org.apache.commons.math.util.MathUtils.sinh(imaginary))));
    }

    public org.apache.commons.math.complex.Complex cosh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.MathUtils.cosh(real)) * (org.apache.commons.math.util.FastMath.cos(imaginary))), ((org.apache.commons.math.util.MathUtils.sinh(real)) * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex exp() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double expReal = org.apache.commons.math.util.FastMath.exp(real);
        return createComplex((expReal * (org.apache.commons.math.util.FastMath.cos(imaginary))), (expReal * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex log() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(org.apache.commons.math.util.FastMath.log(abs()), org.apache.commons.math.util.FastMath.atan2(imaginary, real));
    }

    public org.apache.commons.math.complex.Complex pow(org.apache.commons.math.complex.Complex x) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(x);
        return this.log().multiply(x).exp();
    }

    public org.apache.commons.math.complex.Complex pow(double x) {
        return this.log().multiply(x).exp();
    }

    public org.apache.commons.math.complex.Complex sin() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.FastMath.sin(real)) * (org.apache.commons.math.util.MathUtils.cosh(imaginary))), ((org.apache.commons.math.util.FastMath.cos(real)) * (org.apache.commons.math.util.MathUtils.sinh(imaginary))));
    }

    public org.apache.commons.math.complex.Complex sinh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.MathUtils.sinh(real)) * (org.apache.commons.math.util.FastMath.cos(imaginary))), ((org.apache.commons.math.util.MathUtils.cosh(real)) * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex sqrt() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((real) == 0.0) && ((imaginary) == 0.0)) {
            return createComplex(0.0, 0.0);
        }
        double t = org.apache.commons.math.util.FastMath.sqrt((((org.apache.commons.math.util.FastMath.abs(real)) + (abs())) / 2.0));
        if ((real) >= 0.0) {
            return createComplex(t, ((imaginary) / (2.0 * t)));
        }else {
            return createComplex(((org.apache.commons.math.util.FastMath.abs(imaginary)) / (2.0 * t)), ((org.apache.commons.math.util.MathUtils.indicator(imaginary)) * t));
        }
    }

    public org.apache.commons.math.complex.Complex sqrt1z() {
        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
    }

    public org.apache.commons.math.complex.Complex tan() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double real2 = 2.0 * (real);
        double imaginary2 = 2.0 * (imaginary);
        double d = (org.apache.commons.math.util.FastMath.cos(real2)) + (org.apache.commons.math.util.MathUtils.cosh(imaginary2));
        return createComplex(((org.apache.commons.math.util.FastMath.sin(real2)) / d), ((org.apache.commons.math.util.MathUtils.sinh(imaginary2)) / d));
    }

    public org.apache.commons.math.complex.Complex tanh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double real2 = 2.0 * (real);
        double imaginary2 = 2.0 * (imaginary);
        double d = (org.apache.commons.math.util.MathUtils.cosh(real2)) + (org.apache.commons.math.util.FastMath.cos(imaginary2));
        return createComplex(((org.apache.commons.math.util.MathUtils.sinh(real2)) / d), ((org.apache.commons.math.util.FastMath.sin(imaginary2)) / d));
    }

    public double getArgument() {
        return org.apache.commons.math.util.FastMath.atan2(getImaginary(), getReal());
    }

    public java.util.List<org.apache.commons.math.complex.Complex> nthRoot(int n) {
        if (n <= 0) {
            throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);
        }
        final java.util.List<org.apache.commons.math.complex.Complex> result = new java.util.ArrayList<org.apache.commons.math.complex.Complex>();
        if (isNaN) {
            result.add(org.apache.commons.math.complex.Complex.NaN);
            return result;
        }
        if (isInfinite()) {
            result.add(org.apache.commons.math.complex.Complex.INF);
            return result;
        }
        final double nthRootOfAbs = org.apache.commons.math.util.FastMath.pow(abs(), (1.0 / n));
        final double nthPhi = (getArgument()) / n;
        final double slice = (2 * (org.apache.commons.math.util.FastMath.PI)) / n;
        double innerPart = nthPhi;
        for (int k = 0; k < n; k++) {
            final double realPart = nthRootOfAbs * (org.apache.commons.math.util.FastMath.cos(innerPart));
            final double imaginaryPart = nthRootOfAbs * (org.apache.commons.math.util.FastMath.sin(innerPart));
            result.add(createComplex(realPart, imaginaryPart));
            innerPart += slice;
        }
        return result;
    }

    protected org.apache.commons.math.complex.Complex createComplex(double realPart, double imaginaryPart) {
        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);
    }

    public static org.apache.commons.math.complex.Complex valueOf(double realPart, double imaginaryPart) {
        if ((java.lang.Double.isNaN(realPart)) || (java.lang.Double.isNaN(imaginaryPart))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);
    }

    public static org.apache.commons.math.complex.Complex valueOf(double realPart) {
        if (java.lang.Double.isNaN(realPart)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return new org.apache.commons.math.complex.Complex(realPart);
    }

    protected final java.lang.Object readResolve() {
        return createComplex(real, imaginary);
    }

    public org.apache.commons.math.complex.ComplexField getField() {
        return org.apache.commons.math.complex.ComplexField.getInstance();
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((("(" + (real)) + ", ") + (imaginary)) + ")";
    }
}
23:10:51.876 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
23:10:51.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
23:10:51.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:269 which is executed by 5 tests
-1679819631
23:10:52.015 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
23:10:52.016 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:268 which is executed by 5 tests
-1679819631
23:10:52.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
23:10:52.156 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:747 which is executed by 7 tests
-1679819631
23:10:52.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:52.356 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:52.647 [pool-61-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:52.649 [pool-62-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:52.651 [pool-63-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:52.652 [pool-64-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:52.653 [pool-59-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:52.653 [pool-59-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:52.653 [pool-59-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:747.
23:10:52.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
23:10:52.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:275 which is executed by 9 tests
-1679819631
23:10:52.793 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:52.852 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:53.073 [pool-65-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:162: error: missing return statement
    }
    ^
23:10:53.088 [pool-65-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Complex implements java.io.Serializable , org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex> {
    public static final org.apache.commons.math.complex.Complex I = new org.apache.commons.math.complex.Complex(0.0, 1.0);

    public static final org.apache.commons.math.complex.Complex NaN = new org.apache.commons.math.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);

    public static final org.apache.commons.math.complex.Complex INF = new org.apache.commons.math.complex.Complex(java.lang.Double.POSITIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY);

    public static final org.apache.commons.math.complex.Complex ONE = new org.apache.commons.math.complex.Complex(1.0, 0.0);

    public static final org.apache.commons.math.complex.Complex ZERO = new org.apache.commons.math.complex.Complex(0.0, 0.0);

    private static final long serialVersionUID = -6195664516687396620L;

    private final double imaginary;

    private final double real;

    private final transient boolean isNaN;

    private final transient boolean isInfinite;

    public Complex(double real) {
        this(real, 0.0);
    }

    public Complex(double real, double imaginary) {
        this.real = real;
        this.imaginary = imaginary;
        isNaN = (java.lang.Double.isNaN(real)) || (java.lang.Double.isNaN(imaginary));
        isInfinite = (!(isNaN)) && ((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary)));
    }

    public double abs() {
        if (isNaN) {
            return java.lang.Double.NaN;
        }
        if (isInfinite()) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((org.apache.commons.math.util.FastMath.abs(real)) < (org.apache.commons.math.util.FastMath.abs(imaginary))) {
            if ((imaginary) == 0.0) {
                return org.apache.commons.math.util.FastMath.abs(real);
            }
            double q = (real) / (imaginary);
            return (org.apache.commons.math.util.FastMath.abs(imaginary)) * (org.apache.commons.math.util.FastMath.sqrt((1 + (q * q))));
        }else {
            if ((real) == 0.0) {
                return org.apache.commons.math.util.FastMath.abs(imaginary);
            }
            double q = (imaginary) / (real);
            return (org.apache.commons.math.util.FastMath.abs(real)) * (org.apache.commons.math.util.FastMath.sqrt((1 + (q * q))));
        }
    }

    public org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex addend) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(addend);
        if ((isNaN) || (addend.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) + (addend.getReal())), ((imaginary) + (addend.getImaginary())));
    }

    public org.apache.commons.math.complex.Complex add(double addend) {
        if ((isNaN) || (java.lang.Double.isNaN(addend))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) + addend), imaginary);
    }

    public org.apache.commons.math.complex.Complex conjugate() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(real, (-(imaginary)));
    }

    public org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex divisor) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(divisor);
        if ((isNaN) || (divisor.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((divisor.getReal()) == 0.0) && ((divisor.getImaginary()) == 0.0)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if ((divisor.isInfinite()) && (!(isInfinite()))) {
            return org.apache.commons.math.complex.Complex.ZERO;
        }
        final double c = divisor.getReal();
        final double d = divisor.getImaginary();
        if ((org.apache.commons.math.util.FastMath.abs(c)) < (org.apache.commons.math.util.FastMath.abs(d))) {
            double q = c / d;
            double denominator = (c * q) + d;
            return createComplex(((((real) * q) + (imaginary)) / denominator), ((((imaginary) * q) - (real)) / denominator));
        }else {
            double q = d / c;
            double denominator = (d * q) + c;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.this.isInfinite",org.apache.commons.math.complex.Complex.this.isInfinite);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("d",d);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.this.isNaN",org.apache.commons.math.complex.Complex.this.isNaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ZERO",org.apache.commons.math.complex.Complex.ZERO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.serialVersionUID",org.apache.commons.math.complex.Complex.serialVersionUID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("divisor.imaginary",divisor.imaginary);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ONE",org.apache.commons.math.complex.Complex.ONE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("denominator",denominator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("divisor.real",divisor.real);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("q",q);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("divisor",divisor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("divisor.isNaN",divisor.isNaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.INF",org.apache.commons.math.complex.Complex.INF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.this.real",org.apache.commons.math.complex.Complex.this.real);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.NaN",org.apache.commons.math.complex.Complex.NaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.I",org.apache.commons.math.complex.Complex.I);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.this.imaginary",org.apache.commons.math.complex.Complex.this.imaginary);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("divisor.isInfinite",divisor.isInfinite);} catch (Exception ex1) {ex1.printStackTrace();};
                if (org.apache.commons.math.complex.Complex.ZERO!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ZERO.getReal()",org.apache.commons.math.complex.Complex.ZERO.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ZERO.getImaginary()",org.apache.commons.math.complex.Complex.ZERO.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ZERO.isNaN()",org.apache.commons.math.complex.Complex.ZERO.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ZERO.isInfinite()",org.apache.commons.math.complex.Complex.ZERO.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.INF!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.INF.getReal()",org.apache.commons.math.complex.Complex.INF.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.INF.getImaginary()",org.apache.commons.math.complex.Complex.INF.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.INF.isNaN()",org.apache.commons.math.complex.Complex.INF.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.INF.isInfinite()",org.apache.commons.math.complex.Complex.INF.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.NaN!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.NaN.getReal()",org.apache.commons.math.complex.Complex.NaN.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.NaN.getImaginary()",org.apache.commons.math.complex.Complex.NaN.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.NaN.isNaN()",org.apache.commons.math.complex.Complex.NaN.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.NaN.isInfinite()",org.apache.commons.math.complex.Complex.NaN.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.I!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.I.getReal()",org.apache.commons.math.complex.Complex.I.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.I.getImaginary()",org.apache.commons.math.complex.Complex.I.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.I.isNaN()",org.apache.commons.math.complex.Complex.I.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.I.isInfinite()",org.apache.commons.math.complex.Complex.I.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.ONE!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ONE.getReal()",org.apache.commons.math.complex.Complex.ONE.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ONE.getImaginary()",org.apache.commons.math.complex.Complex.ONE.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ONE.isNaN()",org.apache.commons.math.complex.Complex.ONE.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.complex.Complex.ONE.isInfinite()",org.apache.commons.math.complex.Complex.ONE.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
            }
            if (runtimeAngelicValue)
                return createComplex(((((imaginary) * q) + (real)) / denominator), (((imaginary) - ((real) * q)) / denominator));

        }
    }

    public org.apache.commons.math.complex.Complex divide(double divisor) {
        if ((isNaN) || (java.lang.Double.isNaN(divisor))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (divisor == 0.0) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (java.lang.Double.isInfinite(divisor)) {
            return !(isInfinite()) ? org.apache.commons.math.complex.Complex.ZERO : org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) / divisor), ((imaginary) / divisor));
    }

    @java.lang.Override
    public boolean equals(java.lang.Object other) {
        if ((this) == other) {
            return true;
        }
        if (other instanceof org.apache.commons.math.complex.Complex) {
            org.apache.commons.math.complex.Complex c = ((org.apache.commons.math.complex.Complex) (other));
            if (c.isNaN) {
                return isNaN;
            }else {
                return ((real) == (c.real)) && ((imaginary) == (c.imaginary));
            }
        }
        return false;
    }

    @java.lang.Override
    public int hashCode() {
        if (isNaN) {
            return 7;
        }
        return 37 * ((17 * (org.apache.commons.math.util.MathUtils.hash(imaginary))) + (org.apache.commons.math.util.MathUtils.hash(real)));
    }

    public double getImaginary() {
        return imaginary;
    }

    public double getReal() {
        return real;
    }

    public boolean isNaN() {
        return isNaN;
    }

    public boolean isInfinite() {
        return isInfinite;
    }

    public org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex factor) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(factor);
        if ((isNaN) || (factor.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) {
            return org.apache.commons.math.complex.Complex.INF;
        }
        return createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), (((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));
    }

    public org.apache.commons.math.complex.Complex multiply(double factor) {
        if ((isNaN) || (java.lang.Double.isNaN(factor))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor))) {
            return org.apache.commons.math.complex.Complex.INF;
        }
        return createComplex(((real) * factor), ((imaginary) * factor));
    }

    public org.apache.commons.math.complex.Complex negate() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex((-(real)), (-(imaginary)));
    }

    public org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex subtrahend) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(subtrahend);
        if ((isNaN) || (subtrahend.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) - (subtrahend.getReal())), ((imaginary) - (subtrahend.getImaginary())));
    }

    public org.apache.commons.math.complex.Complex subtract(double subtrahend) {
        if ((isNaN) || (java.lang.Double.isNaN(subtrahend))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) - subtrahend), imaginary);
    }

    public org.apache.commons.math.complex.Complex acos() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return this.add(this.sqrt1z().multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());
    }

    public org.apache.commons.math.complex.Complex asin() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return sqrt1z().add(this.multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());
    }

    public org.apache.commons.math.complex.Complex atan() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return this.add(org.apache.commons.math.complex.Complex.I).divide(org.apache.commons.math.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math.complex.Complex.I.divide(createComplex(2.0, 0.0)));
    }

    public org.apache.commons.math.complex.Complex cos() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.FastMath.cos(real)) * (org.apache.commons.math.util.MathUtils.cosh(imaginary))), ((-(org.apache.commons.math.util.FastMath.sin(real))) * (org.apache.commons.math.util.MathUtils.sinh(imaginary))));
    }

    public org.apache.commons.math.complex.Complex cosh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.MathUtils.cosh(real)) * (org.apache.commons.math.util.FastMath.cos(imaginary))), ((org.apache.commons.math.util.MathUtils.sinh(real)) * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex exp() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double expReal = org.apache.commons.math.util.FastMath.exp(real);
        return createComplex((expReal * (org.apache.commons.math.util.FastMath.cos(imaginary))), (expReal * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex log() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(org.apache.commons.math.util.FastMath.log(abs()), org.apache.commons.math.util.FastMath.atan2(imaginary, real));
    }

    public org.apache.commons.math.complex.Complex pow(org.apache.commons.math.complex.Complex x) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(x);
        return this.log().multiply(x).exp();
    }

    public org.apache.commons.math.complex.Complex pow(double x) {
        return this.log().multiply(x).exp();
    }

    public org.apache.commons.math.complex.Complex sin() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.FastMath.sin(real)) * (org.apache.commons.math.util.MathUtils.cosh(imaginary))), ((org.apache.commons.math.util.FastMath.cos(real)) * (org.apache.commons.math.util.MathUtils.sinh(imaginary))));
    }

    public org.apache.commons.math.complex.Complex sinh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.MathUtils.sinh(real)) * (org.apache.commons.math.util.FastMath.cos(imaginary))), ((org.apache.commons.math.util.MathUtils.cosh(real)) * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex sqrt() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((real) == 0.0) && ((imaginary) == 0.0)) {
            return createComplex(0.0, 0.0);
        }
        double t = org.apache.commons.math.util.FastMath.sqrt((((org.apache.commons.math.util.FastMath.abs(real)) + (abs())) / 2.0));
        if ((real) >= 0.0) {
            return createComplex(t, ((imaginary) / (2.0 * t)));
        }else {
            return createComplex(((org.apache.commons.math.util.FastMath.abs(imaginary)) / (2.0 * t)), ((org.apache.commons.math.util.MathUtils.indicator(imaginary)) * t));
        }
    }

    public org.apache.commons.math.complex.Complex sqrt1z() {
        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
    }

    public org.apache.commons.math.complex.Complex tan() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double real2 = 2.0 * (real);
        double imaginary2 = 2.0 * (imaginary);
        double d = (org.apache.commons.math.util.FastMath.cos(real2)) + (org.apache.commons.math.util.MathUtils.cosh(imaginary2));
        return createComplex(((org.apache.commons.math.util.FastMath.sin(real2)) / d), ((org.apache.commons.math.util.MathUtils.sinh(imaginary2)) / d));
    }

    public org.apache.commons.math.complex.Complex tanh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double real2 = 2.0 * (real);
        double imaginary2 = 2.0 * (imaginary);
        double d = (org.apache.commons.math.util.MathUtils.cosh(real2)) + (org.apache.commons.math.util.FastMath.cos(imaginary2));
        return createComplex(((org.apache.commons.math.util.MathUtils.sinh(real2)) / d), ((org.apache.commons.math.util.FastMath.sin(imaginary2)) / d));
    }

    public double getArgument() {
        return org.apache.commons.math.util.FastMath.atan2(getImaginary(), getReal());
    }

    public java.util.List<org.apache.commons.math.complex.Complex> nthRoot(int n) {
        if (n <= 0) {
            throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);
        }
        final java.util.List<org.apache.commons.math.complex.Complex> result = new java.util.ArrayList<org.apache.commons.math.complex.Complex>();
        if (isNaN) {
            result.add(org.apache.commons.math.complex.Complex.NaN);
            return result;
        }
        if (isInfinite()) {
            result.add(org.apache.commons.math.complex.Complex.INF);
            return result;
        }
        final double nthRootOfAbs = org.apache.commons.math.util.FastMath.pow(abs(), (1.0 / n));
        final double nthPhi = (getArgument()) / n;
        final double slice = (2 * (org.apache.commons.math.util.FastMath.PI)) / n;
        double innerPart = nthPhi;
        for (int k = 0; k < n; k++) {
            final double realPart = nthRootOfAbs * (org.apache.commons.math.util.FastMath.cos(innerPart));
            final double imaginaryPart = nthRootOfAbs * (org.apache.commons.math.util.FastMath.sin(innerPart));
            result.add(createComplex(realPart, imaginaryPart));
            innerPart += slice;
        }
        return result;
    }

    protected org.apache.commons.math.complex.Complex createComplex(double realPart, double imaginaryPart) {
        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);
    }

    public static org.apache.commons.math.complex.Complex valueOf(double realPart, double imaginaryPart) {
        if ((java.lang.Double.isNaN(realPart)) || (java.lang.Double.isNaN(imaginaryPart))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);
    }

    public static org.apache.commons.math.complex.Complex valueOf(double realPart) {
        if (java.lang.Double.isNaN(realPart)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return new org.apache.commons.math.complex.Complex(realPart);
    }

    protected final java.lang.Object readResolve() {
        return createComplex(real, imaginary);
    }

    public org.apache.commons.math.complex.ComplexField getField() {
        return org.apache.commons.math.complex.ComplexField.getInstance();
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((("(" + (real)) + ", ") + (imaginary)) + ")";
    }
}
23:10:53.088 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
23:10:53.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
23:10:53.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:274 which is executed by 9 tests
-1679819631
23:10:53.224 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
23:10:53.224 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:273 which is executed by 9 tests
-1679819631
23:10:53.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
23:10:53.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:419 which is executed by 12 tests
-1679819631
23:10:53.496 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:53.554 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:53.832 [pool-69-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:53.834 [pool-70-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:53.836 [pool-71-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:53.837 [pool-72-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:53.837 [pool-67-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:53.837 [pool-67-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:53.837 [pool-67-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:419.
23:10:53.838 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
23:10:53.838 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:267 which is executed by 12 tests
-1679819631
23:10:53.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:54.034 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:54.306 [pool-75-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:54.308 [pool-76-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:54.311 [pool-77-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:54.312 [pool-78-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:54.312 [pool-73-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:54.312 [pool-73-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:54.312 [pool-73-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:267.
23:10:54.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
23:10:54.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:265 which is executed by 12 tests
-1679819631
23:10:54.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
23:10:54.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:264 which is executed by 12 tests
-1679819631
23:10:54.584 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
23:10:54.584 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:260 which is executed by 12 tests
-1679819631
23:10:54.729 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:54.793 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:55.112 [pool-81-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:55.114 [pool-82-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:55.117 [pool-83-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:55.118 [pool-84-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:55.118 [pool-79-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:55.119 [pool-79-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:55.119 [pool-79-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:260.
23:10:55.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:55.175 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:55.475 [pool-87-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:55.477 [pool-88-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:55.480 [pool-89-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:55.482 [pool-90-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:55.482 [pool-85-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:55.482 [pool-85-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:55.482 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:260.
23:10:55.482 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
23:10:55.482 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:750 which is executed by 15 tests
-1679819631
23:10:55.639 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
23:10:55.639 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:133 which is executed by 16 tests
-1679819631
23:10:55.779 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:55.835 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:56.053 [pool-91-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:107: error: missing return statement
    }
    ^
23:10:56.068 [pool-91-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Complex implements java.io.Serializable , org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex> {
    public static final org.apache.commons.math.complex.Complex I = new org.apache.commons.math.complex.Complex(0.0, 1.0);

    public static final org.apache.commons.math.complex.Complex NaN = new org.apache.commons.math.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);

    public static final org.apache.commons.math.complex.Complex INF = new org.apache.commons.math.complex.Complex(java.lang.Double.POSITIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY);

    public static final org.apache.commons.math.complex.Complex ONE = new org.apache.commons.math.complex.Complex(1.0, 0.0);

    public static final org.apache.commons.math.complex.Complex ZERO = new org.apache.commons.math.complex.Complex(0.0, 0.0);

    private static final long serialVersionUID = -6195664516687396620L;

    private final double imaginary;

    private final double real;

    private final transient boolean isNaN;

    private final transient boolean isInfinite;

    public Complex(double real) {
        this(real, 0.0);
    }

    public Complex(double real, double imaginary) {
        this.real = real;
        this.imaginary = imaginary;
        isNaN = (java.lang.Double.isNaN(real)) || (java.lang.Double.isNaN(imaginary));
        isInfinite = (!(isNaN)) && ((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary)));
    }

    public double abs() {
        if (isNaN) {
            return java.lang.Double.NaN;
        }
        if (isInfinite()) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((org.apache.commons.math.util.FastMath.abs(real)) < (org.apache.commons.math.util.FastMath.abs(imaginary))) {
            if ((imaginary) == 0.0) {
                return org.apache.commons.math.util.FastMath.abs(real);
            }
            double q = (real) / (imaginary);
            return (org.apache.commons.math.util.FastMath.abs(imaginary)) * (org.apache.commons.math.util.FastMath.sqrt((1 + (q * q))));
        }else {
            if ((real) == 0.0) {
                return org.apache.commons.math.util.FastMath.abs(imaginary);
            }
            double q = (imaginary) / (real);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(16).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("q",q);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.this.isInfinite",org.apache.commons.math.complex.Complex.this.isInfinite);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.this.isNaN",org.apache.commons.math.complex.Complex.this.isNaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ZERO",org.apache.commons.math.complex.Complex.ZERO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.INF",org.apache.commons.math.complex.Complex.INF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.this.real",org.apache.commons.math.complex.Complex.this.real);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.NaN",org.apache.commons.math.complex.Complex.NaN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.I",org.apache.commons.math.complex.Complex.I);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ONE",org.apache.commons.math.complex.Complex.ONE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.this.imaginary",org.apache.commons.math.complex.Complex.this.imaginary);} catch (Exception ex1) {ex1.printStackTrace();};
                if (org.apache.commons.math.complex.Complex.ZERO!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ZERO.getReal()",org.apache.commons.math.complex.Complex.ZERO.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ZERO.getImaginary()",org.apache.commons.math.complex.Complex.ZERO.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ZERO.isNaN()",org.apache.commons.math.complex.Complex.ZERO.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ZERO.isInfinite()",org.apache.commons.math.complex.Complex.ZERO.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.INF!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.INF.getReal()",org.apache.commons.math.complex.Complex.INF.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.INF.getImaginary()",org.apache.commons.math.complex.Complex.INF.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.INF.isNaN()",org.apache.commons.math.complex.Complex.INF.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.INF.isInfinite()",org.apache.commons.math.complex.Complex.INF.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.NaN!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.NaN.getReal()",org.apache.commons.math.complex.Complex.NaN.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.NaN.getImaginary()",org.apache.commons.math.complex.Complex.NaN.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.NaN.isNaN()",org.apache.commons.math.complex.Complex.NaN.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.NaN.isInfinite()",org.apache.commons.math.complex.Complex.NaN.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.I!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.I.getReal()",org.apache.commons.math.complex.Complex.I.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.I.getImaginary()",org.apache.commons.math.complex.Complex.I.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.I.isNaN()",org.apache.commons.math.complex.Complex.I.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.I.isInfinite()",org.apache.commons.math.complex.Complex.I.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (org.apache.commons.math.complex.Complex.ONE!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ONE.getReal()",org.apache.commons.math.complex.Complex.ONE.getReal());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ONE.getImaginary()",org.apache.commons.math.complex.Complex.ONE.getImaginary());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ONE.isNaN()",org.apache.commons.math.complex.Complex.ONE.isNaN());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectInput("org.apache.commons.math.complex.Complex.ONE.isInfinite()",org.apache.commons.math.complex.Complex.ONE.isInfinite());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(16).collectionEnds();
            }
            if (runtimeAngelicValue)
                return (org.apache.commons.math.util.FastMath.abs(real)) * (org.apache.commons.math.util.FastMath.sqrt((1 + (q * q))));

        }
    }

    public org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex addend) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(addend);
        if ((isNaN) || (addend.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) + (addend.getReal())), ((imaginary) + (addend.getImaginary())));
    }

    public org.apache.commons.math.complex.Complex add(double addend) {
        if ((isNaN) || (java.lang.Double.isNaN(addend))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) + addend), imaginary);
    }

    public org.apache.commons.math.complex.Complex conjugate() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(real, (-(imaginary)));
    }

    public org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex divisor) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(divisor);
        if ((isNaN) || (divisor.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((divisor.getReal()) == 0.0) && ((divisor.getImaginary()) == 0.0)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if ((divisor.isInfinite()) && (!(isInfinite()))) {
            return org.apache.commons.math.complex.Complex.ZERO;
        }
        final double c = divisor.getReal();
        final double d = divisor.getImaginary();
        if ((org.apache.commons.math.util.FastMath.abs(c)) < (org.apache.commons.math.util.FastMath.abs(d))) {
            double q = c / d;
            double denominator = (c * q) + d;
            return createComplex(((((real) * q) + (imaginary)) / denominator), ((((imaginary) * q) - (real)) / denominator));
        }else {
            double q = d / c;
            double denominator = (d * q) + c;
            return createComplex(((((imaginary) * q) + (real)) / denominator), (((imaginary) - ((real) * q)) / denominator));
        }
    }

    public org.apache.commons.math.complex.Complex divide(double divisor) {
        if ((isNaN) || (java.lang.Double.isNaN(divisor))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (divisor == 0.0) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (java.lang.Double.isInfinite(divisor)) {
            return !(isInfinite()) ? org.apache.commons.math.complex.Complex.ZERO : org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) / divisor), ((imaginary) / divisor));
    }

    @java.lang.Override
    public boolean equals(java.lang.Object other) {
        if ((this) == other) {
            return true;
        }
        if (other instanceof org.apache.commons.math.complex.Complex) {
            org.apache.commons.math.complex.Complex c = ((org.apache.commons.math.complex.Complex) (other));
            if (c.isNaN) {
                return isNaN;
            }else {
                return ((real) == (c.real)) && ((imaginary) == (c.imaginary));
            }
        }
        return false;
    }

    @java.lang.Override
    public int hashCode() {
        if (isNaN) {
            return 7;
        }
        return 37 * ((17 * (org.apache.commons.math.util.MathUtils.hash(imaginary))) + (org.apache.commons.math.util.MathUtils.hash(real)));
    }

    public double getImaginary() {
        return imaginary;
    }

    public double getReal() {
        return real;
    }

    public boolean isNaN() {
        return isNaN;
    }

    public boolean isInfinite() {
        return isInfinite;
    }

    public org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex factor) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(factor);
        if ((isNaN) || (factor.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if ((((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor.real))) || (java.lang.Double.isInfinite(factor.imaginary))) {
            return org.apache.commons.math.complex.Complex.INF;
        }
        return createComplex((((real) * (factor.real)) - ((imaginary) * (factor.imaginary))), (((real) * (factor.imaginary)) + ((imaginary) * (factor.real))));
    }

    public org.apache.commons.math.complex.Complex multiply(double factor) {
        if ((isNaN) || (java.lang.Double.isNaN(factor))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((java.lang.Double.isInfinite(real)) || (java.lang.Double.isInfinite(imaginary))) || (java.lang.Double.isInfinite(factor))) {
            return org.apache.commons.math.complex.Complex.INF;
        }
        return createComplex(((real) * factor), ((imaginary) * factor));
    }

    public org.apache.commons.math.complex.Complex negate() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex((-(real)), (-(imaginary)));
    }

    public org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex subtrahend) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(subtrahend);
        if ((isNaN) || (subtrahend.isNaN)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) - (subtrahend.getReal())), ((imaginary) - (subtrahend.getImaginary())));
    }

    public org.apache.commons.math.complex.Complex subtract(double subtrahend) {
        if ((isNaN) || (java.lang.Double.isNaN(subtrahend))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((real) - subtrahend), imaginary);
    }

    public org.apache.commons.math.complex.Complex acos() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return this.add(this.sqrt1z().multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());
    }

    public org.apache.commons.math.complex.Complex asin() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return sqrt1z().add(this.multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());
    }

    public org.apache.commons.math.complex.Complex atan() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return this.add(org.apache.commons.math.complex.Complex.I).divide(org.apache.commons.math.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math.complex.Complex.I.divide(createComplex(2.0, 0.0)));
    }

    public org.apache.commons.math.complex.Complex cos() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.FastMath.cos(real)) * (org.apache.commons.math.util.MathUtils.cosh(imaginary))), ((-(org.apache.commons.math.util.FastMath.sin(real))) * (org.apache.commons.math.util.MathUtils.sinh(imaginary))));
    }

    public org.apache.commons.math.complex.Complex cosh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.MathUtils.cosh(real)) * (org.apache.commons.math.util.FastMath.cos(imaginary))), ((org.apache.commons.math.util.MathUtils.sinh(real)) * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex exp() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double expReal = org.apache.commons.math.util.FastMath.exp(real);
        return createComplex((expReal * (org.apache.commons.math.util.FastMath.cos(imaginary))), (expReal * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex log() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(org.apache.commons.math.util.FastMath.log(abs()), org.apache.commons.math.util.FastMath.atan2(imaginary, real));
    }

    public org.apache.commons.math.complex.Complex pow(org.apache.commons.math.complex.Complex x) throws org.apache.commons.math.exception.NullArgumentException {
        org.apache.commons.math.util.MathUtils.checkNotNull(x);
        return this.log().multiply(x).exp();
    }

    public org.apache.commons.math.complex.Complex pow(double x) {
        return this.log().multiply(x).exp();
    }

    public org.apache.commons.math.complex.Complex sin() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.FastMath.sin(real)) * (org.apache.commons.math.util.MathUtils.cosh(imaginary))), ((org.apache.commons.math.util.FastMath.cos(real)) * (org.apache.commons.math.util.MathUtils.sinh(imaginary))));
    }

    public org.apache.commons.math.complex.Complex sinh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return createComplex(((org.apache.commons.math.util.MathUtils.sinh(real)) * (org.apache.commons.math.util.FastMath.cos(imaginary))), ((org.apache.commons.math.util.MathUtils.cosh(real)) * (org.apache.commons.math.util.FastMath.sin(imaginary))));
    }

    public org.apache.commons.math.complex.Complex sqrt() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        if (((real) == 0.0) && ((imaginary) == 0.0)) {
            return createComplex(0.0, 0.0);
        }
        double t = org.apache.commons.math.util.FastMath.sqrt((((org.apache.commons.math.util.FastMath.abs(real)) + (abs())) / 2.0));
        if ((real) >= 0.0) {
            return createComplex(t, ((imaginary) / (2.0 * t)));
        }else {
            return createComplex(((org.apache.commons.math.util.FastMath.abs(imaginary)) / (2.0 * t)), ((org.apache.commons.math.util.MathUtils.indicator(imaginary)) * t));
        }
    }

    public org.apache.commons.math.complex.Complex sqrt1z() {
        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
    }

    public org.apache.commons.math.complex.Complex tan() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double real2 = 2.0 * (real);
        double imaginary2 = 2.0 * (imaginary);
        double d = (org.apache.commons.math.util.FastMath.cos(real2)) + (org.apache.commons.math.util.MathUtils.cosh(imaginary2));
        return createComplex(((org.apache.commons.math.util.FastMath.sin(real2)) / d), ((org.apache.commons.math.util.MathUtils.sinh(imaginary2)) / d));
    }

    public org.apache.commons.math.complex.Complex tanh() {
        if (isNaN) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        double real2 = 2.0 * (real);
        double imaginary2 = 2.0 * (imaginary);
        double d = (org.apache.commons.math.util.MathUtils.cosh(real2)) + (org.apache.commons.math.util.FastMath.cos(imaginary2));
        return createComplex(((org.apache.commons.math.util.MathUtils.sinh(real2)) / d), ((org.apache.commons.math.util.FastMath.sin(imaginary2)) / d));
    }

    public double getArgument() {
        return org.apache.commons.math.util.FastMath.atan2(getImaginary(), getReal());
    }

    public java.util.List<org.apache.commons.math.complex.Complex> nthRoot(int n) {
        if (n <= 0) {
            throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);
        }
        final java.util.List<org.apache.commons.math.complex.Complex> result = new java.util.ArrayList<org.apache.commons.math.complex.Complex>();
        if (isNaN) {
            result.add(org.apache.commons.math.complex.Complex.NaN);
            return result;
        }
        if (isInfinite()) {
            result.add(org.apache.commons.math.complex.Complex.INF);
            return result;
        }
        final double nthRootOfAbs = org.apache.commons.math.util.FastMath.pow(abs(), (1.0 / n));
        final double nthPhi = (getArgument()) / n;
        final double slice = (2 * (org.apache.commons.math.util.FastMath.PI)) / n;
        double innerPart = nthPhi;
        for (int k = 0; k < n; k++) {
            final double realPart = nthRootOfAbs * (org.apache.commons.math.util.FastMath.cos(innerPart));
            final double imaginaryPart = nthRootOfAbs * (org.apache.commons.math.util.FastMath.sin(innerPart));
            result.add(createComplex(realPart, imaginaryPart));
            innerPart += slice;
        }
        return result;
    }

    protected org.apache.commons.math.complex.Complex createComplex(double realPart, double imaginaryPart) {
        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);
    }

    public static org.apache.commons.math.complex.Complex valueOf(double realPart, double imaginaryPart) {
        if ((java.lang.Double.isNaN(realPart)) || (java.lang.Double.isNaN(imaginaryPart))) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);
    }

    public static org.apache.commons.math.complex.Complex valueOf(double realPart) {
        if (java.lang.Double.isNaN(realPart)) {
            return org.apache.commons.math.complex.Complex.NaN;
        }
        return new org.apache.commons.math.complex.Complex(realPart);
    }

    protected final java.lang.Object readResolve() {
        return createComplex(real, imaginary);
    }

    public org.apache.commons.math.complex.ComplexField getField() {
        return org.apache.commons.math.complex.ComplexField.getInstance();
    }

    @java.lang.Override
    public java.lang.String toString() {
        return ((("(" + (real)) + ", ") + (imaginary)) + ")";
    }
}
23:10:56.068 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
23:10:56.068 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
23:10:56.068 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:132 which is executed by 16 tests
-1679819631
23:10:56.203 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
23:10:56.203 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:129 which is executed by 17 tests
-1679819631
23:10:56.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:56.398 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:56.668 [pool-95-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:56.669 [pool-96-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:56.672 [pool-97-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:56.673 [pool-98-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:56.673 [pool-93-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:56.673 [pool-93-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:56.673 [pool-93-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:129.
23:10:56.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:56.731 [pool-100-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:56.998 [pool-101-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.000 [pool-102-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:57.002 [pool-103-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.004 [pool-104-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:57.004 [pool-99-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:57.004 [pool-99-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:57.004 [pool-99-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:129.
23:10:57.004 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
23:10:57.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:162 which is executed by 19 tests
-1679819631
23:10:57.142 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
23:10:57.142 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:746 which is executed by 21 tests
-1679819631
23:10:57.279 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.339 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:57.601 [pool-107-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.602 [pool-108-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:57.605 [pool-109-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.606 [pool-110-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:57.606 [pool-105-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:57.606 [pool-105-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:57.606 [pool-105-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:746.
23:10:57.607 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.666 [pool-112-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:57.931 [pool-113-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.932 [pool-114-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:57.934 [pool-115-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:57.936 [pool-116-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:57.936 [pool-111-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:57.936 [pool-111-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:57.936 [pool-111-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:746.
23:10:57.936 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
23:10:57.936 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:428 which is executed by 22 tests
-1679819631
23:10:58.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
23:10:58.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:493 which is executed by 22 tests
-1679819631
23:10:58.207 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
23:10:58.207 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:158 which is executed by 23 tests
-1679819631
23:10:58.356 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:58.413 [pool-118-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:58.679 [pool-119-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:58.680 [pool-120-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:58.682 [pool-121-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:58.683 [pool-122-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:58.684 [pool-117-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:58.684 [pool-117-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:58.684 [pool-117-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:158.
23:10:58.684 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:58.739 [pool-124-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:58.999 [pool-125-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.001 [pool-126-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:59.003 [pool-127-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.004 [pool-128-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:59.005 [pool-123-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:59.005 [pool-123-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:59.005 [pool-123-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:158.
23:10:59.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
23:10:59.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:157 which is executed by 23 tests
-1679819631
23:10:59.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.198 [pool-130-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:59.455 [pool-131-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.456 [pool-132-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:59.459 [pool-133-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.460 [pool-134-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:59.460 [pool-129-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:59.460 [pool-129-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:59.460 [pool-129-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:157.
23:10:59.461 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
23:10:59.461 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:489 which is executed by 25 tests
-1679819631
23:10:59.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.654 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:59.916 [pool-137-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.917 [pool-138-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:10:59.919 [pool-139-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.920 [pool-140-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:10:59.921 [pool-135-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:59.921 [pool-135-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:10:59.921 [pool-135-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:489.
23:10:59.921 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:10:59.976 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:00.234 [pool-143-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:00.235 [pool-144-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:00.239 [pool-145-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:00.242 [pool-146-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:00.242 [pool-141-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:00.242 [pool-141-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:00.242 [pool-141-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:489.
23:11:00.242 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
23:11:00.242 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:488 which is executed by 25 tests
-1679819631
23:11:00.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:00.436 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:00.693 [pool-149-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:00.695 [pool-150-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:00.698 [pool-151-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:00.699 [pool-152-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:00.699 [pool-147-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:00.699 [pool-147-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:00.699 [pool-147-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:488.
23:11:00.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
23:11:00.700 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:421 which is executed by 27 tests
-1679819631
23:11:00.836 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:00.896 [pool-154-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:01.203 [pool-155-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:01.205 [pool-156-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:01.208 [pool-157-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:01.210 [pool-158-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:01.210 [pool-153-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:01.210 [pool-153-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:01.210 [pool-153-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:421.
23:11:01.210 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:01.267 [pool-160-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:01.567 [pool-161-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:01.569 [pool-162-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:01.571 [pool-163-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:01.572 [pool-164-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:01.572 [pool-159-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:01.573 [pool-159-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:01.573 [pool-159-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:421.
23:11:01.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
23:11:01.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:364 which is executed by 113 tests
-1679819631
23:11:01.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
23:11:01.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:355 which is executed by 114 tests
-1679819631
23:11:01.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
23:11:01.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2991 which is executed by 29 tests
1033054629
23:11:02.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:02.128 [pool-166-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:02.523 [pool-167-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:02.525 [pool-168-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:02.527 [pool-169-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:02.529 [pool-170-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:02.529 [pool-165-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:02.529 [pool-165-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:02.529 [pool-165-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2991.
23:11:02.529 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:02.586 [pool-172-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:02.936 [pool-173-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:02.937 [pool-174-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(1.5707963267948966, 0.5493061443340549)
(1.5707963267948966, 0.5850356263251273)
(1.5707963267948966, 0.6263814842476839)
(1.5707963267948966, 0.6749633584745077)
(1.5707963267948966, 0.7331685343967135)
(1.5707963267948966, 0.8047189562170501)
(1.5707963267948966, 0.8958797346140276)
(1.5707963267948966, 1.0184409636305198)
(1.5707963267948966, 1.1989476363991853)
(1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:02.939 [pool-175-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:02.940 [pool-176-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:02.940 [pool-171-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:02.940 [pool-171-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:02.940 [pool-171-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2991.
23:11:02.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
23:11:02.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:122 which is executed by 29 tests
-1679819631
23:11:03.077 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:03.131 [pool-178-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:03.391 [pool-179-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:03.392 [pool-180-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:03.394 [pool-181-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:03.395 [pool-182-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:03.395 [pool-177-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:03.395 [pool-177-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:03.396 [pool-177-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:122.
23:11:03.396 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
23:11:03.396 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2997 which is executed by 30 tests
1033054629
23:11:03.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:03.633 [pool-184-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:03.964 [pool-185-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:03.965 [pool-186-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:03.967 [pool-187-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:03.969 [pool-188-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:03.969 [pool-183-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:03.969 [pool-183-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:03.969 [pool-183-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2997.
23:11:03.969 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
23:11:03.969 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:119 which is executed by 34 tests
-1679819631
23:11:04.104 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:04.160 [pool-190-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:04.413 [pool-191-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:04.414 [pool-192-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:04.417 [pool-193-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:04.418 [pool-194-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:04.418 [pool-189-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:04.418 [pool-189-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:04.418 [pool-189-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:119.
23:11:04.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:04.473 [pool-196-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:04.738 [pool-197-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (45 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:04.739 [pool-198-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:04.741 [pool-199-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:04.742 [pool-200-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:04.743 [pool-195-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:04.743 [pool-195-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:04.743 [pool-195-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:119.
23:11:04.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
23:11:04.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:116 which is executed by 35 tests
-1679819631
23:11:04.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:04.935 [pool-202-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:05.192 [pool-203-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.193 [pool-204-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:05.195 [pool-205-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.196 [pool-206-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:05.197 [pool-201-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:05.197 [pool-201-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:05.197 [pool-201-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:116.
23:11:05.197 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.254 [pool-208-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:05.522 [pool-209-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.524 [pool-210-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:05.526 [pool-211-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.527 [pool-212-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:05.527 [pool-207-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:05.527 [pool-207-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:05.527 [pool-207-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:116.
23:11:05.528 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
23:11:05.528 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:418 which is executed by 35 tests
-1679819631
23:11:05.663 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.718 [pool-214-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:05.966 [pool-215-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.968 [pool-216-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:05.971 [pool-217-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:05.972 [pool-218-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:05.972 [pool-213-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:05.972 [pool-213-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:05.972 [pool-213-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:418.
23:11:05.972 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:06.028 [pool-220-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:06.279 [pool-221-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:06.280 [pool-222-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:06.283 [pool-223-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:06.284 [pool-224-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:06.284 [pool-219-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:06.284 [pool-219-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:06.284 [pool-219-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:418.
23:11:06.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
23:11:06.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:417 which is executed by 35 tests
-1679819631
23:11:06.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:06.476 [pool-226-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:06.731 [pool-227-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (35 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:06.732 [pool-228-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:06.734 [pool-229-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:06.735 [pool-230-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:06.736 [pool-225-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:06.736 [pool-225-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:06.736 [pool-225-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:417.
23:11:06.736 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
23:11:06.736 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2990 which is executed by 39 tests
1033054629
23:11:06.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:06.972 [pool-232-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:07.293 [pool-233-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:07.294 [pool-234-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:07.297 [pool-235-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:07.298 [pool-236-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:07.298 [pool-231-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:07.298 [pool-231-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:07.298 [pool-231-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2990.
23:11:07.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:07.354 [pool-238-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(0.0, 0.5493061443340549)
(0.0, 0.5850356263251273)
(0.0, 0.6263814842476839)
(0.0, 0.6749633584745077)
(0.0, 0.7331685343967135)
(0.0, 0.8047189562170501)
(0.0, 0.8958797346140276)
(0.0, 1.0184409636305198)
(0.0, 1.1989476363991853)
(0.0, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:07.676 [pool-239-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:07.677 [pool-240-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(-1.5707963267948966, 1.4722194895832204)
(-1.5707963267948966, 1.0986122886681098)
(-1.5707963267948966, 0.8673005276940532)
(-1.5707963267948966, 0.6931471805599453)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.4236489301936017)
(-1.5707963267948966, 0.3095196042031116)
(-1.5707963267948966, 0.2027325540540821)
(-1.5707963267948966, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:07.679 [pool-241-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:07.680 [pool-242-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:07.680 [pool-237-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:07.680 [pool-237-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:07.680 [pool-237-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2990.
23:11:07.680 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
23:11:07.680 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:327 which is executed by 39 tests
-1679819631
23:11:07.815 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:07.869 [pool-244-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:08.125 [pool-245-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:08.127 [pool-246-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:08.128 [pool-247-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:08.130 [pool-248-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:08.130 [pool-243-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:08.130 [pool-243-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:08.130 [pool-243-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:327.
23:11:08.130 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
23:11:08.130 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2982 which is executed by 41 tests
1033054629
23:11:08.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:09.053 [pool-250-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (726 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:09.404 [pool-251-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:09.406 [pool-252-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:09.408 [pool-253-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:09.410 [pool-254-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:09.410 [pool-249-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:09.410 [pool-249-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:09.410 [pool-249-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2982.
23:11:09.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:09.463 [pool-256-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:09.786 [pool-257-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:09.788 [pool-258-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:09.791 [pool-259-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:09.792 [pool-260-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:09.792 [pool-255-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:09.792 [pool-255-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:09.792 [pool-255-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2982.
23:11:09.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
23:11:09.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2980 which is executed by 41 tests
1033054629
23:11:09.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
23:11:09.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2979 which is executed by 41 tests
1033054629
23:11:10.154 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
23:11:10.154 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2978 which is executed by 41 tests
1033054629
23:11:10.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
23:11:10.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:324 which is executed by 42 tests
-1679819631
23:11:10.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:10.527 [pool-262-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:10.777 [pool-263-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (30 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:10.779 [pool-264-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:10.780 [pool-265-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:10.781 [pool-266-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:10.781 [pool-261-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:10.781 [pool-261-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:10.781 [pool-261-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:324.
23:11:10.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:10.833 [pool-268-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:11.081 [pool-269-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:11.083 [pool-270-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:11.085 [pool-271-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

23:11:11.086 [pool-272-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

23:11:11.086 [pool-267-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:11.086 [pool-267-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null]
23:11:11.086 [pool-267-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:324.
23:11:11.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
23:11:11.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:323 which is executed by 42 tests
-1679819631
23:11:11.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
23:11:11.220 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:388 which is executed by 44 tests
-1679819631
23:11:11.353 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
23:11:11.353 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:322 which is executed by 44 tests
-1679819631
23:11:11.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:11.541 [pool-274-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:11.786 [pool-275-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (30 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:11.787 [pool-276-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:11.789 [pool-277-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:11.790 [pool-278-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:11.790 [pool-273-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:11.790 [pool-273-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:11.790 [pool-273-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:322.
23:11:11.790 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:11.853 [pool-280-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (58 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:12.099 [pool-281-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:12.100 [pool-282-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:12.101 [pool-283-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:12.103 [pool-284-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:12.103 [pool-279-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:12.103 [pool-279-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:12.103 [pool-279-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:322.
23:11:12.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
23:11:12.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:319 which is executed by 58 tests
-1679819631
23:11:12.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:12.294 [pool-286-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:12.556 [pool-287-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:12.558 [pool-288-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:12.560 [pool-289-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:12.562 [pool-290-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:11:12.562 [pool-285-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:12.562 [pool-285-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:12.562 [pool-285-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:319.
23:11:12.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:12.617 [pool-292-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:12.908 [pool-293-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:11:12.910 [pool-294-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:12.911 [pool-295-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

23:11:12.912 [pool-296-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 0

23:11:12.912 [pool-291-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:11:12.912 [pool-291-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null]
23:11:12.912 [pool-291-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.complex.Complex:319.
23:11:12.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
23:11:12.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:593 which is executed by 69 tests
1857420685
23:11:13.068 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
23:11:13.068 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:570 which is executed by 69 tests
1857420685
23:11:13.224 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:22.793 [pool-298-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9560 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NullPointerException
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:23.006 [pool-299-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:23.193 [pool-300-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (186 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:11:23.193 [pool-297-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): null]
23:11:23.193 [pool-297-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:11:23.193 [pool-297-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:570.
23:11:23.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:32.694 [pool-302-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9496 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NullPointerException
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:11:32.908 [pool-303-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:33.102 [pool-304-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (193 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:11:33.102 [pool-301-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): null]
23:11:33.103 [pool-301-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:11:33.103 [pool-301-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:570.
23:11:33.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
23:11:33.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:562 which is executed by 69 tests
1857420685
23:11:33.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
23:11:33.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:560 which is executed by 69 tests
1857420685
23:11:33.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:42.817 [pool-306-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9448 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:43.241 [pool-307-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (215 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:43.244 [pool-308-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:11:43.244 [pool-305-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:11:43.244 [pool-305-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:11:43.244 [pool-305-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:560.
23:11:43.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
23:11:43.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:556 which is executed by 69 tests
1857420685
23:11:43.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:52.919 [pool-310-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9538 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:53.365 [pool-311-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (234 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:11:53.379 [pool-312-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:11:53.380 [pool-309-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:11:53.380 [pool-309-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:11:53.380 [pool-309-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:556.
23:11:53.380 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
23:11:53.380 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:555 which is executed by 69 tests
1857420685
23:11:53.514 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:03.087 [pool-314-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9568 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:03.530 [pool-315-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (239 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:03.572 [pool-316-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (41 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:12:03.572 [pool-313-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:03.572 [pool-313-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:03.572 [pool-313-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:555.
23:12:03.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:13.169 [pool-318-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9592 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:13.589 [pool-319-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (222 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:13.629 [pool-320-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:12:13.629 [pool-317-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:13.629 [pool-317-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:13.629 [pool-317-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:555.
23:12:13.629 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
23:12:13.629 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:554 which is executed by 69 tests
1857420685
23:12:13.761 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:23.269 [pool-322-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9502 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:23.696 [pool-323-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (236 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:23.731 [pool-324-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:12:23.731 [pool-321-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:23.731 [pool-321-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:23.732 [pool-321-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:554.
23:12:23.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
23:12:23.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:553 which is executed by 69 tests
1857420685
23:12:23.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:33.323 [pool-326-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9455 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:33.735 [pool-327-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (198 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:33.738 [pool-328-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:12:33.738 [pool-325-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:33.738 [pool-325-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:33.738 [pool-325-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:553.
23:12:33.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
23:12:33.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:551 which is executed by 69 tests
1857420685
23:12:33.870 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:43.412 [pool-330-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9537 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:43.810 [pool-331-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (207 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:43.812 [pool-332-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:12:43.813 [pool-329-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:43.813 [pool-329-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:43.813 [pool-329-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:551.
23:12:43.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
23:12:43.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:547 which is executed by 69 tests
1857420685
23:12:43.943 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:53.447 [pool-334-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9499 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:12:53.824 [pool-335-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (185 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:12:53.856 [pool-336-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:12:53.856 [pool-333-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:12:53.856 [pool-333-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:12:53.856 [pool-333-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:547.
23:12:53.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
23:12:53.857 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:546 which is executed by 69 tests
1857420685
23:12:54.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:03.705 [pool-338-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9693 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:339)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:13:04.120 [pool-339-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (195 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:339)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:04.152 [pool-340-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:13:04.152 [pool-337-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:13:04.152 [pool-337-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:13:04.152 [pool-337-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:546.
23:13:04.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:13.666 [pool-342-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9509 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:339)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:13:14.037 [pool-343-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (176 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:339)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:14.069 [pool-344-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:13:14.070 [pool-341-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:13:14.070 [pool-341-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:13:14.070 [pool-341-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:546.
23:13:14.070 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
23:13:14.070 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:543 which is executed by 69 tests
1857420685
23:13:14.202 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:23.683 [pool-346-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9476 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:24.079 [pool-347-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (206 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:24.081 [pool-348-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:13:24.082 [pool-345-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:13:24.082 [pool-345-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:13:24.082 [pool-345-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:543.
23:13:24.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
23:13:24.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:542 which is executed by 69 tests
1857420685
23:13:24.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:33.802 [pool-350-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9583 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:13:34.171 [pool-351-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (179 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:34.200 [pool-352-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:13:34.201 [pool-349-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:13:34.201 [pool-349-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:13:34.201 [pool-349-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:542.
23:13:34.201 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
23:13:34.201 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:541 which is executed by 69 tests
1857420685
23:13:34.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:43.787 [pool-354-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9451 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:336)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:13:44.144 [pool-355-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (169 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:336)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:44.179 [pool-356-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:13:44.179 [pool-353-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:13:44.179 [pool-353-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:13:44.179 [pool-353-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:541.
23:13:44.180 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:13:53.722 [pool-358-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9538 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:336)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:13:54.080 [pool-359-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (169 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:336)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:336)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:13:54.081 [pool-360-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:336)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

23:13:54.081 [pool-357-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:13:54.081 [pool-357-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:13:54.081 [pool-357-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:541.
23:13:54.081 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
23:13:54.081 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:538 which is executed by 69 tests
1857420685
23:13:54.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:03.632 [pool-362-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9415 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:04.047 [pool-363-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (214 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:04.049 [pool-364-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:14:04.049 [pool-361-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:04.049 [pool-361-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:04.049 [pool-361-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:538.
23:14:04.049 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
23:14:04.050 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:537 which is executed by 69 tests
1857420685
23:14:04.182 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:13.638 [pool-366-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9451 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:14.038 [pool-367-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (214 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:14.041 [pool-368-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:14:14.041 [pool-365-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:14.041 [pool-365-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:14.041 [pool-365-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:537.
23:14:14.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
23:14:14.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:536 which is executed by 69 tests
1857420685
23:14:14.171 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:23.647 [pool-370-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9471 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:24.037 [pool-371-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (202 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:24.043 [pool-372-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:14:24.043 [pool-369-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:24.043 [pool-369-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:24.043 [pool-369-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:536.
23:14:24.043 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:33.554 [pool-374-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9506 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:33.935 [pool-375-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (194 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:33.938 [pool-376-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:14:33.939 [pool-373-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:33.939 [pool-373-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:33.939 [pool-373-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:536.
23:14:33.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
23:14:33.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:533 which is executed by 69 tests
1857420685
23:14:34.070 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:43.808 [pool-378-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9733 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:44.191 [pool-379-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (194 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:44.196 [pool-380-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:14:44.197 [pool-377-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:44.197 [pool-377-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:44.197 [pool-377-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:533.
23:14:44.197 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
23:14:44.197 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:532 which is executed by 69 tests
1857420685
23:14:44.327 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:53.734 [pool-382-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9402 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:54.121 [pool-383-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (199 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:14:54.127 [pool-384-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:14:54.127 [pool-381-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:54.127 [pool-381-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:14:54.127 [pool-381-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:532.
23:14:54.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:03.614 [pool-386-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9482 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:04.010 [pool-387-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (207 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:04.016 [pool-388-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:15:04.016 [pool-385-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:04.016 [pool-385-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:04.016 [pool-385-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:532.
23:15:04.016 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
23:15:04.016 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:530 which is executed by 69 tests
1857420685
23:15:04.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:13.553 [pool-390-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9402 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:15:13.918 [pool-391-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (180 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:13.950 [pool-392-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:15:13.951 [pool-389-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:15:13.951 [pool-389-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:13.951 [pool-389-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:530.
23:15:13.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
23:15:13.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:529 which is executed by 69 tests
1857420685
23:15:14.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:23.640 [pool-394-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9553 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:15:23.991 [pool-395-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (164 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:333)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:24.020 [pool-396-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (28 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:15:24.020 [pool-393-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:15:24.021 [pool-393-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:24.021 [pool-393-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:529.
23:15:24.021 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
23:15:24.021 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:527 which is executed by 69 tests
1857420685
23:15:24.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
23:15:24.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:525 which is executed by 69 tests
1857420685
23:15:24.282 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
23:15:24.282 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:524 which is executed by 69 tests
1857420685
23:15:24.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
23:15:24.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:523 which is executed by 69 tests
1857420685
23:15:24.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
23:15:24.581 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:522 which is executed by 69 tests
1857420685
23:15:24.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
23:15:24.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:329 which is executed by 69 tests
1857420685
23:15:24.842 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
23:15:24.842 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:328 which is executed by 69 tests
1857420685
23:15:24.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:34.532 [pool-398-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9554 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:35.170 [pool-399-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (462 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:35.174 [pool-400-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:15:35.174 [pool-397-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:35.174 [pool-397-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:35.174 [pool-397-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.DfpField:328.
23:15:35.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
23:15:35.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:266 which is executed by 69 tests
1857420685
23:15:35.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
23:15:35.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:248 which is executed by 69 tests
1857420685
23:15:35.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
23:15:35.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1488 which is executed by 69 tests
68623
23:15:35.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
23:15:35.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1485 which is executed by 69 tests
68623
23:15:35.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:45.242 [pool-402-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9471 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:46.006 [pool-403-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (439 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:46.010 [pool-404-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:15:46.010 [pool-401-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:46.010 [pool-401-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:46.010 [pool-401-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1485.
23:15:46.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
23:15:46.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1484 which is executed by 69 tests
68623
23:15:46.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:55.634 [pool-406-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9455 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:56.363 [pool-407-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (441 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:15:56.367 [pool-408-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:15:56.367 [pool-405-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:56.367 [pool-405-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:15:56.367 [pool-405-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1484.
23:15:56.367 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
23:15:56.367 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1482 which is executed by 69 tests
68623
23:15:56.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:06.005 [pool-410-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9468 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:06.752 [pool-411-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (444 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:06.757 [pool-412-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:16:06.757 [pool-409-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:06.757 [pool-409-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:06.757 [pool-409-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1482.
23:16:06.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:16.251 [pool-414-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9489 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:16.979 [pool-415-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (447 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:16.984 [pool-416-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:16:16.984 [pool-413-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:16.984 [pool-413-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:16.984 [pool-413-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1482.
23:16:16.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
23:16:16.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1476 which is executed by 69 tests
68623
23:16:17.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:26.651 [pool-418-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9500 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:27.398 [pool-419-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (465 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:27.403 [pool-420-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:16:27.403 [pool-417-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:27.403 [pool-417-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:27.403 [pool-417-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1476.
23:16:27.403 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:36.807 [pool-422-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9399 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:37.552 [pool-423-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (463 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:37.557 [pool-424-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:16:37.557 [pool-421-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:37.557 [pool-421-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:37.558 [pool-421-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1476.
23:16:37.558 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
23:16:37.558 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1470 which is executed by 69 tests
68623
23:16:37.719 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:47.253 [pool-426-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9530 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:47.988 [pool-427-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (459 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:47.993 [pool-428-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:16:47.993 [pool-425-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:47.993 [pool-425-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:47.993 [pool-425-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1470.
23:16:47.993 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:57.554 [pool-430-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9556 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:58.261 [pool-431-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (430 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:16:58.265 [pool-432-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:16:58.265 [pool-429-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:58.265 [pool-429-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:16:58.265 [pool-429-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1470.
23:16:58.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
23:16:58.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1463 which is executed by 69 tests
68623
23:16:58.433 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:07.965 [pool-434-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9527 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:08.589 [pool-435-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (335 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:08.592 [pool-436-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:17:08.592 [pool-433-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:17:08.592 [pool-433-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:17:08.592 [pool-433-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1463.
23:17:08.592 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:18.047 [pool-438-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9450 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:18.637 [pool-439-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (305 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:18.639 [pool-440-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:17:18.639 [pool-437-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:17:18.640 [pool-437-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:17:18.640 [pool-437-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1463.
23:17:18.640 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
23:17:18.640 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1460 which is executed by 69 tests
68623
23:17:18.802 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:28.291 [pool-442-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9484 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:35.419 [pool-443-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6856 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:35.458 [pool-444-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (38 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:17:35.459 [pool-441-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:17:35.459 [pool-441-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:17:35.459 [pool-441-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1460.
23:17:35.459 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
23:17:35.459 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1459 which is executed by 69 tests
68623
23:17:35.633 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:17:45.134 [pool-446-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9495 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:21:05.429 [pool-445-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
23:21:05.430 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
23:21:05.430 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
23:21:05.430 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1458 which is executed by 69 tests
68623
23:21:05.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
23:21:05.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1457 which is executed by 69 tests
68623
23:21:05.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:21:15.292 [pool-449-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9530 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:217)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:551)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:209)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:174)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)
23:22:09.789 [pool-450-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (54224 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math.dfp.Dfp.<init>(Dfp.java:217)
    at org.apache.commons.math.dfp.DfpField.split(DfpField.java:551)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:209)
    at org.apache.commons.math.dfp.DfpField.<init>(DfpField.java:174)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:44)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:10.081 [pool-451-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (291 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:22:10.081 [pool-448-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): String index out of range: 0]
23:22:10.081 [pool-448-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:10.081 [pool-448-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1457.
23:22:10.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
23:22:10.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1456 which is executed by 69 tests
68623
23:22:10.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
23:22:10.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1454 which is executed by 69 tests
68623
23:22:10.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:20.143 [pool-453-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9708 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:20.869 [pool-454-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (440 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:20.873 [pool-455-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:22:20.873 [pool-452-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:20.874 [pool-452-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:20.874 [pool-452-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1454.
23:22:20.874 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:30.500 [pool-457-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9622 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:31.204 [pool-458-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (434 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:31.208 [pool-459-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:22:31.208 [pool-456-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:31.208 [pool-456-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:31.208 [pool-456-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1454.
23:22:31.208 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
23:22:31.208 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1438 which is executed by 69 tests
68623
23:22:31.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:40.956 [pool-461-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9582 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:41.665 [pool-462-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (440 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:41.669 [pool-463-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:22:41.669 [pool-460-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:41.669 [pool-460-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:41.669 [pool-460-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1438.
23:22:41.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
23:22:41.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1437 which is executed by 69 tests
68623
23:22:41.832 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:51.324 [pool-465-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9488 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:52.015 [pool-466-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (422 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:22:52.019 [pool-467-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:22:52.019 [pool-464-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:52.020 [pool-464-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:22:52.020 [pool-464-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1437.
23:22:52.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
23:22:52.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1419 which is executed by 69 tests
68623
23:22:52.196 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:01.657 [pool-469-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9456 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:02.362 [pool-470-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (435 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:02.366 [pool-471-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:23:02.366 [pool-468-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:02.366 [pool-468-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:02.366 [pool-468-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.dfp.Dfp:1419.
23:23:02.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
23:23:02.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1418 which is executed by 69 tests
68623
23:23:02.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
23:23:02.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:642 which is executed by 69 tests
68623
23:23:02.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
23:23:02.686 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:211 which is executed by 71 tests
1648821820
23:23:02.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
23:23:02.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:210 which is executed by 71 tests
1648821820
23:23:02.937 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:12.470 [pool-473-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9529 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:12.801 [pool-474-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (176 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:12.824 [pool-475-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:23:12.824 [pool-472-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:12.824 [pool-472-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:12.824 [pool-472-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:210.
23:23:12.825 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
23:23:12.825 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:201 which is executed by 72 tests
1648821820
23:23:12.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
23:23:12.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:199 which is executed by 72 tests
1648821820
23:23:13.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:22.651 [pool-477-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9571 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:22.995 [pool-478-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (188 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:22.997 [pool-479-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:23:22.997 [pool-476-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:22.997 [pool-476-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:22.997 [pool-476-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:199.
23:23:22.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
23:23:22.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:195 which is executed by 72 tests
1648821820
23:23:23.124 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:32.695 [pool-481-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9567 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:70)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:109)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:23:33.047 [pool-482-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (197 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:70)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:109)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:33.049 [pool-483-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:23:33.049 [pool-480-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 624]
23:23:33.049 [pool-480-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:33.049 [pool-480-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:195.
23:23:33.049 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
23:23:33.049 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:194 which is executed by 72 tests
1648821820
23:23:33.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:42.722 [pool-485-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9543 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:43.068 [pool-486-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (191 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:43.070 [pool-487-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:23:43.071 [pool-484-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:43.071 [pool-484-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:43.071 [pool-484-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:194.
23:23:43.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
23:23:43.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:193 which is executed by 72 tests
1648821820
23:23:43.210 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:52.739 [pool-489-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9524 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:70)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:23:53.128 [pool-490-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (234 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:70)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:23:53.135 [pool-491-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:23:53.135 [pool-488-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 624]
23:23:53.135 [pool-488-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:23:53.135 [pool-488-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:193.
23:23:53.135 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:02.735 [pool-493-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9596 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:70)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:24:03.093 [pool-494-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (202 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:70)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:03.100 [pool-495-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:24:03.100 [pool-492-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 624]
23:24:03.100 [pool-492-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:03.100 [pool-492-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:193.
23:24:03.100 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
23:24:03.100 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:192 which is executed by 72 tests
1648821820
23:24:03.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:12.774 [pool-497-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9545 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:13.139 [pool-498-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (207 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:13.145 [pool-499-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:24:13.145 [pool-496-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:13.145 [pool-496-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:13.145 [pool-496-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:192.
23:24:13.145 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
23:24:13.145 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:191 which is executed by 72 tests
1648821820
23:24:13.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:22.756 [pool-501-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9481 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:23.114 [pool-502-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (204 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:23.120 [pool-503-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:24:23.120 [pool-500-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:23.120 [pool-500-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:23.120 [pool-500-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:191.
23:24:23.120 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
23:24:23.120 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:190 which is executed by 72 tests
1648821820
23:24:23.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
23:24:23.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:189 which is executed by 72 tests
1648821820
23:24:23.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
23:24:23.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:188 which is executed by 72 tests
1648821820
23:24:23.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
23:24:23.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:187 which is executed by 72 tests
1648821820
23:24:23.619 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:33.240 [pool-505-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9617 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:33.590 [pool-506-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (196 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:33.592 [pool-507-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:24:33.592 [pool-504-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:33.592 [pool-504-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:33.592 [pool-504-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:187.
23:24:33.592 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
23:24:33.592 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:183 which is executed by 72 tests
1648821820
23:24:33.717 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:43.292 [pool-509-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9571 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 2
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:57)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:109)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:24:43.646 [pool-510-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (201 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[2]
java.lang.ArrayIndexOutOfBoundsException: 2    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:57)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:109)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:43.650 [pool-511-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:24:43.650 [pool-508-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 2]
23:24:43.650 [pool-508-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:43.650 [pool-508-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:183.
23:24:43.650 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
23:24:43.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:182 which is executed by 72 tests
1648821820
23:24:43.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:53.287 [pool-513-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9508 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 2
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:57)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:24:53.637 [pool-514-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (195 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[2]
java.lang.ArrayIndexOutOfBoundsException: 2    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:57)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:24:53.644 [pool-515-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:24:53.644 [pool-512-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 2]
23:24:53.644 [pool-512-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:24:53.644 [pool-512-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:182.
23:24:53.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:03.153 [pool-517-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9504 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 2
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:57)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:25:03.500 [pool-518-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (193 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[2]
java.lang.ArrayIndexOutOfBoundsException: 2    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:57)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:03.507 [pool-519-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:25:03.507 [pool-516-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 2]
23:25:03.507 [pool-516-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:03.507 [pool-516-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:182.
23:25:03.507 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
23:25:03.507 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:180 which is executed by 72 tests
1648821820
23:25:03.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:13.151 [pool-521-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9515 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:109)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:25:13.508 [pool-522-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (202 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:109)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:13.511 [pool-523-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:25:13.511 [pool-520-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 624]
23:25:13.511 [pool-520-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:13.511 [pool-520-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:180.
23:25:13.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
23:25:13.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:179 which is executed by 72 tests
1648821820
23:25:13.635 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:23.146 [pool-525-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9506 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:23.501 [pool-526-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (202 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:23.503 [pool-527-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:25:23.503 [pool-524-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:23.503 [pool-524-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:23.503 [pool-524-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:179.
23:25:23.503 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
23:25:23.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:178 which is executed by 72 tests
1648821820
23:25:23.629 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:33.165 [pool-529-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9532 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:25:33.518 [pool-530-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (199 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:33.525 [pool-531-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:25:33.525 [pool-528-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 624]
23:25:33.525 [pool-528-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:33.525 [pool-528-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:178.
23:25:33.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:42.962 [pool-533-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9432 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:25:43.327 [pool-534-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (212 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:108)
    at org.apache.commons.math.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:43.335 [pool-535-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:25:43.335 [pool-532-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): 624]
23:25:43.335 [pool-532-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:43.335 [pool-532-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:178.
23:25:43.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
23:25:43.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:177 which is executed by 72 tests
1648821820
23:25:43.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:52.962 [pool-537-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9497 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:53.329 [pool-538-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (213 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:25:53.335 [pool-539-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:25:53.335 [pool-536-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:53.335 [pool-536-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:25:53.335 [pool-536-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:177.
23:25:53.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
23:25:53.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:176 which is executed by 72 tests
1648821820
23:25:53.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:02.918 [pool-541-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9453 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:03.277 [pool-542-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (206 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:03.283 [pool-543-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:26:03.283 [pool-540-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:03.283 [pool-540-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:03.283 [pool-540-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:176.
23:26:03.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
23:26:03.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:175 which is executed by 72 tests
1648821820
23:26:03.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
23:26:03.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:174 which is executed by 72 tests
1648821820
23:26:03.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
23:26:03.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:173 which is executed by 72 tests
1648821820
23:26:03.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
23:26:03.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:172 which is executed by 72 tests
1648821820
23:26:03.803 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:13.309 [pool-545-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9501 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:13.646 [pool-546-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (182 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:13.670 [pool-547-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (24 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:26:13.670 [pool-544-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:13.670 [pool-544-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:13.670 [pool-544-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:172.
23:26:13.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
23:26:13.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:170 which is executed by 72 tests
1648821820
23:26:13.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
23:26:13.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:169 which is executed by 72 tests
1648821820
23:26:13.918 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
23:26:13.918 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:168 which is executed by 72 tests
1648821820
23:26:14.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:23.544 [pool-549-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9498 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:23.912 [pool-550-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (215 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:23.914 [pool-551-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:26:23.914 [pool-548-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:23.914 [pool-548-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:23.914 [pool-548-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:168.
23:26:23.914 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
23:26:23.914 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:163 which is executed by 72 tests
1648821820
23:26:24.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:33.522 [pool-553-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9462 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:33.864 [pool-554-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (188 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:33.866 [pool-555-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:26:33.867 [pool-552-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:33.867 [pool-552-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:33.867 [pool-552-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:163.
23:26:33.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:43.382 [pool-557-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9511 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:43.768 [pool-558-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (233 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StackOverflowError
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:28)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:81)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:104)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:67)
23:26:43.787 [pool-559-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (17 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[null]
java.lang.StackOverflowError    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:28)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:81)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:55)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:104)
    at org.apache.commons.math.random.MersenneTwister.setSeed(MersenneTwister.java:67)

23:26:43.787 [pool-556-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:43.787 [pool-556-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): null]
23:26:43.787 [pool-556-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:163.
23:26:43.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
23:26:43.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2977 which is executed by 73 tests
1033054629
23:26:43.965 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:44.022 [pool-561-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:44.334 [pool-562-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:44.335 [pool-563-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:44.337 [pool-564-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:44.338 [pool-565-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:26:44.338 [pool-560-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:44.338 [pool-560-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:44.338 [pool-560-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2977.
23:26:44.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:44.392 [pool-567-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:44.717 [pool-568-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:44.718 [pool-569-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:44.720 [pool-570-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:44.721 [pool-571-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:26:44.721 [pool-566-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:44.721 [pool-566-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:44.721 [pool-566-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2977.
23:26:44.722 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
23:26:44.722 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2973 which is executed by 74 tests
1033054629
23:26:44.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:44.954 [pool-573-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:45.266 [pool-574-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:45.267 [pool-575-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:45.269 [pool-576-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:45.270 [pool-577-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:26:45.270 [pool-572-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:45.270 [pool-572-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:45.270 [pool-572-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2973.
23:26:45.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:45.325 [pool-579-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:45.638 [pool-580-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:45.639 [pool-581-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:26:45.641 [pool-582-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:26:45.642 [pool-583-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:26:45.642 [pool-578-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:45.642 [pool-578-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:26:45.642 [pool-578-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:2973.
23:26:45.642 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
23:26:45.642 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:1127 which is executed by 80 tests
-1679819631
23:26:45.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
23:26:45.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:152 which is executed by 99 tests
1648821820
23:26:45.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
23:26:45.905 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:150 which is executed by 99 tests
1648821820
23:26:46.037 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:55.496 [pool-585-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9454 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:55.851 [pool-586-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (197 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:26:55.856 [pool-587-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:26:55.856 [pool-584-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:55.856 [pool-584-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:26:55.856 [pool-584-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:150.
23:26:55.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
23:26:55.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:149 which is executed by 99 tests
1648821820
23:26:55.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:05.414 [pool-589-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9428 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:05.776 [pool-590-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (210 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:05.781 [pool-591-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:27:05.781 [pool-588-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:27:05.781 [pool-588-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:27:05.781 [pool-588-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:149.
23:27:05.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
23:27:05.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:146 which is executed by 99 tests
1648821820
23:27:05.906 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:15.327 [pool-593-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9416 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:15.695 [pool-594-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (216 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:15.697 [pool-595-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:27:15.697 [pool-592-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:27:15.697 [pool-592-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:27:15.698 [pool-592-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:146.
23:27:15.698 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
23:27:15.698 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:145 which is executed by 99 tests
1648821820
23:27:15.822 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:25.375 [pool-597-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9549 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:25.723 [pool-598-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (196 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:25.725 [pool-599-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:27:25.725 [pool-596-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:27:25.725 [pool-596-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest): FastMath should implement all StrictMath methods]
23:27:25.726 [pool-596-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.random.MersenneTwister:145.
23:27:25.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
23:27:25.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:144 which is executed by 99 tests
1648821820
23:27:25.850 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
23:27:25.850 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:2337 which is executed by 585 tests
-1550426518
23:27:26.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
23:27:26.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:2334 which is executed by 590 tests
-1550426518
23:27:26.186 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:26.260 [pool-601-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:26.635 [pool-602-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:26.636 [pool-603-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:26.639 [pool-604-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:26.641 [pool-605-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:26.641 [pool-600-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:26.641 [pool-600-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:26.641 [pool-600-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:2334.
23:27:26.641 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:26.704 [pool-607-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:27.052 [pool-608-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (43 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:27.054 [pool-609-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.exception.NullArgumentException: null is not allowed
    at org.apache.commons.math.util.MathUtils.checkNotNull(MathUtils.java:1114)
    at org.apache.commons.math.complex.Complex.add(Complex.java:157)
    at org.apache.commons.math.complex.Complex.atan(Complex.java:583)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:27.065 [pool-610-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (11 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null is not allowed]
org.apache.commons.math.exception.NullArgumentException: null is not allowed    at org.apache.commons.math.util.MathUtils.checkNotNull(MathUtils.java:1114)
    at org.apache.commons.math.complex.Complex.add(Complex.java:157)
    at org.apache.commons.math.complex.Complex.atan(Complex.java:583)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.exception.NullArgumentException: null is not allowed
    at org.apache.commons.math.util.MathUtils.checkNotNull(MathUtils.java:1114)
    at org.apache.commons.math.complex.Complex.divide(Complex.java:251)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:231)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
23:27:27.067 [pool-611-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[null is not allowed]
org.apache.commons.math.exception.NullArgumentException: null is not allowed    at org.apache.commons.math.util.MathUtils.checkNotNull(MathUtils.java:1114)
    at org.apache.commons.math.complex.Complex.divide(Complex.java:251)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:231)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

23:27:27.067 [pool-606-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:27.067 [pool-606-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null is not allowed, testDivideZero(org.apache.commons.math.complex.ComplexTest): null is not allowed]
23:27:27.067 [pool-606-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.MathUtils:2334.
23:27:27.067 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
23:27:27.067 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3882 which is executed by 247 tests
1033054629
23:27:27.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
23:27:27.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1435 which is executed by 434 tests
1033054629
23:27:27.433 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:27.489 [pool-613-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 1.0493061443340548)
(-1.5707963267948966, 1.0846819692426812)
(-1.5707963267948966, 1.1259628536244661)
(-1.5707963267948966, 1.1746377748307648)
(-1.5707963267948966, 1.2329431437179064)
(-1.5707963267948966, 1.3047189562170503)
(-1.5707963267948966, 1.3958797346140275)
(-1.5707963267948966, 1.518186169728115)
(-1.5707963267948966, 1.6989476363991851)
(-1.5707963267948966, 2.021702998525946)
(NaN, NaN)
(0.0, 1.9722194895832201)
(0.0, 1.5986122886681096)
(0.0, 1.3669557881580754)
(0.0, 1.1931471805599454)
(0.0, 1.0493061443340548)
(0.0, 0.9232302995703838)
(0.0, 0.8092378564455549)
(0.0, 0.7022441314614823)
(0.0, 0.6000023629987077)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:27.828 [pool-614-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:27.829 [pool-615-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:27.831 [pool-616-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:27.832 [pool-617-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:27.832 [pool-612-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:27.832 [pool-612-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:27.832 [pool-612-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1435.
23:27:27.832 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #143
23:27:27.832 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1434 which is executed by 434 tests
1033054629
23:27:28.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:28.062 [pool-619-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5846819692426813)
(-1.5707963267948966, 0.625962853624466)
(-1.5707963267948966, 0.6746377748307648)
(-1.5707963267948966, 0.7329431437179063)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.018186169728115)
(-1.5707963267948966, 1.1989476363991851)
(-1.5707963267948966, 1.5217029985259456)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681096)
(0.0, 0.8669557881580753)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42323029957038383)
(0.0, 0.30923785644555496)
(0.0, 0.20224413146148232)
(0.0, 0.1000023629987077)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:28.372 [pool-620-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:28.373 [pool-621-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:28.375 [pool-622-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:28.376 [pool-623-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:28.376 [pool-618-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:28.376 [pool-618-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:28.376 [pool-618-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1434.
23:27:28.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #144
23:27:28.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1433 which is executed by 434 tests
1033054629
23:27:28.548 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:28.603 [pool-625-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.585035718990003)
(-1.5707963267948966, 0.6263816140934777)
(-1.5707963267948966, 0.6749634370105302)
(-1.5707963267948966, 0.7331685720317024)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.018441011726076)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5222614497545377)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673006157442822)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42364906003939545)
(0.0, 0.3095196630135265)
(0.0, 0.2027327308100164)
(0.0, 0.10033542987853723)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:28.912 [pool-626-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:28.913 [pool-627-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:28.915 [pool-628-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:28.916 [pool-629-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:28.916 [pool-624-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:28.916 [pool-624-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:28.916 [pool-624-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1433.
23:27:28.916 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #145
23:27:28.916 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1432 which is executed by 434 tests
1033054629
23:27:29.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:29.144 [pool-631-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356262945335)
(-1.5707963267948966, 0.6263814841969366)
(-1.5707963267948966, 0.6749633584506374)
(-1.5707963267948966, 0.7331685343887953)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636190805)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5222612187413713)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276657161)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42364893014285443)
(0.0, 0.30951960418764374)
(0.0, 0.20273255397348056)
(0.0, 0.10033534770553987)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:29.451 [pool-632-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (30 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:29.452 [pool-633-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:29.454 [pool-634-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:29.455 [pool-635-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:29.455 [pool-630-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:29.455 [pool-630-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:29.455 [pool-630-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1432.
23:27:29.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #146
23:27:29.456 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1431 which is executed by 434 tests
1033054629
23:27:29.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:29.687 [pool-637-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251385)
(-1.5707963267948966, 0.6263814842477058)
(-1.5707963267948966, 0.6749633584745157)
(-1.5707963267948966, 0.7331685343967154)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.018440963630523)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5222612188617801)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940632)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936236)
(0.0, 0.3095196042031161)
(0.0, 0.20273255405412263)
(0.0, 0.10033534773108436)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:30.000 [pool-638-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:30.001 [pool-639-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:30.003 [pool-640-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:30.004 [pool-641-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:30.004 [pool-636-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:30.004 [pool-636-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:30.004 [pool-636-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1431.
23:27:30.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #147
23:27:30.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1430 which is executed by 434 tests
1033054629
23:27:30.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:30.237 [pool-643-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:30.557 [pool-644-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (30 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:30.558 [pool-645-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:30.560 [pool-646-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:30.561 [pool-647-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:30.561 [pool-642-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:30.561 [pool-642-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:30.561 [pool-642-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1430.
23:27:30.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #148
23:27:30.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1429 which is executed by 434 tests
1033054629
23:27:30.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:30.790 [pool-649-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:31.122 [pool-650-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:31.123 [pool-651-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:31.125 [pool-652-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:31.126 [pool-653-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:31.126 [pool-648-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:31.126 [pool-648-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:31.127 [pool-648-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1429.
23:27:31.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #149
23:27:31.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1315 which is executed by 435 tests
1033054629
23:27:31.299 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:31.355 [pool-655-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:31.664 [pool-656-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:31.665 [pool-657-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:31.666 [pool-658-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:31.667 [pool-659-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:31.667 [pool-654-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:31.667 [pool-654-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:31.667 [pool-654-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1315.
23:27:31.667 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:31.722 [pool-661-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:32.030 [pool-662-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (30 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:32.031 [pool-663-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3155450954010183)
(0.0, 0.20276612896226132)
(0.0, 0.10033535989281407)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:32.032 [pool-664-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:32.033 [pool-665-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:32.033 [pool-660-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:32.033 [pool-660-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:32.033 [pool-660-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1315.
23:27:32.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #150
23:27:32.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1256 which is executed by 448 tests
1033054629
23:27:32.204 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #151
23:27:32.205 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1484 which is executed by 582 tests
1033054629
23:27:32.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #152
23:27:32.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1479 which is executed by 582 tests
1033054629
23:27:32.547 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:32.604 [pool-667-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:32.912 [pool-668-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:32.914 [pool-669-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:32.916 [pool-670-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:32.917 [pool-671-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:32.917 [pool-666-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:32.917 [pool-666-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:32.917 [pool-666-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1479.
23:27:32.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:32.970 [pool-673-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:33.279 [pool-674-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:33.280 [pool-675-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math.util.FastMath.log(FastMath.java:871)
    at org.apache.commons.math.util.FastMath.log(FastMath.java:689)
    at org.apache.commons.math.complex.Complex.log(Complex.java:750)
    at org.apache.commons.math.complex.Complex.atan(Complex.java:583)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:33.282 [pool-676-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.util.FastMath.log(FastMath.java:871)
    at org.apache.commons.math.util.FastMath.log(FastMath.java:689)
    at org.apache.commons.math.complex.Complex.log(Complex.java:750)
    at org.apache.commons.math.complex.Complex.atan(Complex.java:583)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:577)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:33.282 [pool-677-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:33.282 [pool-672-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:33.282 [pool-672-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:33.283 [pool-672-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1479.
23:27:33.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #153
23:27:33.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1477 which is executed by 582 tests
1033054629
23:27:33.454 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:33.511 [pool-679-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:33.819 [pool-680-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:33.820 [pool-681-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:33.822 [pool-682-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:33.823 [pool-683-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:33.823 [pool-678-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:33.823 [pool-678-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:33.823 [pool-678-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1477.
23:27:33.823 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #154
23:27:33.823 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1476 which is executed by 582 tests
1033054629
23:27:33.995 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:34.050 [pool-685-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:34.356 [pool-686-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:34.357 [pool-687-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:34.359 [pool-688-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:34.360 [pool-689-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:34.360 [pool-684-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:34.360 [pool-684-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:34.360 [pool-684-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1476.
23:27:34.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #155
23:27:34.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1475 which is executed by 582 tests
1033054629
23:27:34.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:34.592 [pool-691-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170503)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936018)
(0.0, 0.30951960420311164)
(0.0, 0.20273255405408214)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:34.914 [pool-692-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:34.915 [pool-693-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:34.917 [pool-694-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:34.918 [pool-695-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:34.918 [pool-690-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:34.918 [pool-690-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:34.918 [pool-690-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1475.
23:27:34.918 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #156
23:27:34.918 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1474 which is executed by 582 tests
1033054629
23:27:35.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:35.148 [pool-697-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:35.458 [pool-698-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:35.459 [pool-699-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:35.461 [pool-700-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:35.462 [pool-701-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:35.462 [pool-696-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:35.462 [pool-696-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:35.463 [pool-696-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1474.
23:27:35.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #157
23:27:35.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1472 which is executed by 582 tests
1033054629
23:27:35.634 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:35.692 [pool-703-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251274)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:35.998 [pool-704-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:35.999 [pool-705-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:36.001 [pool-706-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:36.002 [pool-707-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:36.002 [pool-702-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:36.002 [pool-702-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:36.002 [pool-702-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1472.
23:27:36.003 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #158
23:27:36.003 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1471 which is executed by 582 tests
1033054629
23:27:36.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:36.228 [pool-709-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061532987715)
(-1.5707963267948966, 0.585035632560249)
(-1.5707963267948966, 0.6263814826898756)
(-1.5707963267948966, 0.6749633349933412)
(-1.5707963267948966, 0.7331685326816989)
(-1.5707963267948966, 0.8047189544466259)
(-1.5707963267948966, 0.8958797435787442)
(-1.5707963267948966, 1.0184409525031513)
(-1.5707963267948966, 1.1989476354162578)
(-1.5707963267948966, 1.522261219206322)
(NaN, NaN)
(0.0, 1.4722194931561)
(0.0, 1.0986122907440548)
(0.0, 0.8673005350204327)
(0.0, 0.6931471805599453)
(0.0, 0.5493061532987715)
(0.0, 0.423648934572238)
(0.0, 0.30951961047023246)
(0.0, 0.20273253988522838)
(0.0, 0.10033534247008372)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:36.536 [pool-710-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:36.537 [pool-711-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:36.539 [pool-712-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:36.540 [pool-713-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:36.540 [pool-708-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:36.540 [pool-708-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:36.540 [pool-708-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1471.
23:27:36.540 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #159
23:27:36.540 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1470 which is executed by 582 tests
1033054629
23:27:36.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:36.767 [pool-715-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340548)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340548)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:37.075 [pool-716-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:37.076 [pool-717-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:37.078 [pool-718-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:37.079 [pool-719-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:37.079 [pool-714-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:37.079 [pool-714-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:37.079 [pool-714-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1470.
23:27:37.079 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #160
23:27:37.079 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1469 which is executed by 582 tests
1033054629
23:27:37.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:37.305 [pool-721-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:37.610 [pool-722-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:37.611 [pool-723-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:37.613 [pool-724-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:37.614 [pool-725-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:37.614 [pool-720-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:37.614 [pool-720-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:37.614 [pool-720-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1469.
23:27:37.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #161
23:27:37.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1467 which is executed by 582 tests
1033054629
23:27:37.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:37.842 [pool-727-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251274)
(-1.5707963267948966, 0.626381484247684)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.01844096363052)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:38.147 [pool-728-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:38.148 [pool-729-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:38.150 [pool-730-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:38.151 [pool-731-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:38.151 [pool-726-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:38.151 [pool-726-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:38.151 [pool-726-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1467.
23:27:38.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #162
23:27:38.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1466 which is executed by 582 tests
1033054629
23:27:38.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:38.378 [pool-733-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493060856817372)
(-1.5707963267948966, 0.5850355676728096)
(-1.5707963267948966, 0.6263814255953662)
(-1.5707963267948966, 0.67496329982219)
(-1.5707963267948966, 0.7331684170920783)
(-1.5707963267948966, 0.8047188389124149)
(-1.5707963267948966, 0.8958796173093924)
(-1.5707963267948966, 1.0184408463258845)
(-1.5707963267948966, 1.1989474604422325)
(-1.5707963267948966, 1.5222609842524406)
(NaN, NaN)
(0.0, 1.47221925497395)
(0.0, 1.098612112711157)
(0.0, 0.867300410389418)
(0.0, 0.6931470632553101)
(0.0, 0.5493060856817372)
(0.0, 0.4236488715412841)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:38.683 [pool-734-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:38.684 [pool-735-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:38.686 [pool-736-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:38.687 [pool-737-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:38.687 [pool-732-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:38.687 [pool-732-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:38.687 [pool-732-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1466.
23:27:38.688 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #163
23:27:38.688 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1465 which is executed by 582 tests
1033054629
23:27:38.860 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:38.916 [pool-739-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251274)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:39.223 [pool-740-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:39.224 [pool-741-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:39.226 [pool-742-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:39.227 [pool-743-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:39.227 [pool-738-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:39.227 [pool-738-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:39.227 [pool-738-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1465.
23:27:39.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #164
23:27:39.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1464 which is executed by 582 tests
1033054629
23:27:39.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:39.464 [pool-745-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:39.771 [pool-746-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:39.772 [pool-747-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:39.774 [pool-748-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:39.775 [pool-749-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:39.775 [pool-744-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:39.775 [pool-744-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:39.775 [pool-744-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1464.
23:27:39.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #165
23:27:39.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1462 which is executed by 582 tests
1033054629
23:27:39.946 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:40.002 [pool-751-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.01844096363052)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936018)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:40.308 [pool-752-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:40.309 [pool-753-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:40.312 [pool-754-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:40.313 [pool-755-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:40.313 [pool-750-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:40.313 [pool-750-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:40.313 [pool-750-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1462.
23:27:40.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #166
23:27:40.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1461 which is executed by 582 tests
1033054629
23:27:40.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:40.542 [pool-757-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5847998487600455)
(-1.5707963267948966, 0.626102388510602)
(-1.5707963267948966, 0.6747462974769595)
(-1.5707963267948966, 0.7330182714354023)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.0182710978228728)
(-1.5707963267948966, 1.1989476363991851)
(-1.5707963267948966, 1.5218890565817829)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8670706954675289)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42336983445651977)
(0.0, 0.309331768444488)
(0.0, 0.2024069272109222)
(0.0, 0.10011335243372903)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:40.848 [pool-758-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:40.849 [pool-759-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:40.851 [pool-760-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:40.851 [pool-761-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:40.852 [pool-756-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:40.852 [pool-756-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:40.852 [pool-756-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1461.
23:27:40.852 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #167
23:27:40.852 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1460 which is executed by 582 tests
1033054629
23:27:41.023 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:41.079 [pool-763-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.01844096363052)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936018)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:41.388 [pool-764-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:41.389 [pool-765-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:41.391 [pool-766-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:41.391 [pool-767-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:41.392 [pool-762-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:41.392 [pool-762-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:41.392 [pool-762-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1460.
23:27:41.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #168
23:27:41.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1459 which is executed by 582 tests
1033054629
23:27:41.563 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:41.618 [pool-769-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:41.924 [pool-770-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:41.925 [pool-771-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:41.927 [pool-772-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:41.927 [pool-773-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:41.927 [pool-768-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:41.928 [pool-768-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:41.928 [pool-768-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1459.
23:27:41.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #169
23:27:41.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1457 which is executed by 582 tests
1033054629
23:27:42.099 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:42.153 [pool-775-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:42.460 [pool-776-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:42.461 [pool-777-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:42.463 [pool-778-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:42.463 [pool-779-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:42.463 [pool-774-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:42.464 [pool-774-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:42.464 [pool-774-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1457.
23:27:42.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #170
23:27:42.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1456 which is executed by 582 tests
1033054629
23:27:42.635 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:42.692 [pool-781-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.346573581315256)
(-1.5707963267948966, 0.34680936160993264)
(-1.5707963267948966, 0.3468526875748629)
(-1.5707963267948966, 0.34679067475868747)
(-1.5707963267948966, 0.6932974452362711)
(-1.5707963267948966, 0.6931471823303695)
(-1.5707963267948966, 0.6931471715952288)
(-1.5707963267948966, 0.6933170574949609)
(-1.5707963267948966, 1.0397207718228456)
(-1.5707963267948966, 1.3866665230552078)
(NaN, NaN)
(0.0, 1.3862943575470112)
(0.0, 1.0397207687639731)
(0.0, 0.6933770054600902)
(0.0, 0.6931471805599453)
(0.0, 0.346573581315256)
(0.0, 0.3468526816384183)
(0.0, 1.8782949150272628E-4)
(0.0, 3.256410120136356E-4)
(0.0, 2.2200055833849943E-4)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:42.999 [pool-782-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:43.000 [pool-783-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:43.002 [pool-784-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:43.003 [pool-785-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:43.003 [pool-780-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:43.003 [pool-780-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:43.003 [pool-780-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1456.
23:27:43.003 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #171
23:27:43.003 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1455 which is executed by 582 tests
1033054629
23:27:43.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #172
23:27:43.175 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1454 which is executed by 582 tests
1033054629
23:27:43.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #173
23:27:43.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1453 which is executed by 582 tests
1033054629
23:27:43.521 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #174
23:27:43.521 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1452 which is executed by 582 tests
1033054629
23:27:43.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #175
23:27:43.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1378 which is executed by 582 tests
1033054629
23:27:43.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:43.935 [pool-787-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5847998487600455)
(-1.5707963267948966, 0.626102388510602)
(-1.5707963267948966, 0.6747462974769596)
(-1.5707963267948966, 0.7330182714354023)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.018271097822873)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5218890565817829)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681098)
(0.0, 0.8670706954675288)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4233698344565198)
(0.0, 0.309331768444488)
(0.0, 0.2024069272109222)
(0.0, 0.10011335243372903)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:44.255 [pool-788-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:44.256 [pool-789-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:44.258 [pool-790-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:44.259 [pool-791-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:44.259 [pool-786-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:44.259 [pool-786-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:44.259 [pool-786-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1378.
23:27:44.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:44.314 [pool-793-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:44.622 [pool-794-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (31 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:44.623 [pool-795-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:44.625 [pool-796-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:44.626 [pool-797-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:44.626 [pool-792-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:44.626 [pool-792-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:44.626 [pool-792-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1378.
23:27:44.627 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #176
23:27:44.627 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1376 which is executed by 582 tests
1033054629
23:27:44.798 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #177
23:27:44.798 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1375 which is executed by 582 tests
1033054629
23:27:44.970 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #178
23:27:44.970 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1373 which is executed by 582 tests
1033054629
23:27:45.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #179
23:27:45.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1362 which is executed by 582 tests
1033054629
23:27:45.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #180
23:27:45.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1314 which is executed by 594 tests
1033054629
23:27:45.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:45.541 [pool-799-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:45.851 [pool-800-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:45.852 [pool-801-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:45.854 [pool-802-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:45.855 [pool-803-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:45.855 [pool-798-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:45.855 [pool-798-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:45.855 [pool-798-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1314.
23:27:45.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:45.910 [pool-805-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:46.219 [pool-806-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:46.220 [pool-807-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:46.222 [pool-808-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:46.223 [pool-809-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:46.223 [pool-804-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:46.223 [pool-804-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:46.223 [pool-804-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1314.
23:27:46.223 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #181
23:27:46.223 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1294 which is executed by 594 tests
1033054629
23:27:46.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:46.451 [pool-811-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:46.758 [pool-812-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:46.759 [pool-813-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:46.761 [pool-814-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:46.762 [pool-815-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:27:46.762 [pool-810-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:46.762 [pool-810-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:27:46.762 [pool-810-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1294.
23:27:46.762 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:46.815 [pool-817-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:27:47.125 [pool-818-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:27:47.126 [pool-819-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.34657359027997264)
(-1.5707963267948966, 0.44690893801104825)
(-1.5707963267948966, 0.5493061443340547)
(-1.5707963267948966, 0.6560931944830841)
(-1.5707963267948966, -0.20273255405408264)
(-1.5707963267948966, 0.34657359027997264)
(-1.5707963267948966, 0.6931471805599455)
(-1.5707963267948966, 0.9962150823451029)
(-1.5707963267948966, 0.8958797346140281)
(-1.5707963267948966, 1.1512925464970212)
(NaN, NaN)
(0.0, 0.8958797346140281)
(0.0, 0.34657359027997353)
(0.0, 0.6019864021629678)
23:31:07.127 [pool-816-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
23:31:07.127 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
23:31:07.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #182
23:31:07.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1292 which is executed by 594 tests
1033054629
23:31:07.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #183
23:31:07.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1283 which is executed by 595 tests
1033054629
23:31:07.471 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:07.527 [pool-822-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:07.844 [pool-823-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:07.845 [pool-824-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:07.847 [pool-825-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:07.848 [pool-826-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:31:07.848 [pool-821-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:07.848 [pool-821-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:07.848 [pool-821-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1283.
23:31:07.848 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:07.903 [pool-828-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:08.222 [pool-829-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:08.223 [pool-830-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:08.226 [pool-831-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:08.226 [pool-832-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:31:08.226 [pool-827-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:08.227 [pool-827-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:08.227 [pool-827-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1283.
23:31:08.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #184
23:31:08.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1272 which is executed by 595 tests
1033054629
23:31:08.398 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:08.461 [pool-834-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (56 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:08.780 [pool-835-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (35 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:08.781 [pool-836-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:08.783 [pool-837-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:08.784 [pool-838-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:31:08.784 [pool-833-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:08.784 [pool-833-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:08.784 [pool-833-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1272.
23:31:08.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:08.843 [pool-840-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:09.157 [pool-841-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (36 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:09.159 [pool-842-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:09.161 [pool-843-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:09.162 [pool-844-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:31:09.162 [pool-839-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:09.162 [pool-839-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:09.162 [pool-839-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1272.
23:31:09.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #185
23:31:09.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1269 which is executed by 595 tests
1033054629
23:31:09.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #186
23:31:09.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1266 which is executed by 596 tests
1033054629
23:31:09.507 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:09.566 [pool-846-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:09.870 [pool-847-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:09.871 [pool-848-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:09.873 [pool-849-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:09.874 [pool-850-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:31:09.874 [pool-845-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:09.874 [pool-845-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:09.874 [pool-845-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1266.
23:31:09.874 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:09.930 [pool-852-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:10.234 [pool-853-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:10.235 [pool-854-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
23:31:10.237 [pool-855-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
23:31:10.238 [pool-856-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

23:31:10.238 [pool-851-thread-1] DEBUG tests.output - Failing tests with false: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:10.238 [pool-851-thread-1] DEBUG tests.output - Failing tests with true: 
[testAtanI(org.apache.commons.math.complex.ComplexTest): null, testDivideZero(org.apache.commons.math.complex.ComplexTest): expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
23:31:10.239 [pool-851-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.FastMath:1266.
23:31:10.239 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #187
23:31:10.239 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:302 which is executed by 884 tests
1033054629
23:31:10.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #188
23:31:10.408 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3410 which is executed by 1157 tests
1033054629
23:31:10.593 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
23:31:10.835 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 571
23:31:10.835 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 3599
23:31:10.835 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 168
23:31:10.835 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
23:31:10.835 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
23:31:10.838 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
23:31:10.839 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
23:31:10.839 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 1414029ms
23:31:10.839 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
Command exited with non-zero status 255
2584.47user 25.68system 23:36.10elapsed 184%CPU (0avgtext+0avgdata 3081492maxresident)k
51016inputs+12680outputs (4major+1064775minor)pagefaults 0swaps


Node: petitprince-1.luxembourg.grid5000.fr



Date: Wed Nov 28 23:31:11 EST 2018

