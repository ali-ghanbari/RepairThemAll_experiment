cd /tmp/DynaMoth_Defects4J_Math_47;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -d64 -Xmx4g -Xms1g -XX:MaxPermSize=1024m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSClassUnloadingEnabled -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis dynamoth \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/main/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/DynaMoth_Defects4J_Math_47/target/classes/:/tmp/DynaMoth_Defects4J_Math_47/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1024m; support was removed in 8.0
10:21:10.715 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
10:21:10.720 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/DynaMoth_Defects4J_Math_47/target/classes/, file:/tmp/DynaMoth_Defects4J_Math_47/target/test-classes/, file:/tmp/DynaMoth_Defects4J_Math_47/target/classes/, file:/tmp/DynaMoth_Defects4J_Math_47/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
10:21:10.720 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
10:21:10.720 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
10:21:10.723 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@2ff4f00f', projectTests=[org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.RetryRunnerTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.FunctionUtilsTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.GaussianTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.HarmonicOscillatorTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogisticTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.LogitTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.SigmoidTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.function.StepFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.interpolation.UnivariateRealPeriodicInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.IllinoisSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolver2Test, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.PegasusSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.SecantSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpDecTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpMathTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.dfp.DfpTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.AbtractIntegerDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.DimensionMismatchExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.MaxCountExceededExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NonMonotonousSequenceExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.OutOfRangeExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ArgUtilsTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.exception.util.ExceptionContextTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.filter.KalmanFilterTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.LineTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PlaneTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.RotationTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.SubLineTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.LineTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.euclidean.twod.SubLineTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.RealVectorTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.events.OverlappingEventsTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.CMAESOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.PowellOptimizerTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.GaussianFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BracketFinderTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.BrentOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.BitsStreamGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.RandomGeneratorAbstractTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well1024aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937aTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well19937cTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497aTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well44497bTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.random.Well512aTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.correlation.StorelessCovarianceTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.MannWhitneyUTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathStrictComparisonTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTest, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.FastMathTestPerformance, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.IncrementorTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.MultidimensionalCounterTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.PairTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
10:21:10.724 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
10:21:10.738 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 910 MB
10:21:10.739 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
10:21:10.739 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 990 MB
10:21:10.739 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
10:21:10.740 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
10:21:10.740 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
10:24:01.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
10:24:01.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:1179 which is executed by 2 tests
-1679819631
10:24:01.857 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
10:24:01.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:257 which is executed by 4 tests
-1679819631
10:24:02.243 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:02.376 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (87 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:03.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
10:24:03.324 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:583 which is executed by 3 tests
-1679819631
10:24:03.489 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
10:24:03.490 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:256 which is executed by 15 tests
-1679819631
10:24:03.652 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:03.731 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (68 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:04.093 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:04.170 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (68 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:04.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
10:24:04.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:579 which is executed by 4 tests
-1679819631
10:24:04.722 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:04.783 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:05.078 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:05.141 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:05.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
10:24:05.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2994 which is executed by 4 tests
1033054629
10:24:05.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:05.709 [pool-34-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:06.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
10:24:06.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:252 which is executed by 17 tests
-1679819631
10:24:06.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:06.544 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:06.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:06.877 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (57 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:07.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
10:24:07.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:251 which is executed by 17 tests
-1679819631
10:24:07.295 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:07.371 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (59 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:07.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
10:24:07.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:270 which is executed by 5 tests
-1679819631
10:24:07.869 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:07.943 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (67 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:08.155 [pool-57-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:108: error: missing return statement
    }
    ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
10:24:08.156 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
10:24:08.157 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:269 which is executed by 5 tests
-1679819631
10:24:08.309 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
10:24:08.310 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:268 which is executed by 5 tests
-1679819631
10:24:08.462 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
10:24:08.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:747 which is executed by 7 tests
-1679819631
10:24:08.616 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:08.681 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:08.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
10:24:08.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:275 which is executed by 9 tests
-1679819631
10:24:09.154 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:09.225 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (61 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:09.430 [pool-65-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:108: error: missing return statement
    }
    ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
10:24:09.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
10:24:09.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:274 which is executed by 9 tests
-1679819631
10:24:09.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
10:24:09.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:273 which is executed by 9 tests
-1679819631
10:24:09.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
10:24:09.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:419 which is executed by 12 tests
-1679819631
10:24:10.009 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:10.105 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:10.367 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
10:24:10.367 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:267 which is executed by 12 tests
-1679819631
10:24:10.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:10.604 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:10.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
10:24:10.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:265 which is executed by 12 tests
-1679819631
10:24:11.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
10:24:11.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:264 which is executed by 12 tests
-1679819631
10:24:11.158 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
10:24:11.158 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:260 which is executed by 12 tests
-1679819631
10:24:11.310 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:11.376 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:11.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:11.686 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
10:24:11.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
10:24:11.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:750 which is executed by 15 tests
-1679819631
10:24:12.105 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
10:24:12.105 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:133 which is executed by 16 tests
-1679819631
10:24:12.257 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:12.311 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:24:12.507 [pool-91-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Complex.java:62: error: missing return statement
    }
    ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
10:24:12.507 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
10:24:12.508 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:132 which is executed by 16 tests
-1679819631
10:24:12.659 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
10:24:12.659 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:129 which is executed by 17 tests
-1679819631
10:24:12.809 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:12.863 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:13.104 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:13.162 [pool-100-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
10:24:13.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
10:24:13.438 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:162 which is executed by 19 tests
-1679819631
10:24:13.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
10:24:13.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:746 which is executed by 21 tests
-1679819631
10:24:13.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:13.795 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:14.037 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:14.093 [pool-112-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:14.334 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
10:24:14.334 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:428 which is executed by 22 tests
-1679819631
10:24:14.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
10:24:14.485 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:493 which is executed by 22 tests
-1679819631
10:24:14.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
10:24:14.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:158 which is executed by 23 tests
-1679819631
10:24:14.824 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:14.881 [pool-118-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:15.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:15.172 [pool-124-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:15.424 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
10:24:15.424 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:157 which is executed by 23 tests
-1679819631
10:24:15.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:15.627 [pool-130-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:15.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
10:24:15.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:489 which is executed by 25 tests
-1679819631
10:24:16.028 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:16.082 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:16.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:16.390 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:16.645 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
10:24:16.645 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:488 which is executed by 25 tests
-1679819631
10:24:16.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:16.848 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:17.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
10:24:17.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:421 which is executed by 27 tests
-1679819631
10:24:17.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:17.312 [pool-154-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:17.556 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:17.610 [pool-160-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
10:24:17.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
10:24:17.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:364 which is executed by 113 tests
-1679819631
10:24:18.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
10:24:18.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:355 which is executed by 114 tests
-1679819631
10:24:18.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
10:24:18.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2991 which is executed by 29 tests
1033054629
10:24:18.361 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:18.415 [pool-166-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:18.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:18.868 [pool-172-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(1.5707963267948966, 0.5493061443340549)
(1.5707963267948966, 0.5850356263251273)
(1.5707963267948966, 0.6263814842476839)
(1.5707963267948966, 0.6749633584745077)
(1.5707963267948966, 0.7331685343967135)
(1.5707963267948966, 0.8047189562170501)
(1.5707963267948966, 0.8958797346140276)
(1.5707963267948966, 1.0184409636305198)
(1.5707963267948966, 1.1989476363991853)
(1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:19.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
10:24:19.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:122 which is executed by 29 tests
-1679819631
10:24:19.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:19.447 [pool-178-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:19.683 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
10:24:19.684 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2997 which is executed by 30 tests
1033054629
10:24:19.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:19.961 [pool-184-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:20.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
10:24:20.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:119 which is executed by 34 tests
-1679819631
10:24:20.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:20.521 [pool-190-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:20.755 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:20.811 [pool-196-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
10:24:21.055 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
10:24:21.055 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:116 which is executed by 35 tests
-1679819631
10:24:21.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:21.271 [pool-202-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:21.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:21.558 [pool-208-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:21.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
10:24:21.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:418 which is executed by 35 tests
-1679819631
10:24:21.938 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:21.991 [pool-214-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:22.221 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:22.275 [pool-220-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:24:22.542 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
10:24:22.542 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:417 which is executed by 35 tests
-1679819631
10:24:22.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:22.749 [pool-226-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:22.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
10:24:22.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2990 which is executed by 39 tests
1033054629
10:24:23.174 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:23.227 [pool-232-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:23.563 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:23.620 [pool-238-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(0.0, 0.5493061443340549)
(0.0, 0.5850356263251273)
(0.0, 0.6263814842476839)
(0.0, 0.6749633584745077)
(0.0, 0.7331685343967135)
(0.0, 0.8047189562170501)
(0.0, 0.8958797346140276)
(0.0, 1.0184409636305198)
(0.0, 1.1989476363991853)
(0.0, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(-1.5707963267948966, 1.4722194895832204)
(-1.5707963267948966, 1.0986122886681098)
(-1.5707963267948966, 0.8673005276940532)
(-1.5707963267948966, 0.6931471805599453)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.4236489301936017)
(-1.5707963267948966, 0.3095196042031116)
(-1.5707963267948966, 0.2027325540540821)
(-1.5707963267948966, 0.10033534773107562)
10:24:23.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
10:24:23.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:327 which is executed by 39 tests
-1679819631
10:24:24.130 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:24.183 [pool-244-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:24.416 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
10:24:24.416 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2982 which is executed by 41 tests
1033054629
10:24:24.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:24.663 [pool-250-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:25.061 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:25.129 [pool-256-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:25.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
10:24:25.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2980 which is executed by 41 tests
1033054629
10:24:25.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
10:24:25.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2979 which is executed by 41 tests
1033054629
10:24:25.852 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
10:24:25.852 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2978 which is executed by 41 tests
1033054629
10:24:26.043 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
10:24:26.043 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:324 which is executed by 42 tests
-1679819631
10:24:26.209 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:26.263 [pool-262-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:26.492 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:26.545 [pool-268-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:26.778 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
10:24:26.779 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:323 which is executed by 42 tests
-1679819631
10:24:26.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
10:24:26.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:388 which is executed by 44 tests
-1679819631
10:24:27.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
10:24:27.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:322 which is executed by 44 tests
-1679819631
10:24:27.223 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:27.276 [pool-274-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:27.513 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:27.569 [pool-280-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:27.802 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
10:24:27.802 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:319 which is executed by 58 tests
-1679819631
10:24:27.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:28.011 [pool-286-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:28.246 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:24:28.299 [pool-292-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:24:28.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
10:24:28.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:593 which is executed by 69 tests
1857420685
10:24:28.677 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
10:24:28.677 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:570 which is executed by 69 tests
1857420685
10:24:28.844 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:24:37.900 [pool-298-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9042 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:24:38.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:24:47.561 [pool-302-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9168 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:24:48.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
10:24:48.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:562 which is executed by 69 tests
1857420685
10:24:48.148 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
10:24:48.148 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:560 which is executed by 69 tests
1857420685
10:24:48.293 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:24:57.444 [pool-306-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9146 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:24:57.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
10:24:57.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:556 which is executed by 69 tests
1857420685
10:24:58.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:07.169 [pool-310-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9102 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:07.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
10:25:07.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:555 which is executed by 69 tests
1857420685
10:25:07.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:16.905 [pool-314-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9201 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:17.278 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:26.305 [pool-318-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9023 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:26.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
10:25:26.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:554 which is executed by 69 tests
1857420685
10:25:26.846 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:35.962 [pool-322-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9111 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:36.400 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
10:25:36.400 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:553 which is executed by 69 tests
1857420685
10:25:36.550 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:45.592 [pool-326-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9038 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:45.990 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
10:25:45.990 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:551 which is executed by 69 tests
1857420685
10:25:46.135 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:25:55.205 [pool-330-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9066 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:25:55.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
10:25:55.573 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:547 which is executed by 69 tests
1857420685
10:25:55.718 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:04.834 [pool-334-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9112 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:05.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
10:26:05.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:546 which is executed by 69 tests
1857420685
10:26:05.450 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:14.476 [pool-338-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9022 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:14.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:23.862 [pool-342-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9017 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:24.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
10:26:24.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:543 which is executed by 69 tests
1857420685
10:26:24.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:33.478 [pool-346-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9099 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:33.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
10:26:33.879 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:542 which is executed by 69 tests
1857420685
10:26:34.026 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:43.099 [pool-350-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9068 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:43.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
10:26:43.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:541 which is executed by 69 tests
1857420685
10:26:43.634 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:26:52.657 [pool-354-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9018 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:26:53.034 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:02.084 [pool-358-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9045 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

10:27:02.422 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
10:27:02.422 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:538 which is executed by 69 tests
1857420685
10:27:02.567 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:11.615 [pool-362-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9044 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:11.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
10:27:11.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:537 which is executed by 69 tests
1857420685
10:27:12.124 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:21.353 [pool-366-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9225 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:21.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
10:27:21.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:536 which is executed by 69 tests
1857420685
10:27:21.865 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:30.975 [pool-370-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9106 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:31.357 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:40.454 [pool-374-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9093 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:40.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
10:27:40.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:533 which is executed by 69 tests
1857420685
10:27:40.970 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:50.004 [pool-378-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9029 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:50.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
10:27:50.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:532 which is executed by 69 tests
1857420685
10:27:50.508 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:27:59.612 [pool-382-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9093 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:27:59.972 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:09.072 [pool-386-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9097 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:09.432 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
10:28:09.432 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:530 which is executed by 69 tests
1857420685
10:28:09.577 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:18.718 [pool-390-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9137 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:19.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
10:28:19.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:529 which is executed by 69 tests
1857420685
10:28:19.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:28.288 [pool-394-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9043 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:28.640 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
10:28:28.640 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:527 which is executed by 69 tests
1857420685
10:28:28.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
10:28:28.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:525 which is executed by 69 tests
1857420685
10:28:28.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
10:28:28.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:524 which is executed by 69 tests
1857420685
10:28:29.072 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
10:28:29.072 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:523 which is executed by 69 tests
1857420685
10:28:29.216 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
10:28:29.216 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:522 which is executed by 69 tests
1857420685
10:28:29.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
10:28:29.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:329 which is executed by 69 tests
1857420685
10:28:29.505 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
10:28:29.506 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:328 which is executed by 69 tests
1857420685
10:28:29.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:38.731 [pool-398-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9071 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:39.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
10:28:39.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:266 which is executed by 69 tests
1857420685
10:28:39.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
10:28:39.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.DfpField:248 which is executed by 69 tests
1857420685
10:28:39.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
10:28:39.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1488 which is executed by 69 tests
68623
10:28:39.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
10:28:39.597 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1485 which is executed by 69 tests
68623
10:28:39.778 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:48.906 [pool-402-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9124 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:49.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
10:28:49.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1484 which is executed by 69 tests
68623
10:28:49.615 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:28:58.653 [pool-406-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9034 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:28:59.143 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
10:28:59.143 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1482 which is executed by 69 tests
68623
10:28:59.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:08.441 [pool-410-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9115 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:09.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:18.045 [pool-414-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9021 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:18.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
10:29:18.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1476 which is executed by 69 tests
68623
10:29:18.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:27.707 [pool-418-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9002 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:28.187 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:37.237 [pool-422-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9045 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:37.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
10:29:37.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1470 which is executed by 69 tests
68623
10:29:37.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:47.004 [pool-426-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9040 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:47.565 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:29:56.580 [pool-430-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9011 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:29:57.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
10:29:57.127 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1463 which is executed by 69 tests
68623
10:29:57.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:06.344 [pool-434-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9036 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:30:06.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:15.816 [pool-438-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8971 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:30:16.282 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
10:30:16.282 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1460 which is executed by 69 tests
68623
10:30:16.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:25.494 [pool-442-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9030 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:30:26.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
10:30:26.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1459 which is executed by 69 tests
68623
10:30:26.183 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:30:35.193 [pool-446-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9006 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

10:33:55.477 [pool-445-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
10:33:55.478 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
10:33:55.478 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
10:33:55.478 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1458 which is executed by 69 tests
68623
10:33:55.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
10:33:55.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1457 which is executed by 69 tests
68623
10:33:55.832 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:34:04.873 [pool-449-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9037 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:34:45.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
10:34:45.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1456 which is executed by 69 tests
68623
10:34:46.054 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
10:34:46.054 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1454 which is executed by 69 tests
68623
10:34:46.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:34:55.345 [pool-453-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9113 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:34:55.836 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:04.949 [pool-457-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9109 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:05.425 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
10:35:05.425 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1438 which is executed by 69 tests
68623
10:35:05.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:14.801 [pool-461-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9199 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:15.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
10:35:15.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1437 which is executed by 69 tests
68623
10:35:15.427 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:24.552 [pool-465-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9121 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:25.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
10:35:25.133 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1419 which is executed by 69 tests
68623
10:35:25.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:34.459 [pool-469-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9150 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:34.929 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
10:35:34.929 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:1418 which is executed by 69 tests
68623
10:35:35.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
10:35:35.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.dfp.Dfp:642 which is executed by 69 tests
68623
10:35:35.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
10:35:35.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:211 which is executed by 71 tests
1648821820
10:35:35.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
10:35:35.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:210 which is executed by 71 tests
1648821820
10:35:35.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:44.701 [pool-473-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9137 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:45.065 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
10:35:45.065 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:201 which is executed by 72 tests
1648821820
10:35:45.204 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
10:35:45.204 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:199 which is executed by 72 tests
1648821820
10:35:45.351 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:35:54.417 [pool-477-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9062 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:35:54.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
10:35:54.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:195 which is executed by 72 tests
1648821820
10:35:55.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:04.262 [pool-481-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9134 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:04.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
10:36:04.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:194 which is executed by 72 tests
1648821820
10:36:04.750 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:13.849 [pool-485-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9095 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:14.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
10:36:14.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:193 which is executed by 72 tests
1648821820
10:36:14.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:23.455 [pool-489-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9075 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:23.805 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:32.887 [pool-493-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9078 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:33.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
10:36:33.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:192 which is executed by 72 tests
1648821820
10:36:33.383 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:42.481 [pool-497-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9094 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:42.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
10:36:42.850 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:191 which is executed by 72 tests
1648821820
10:36:42.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:36:52.119 [pool-501-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9123 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:36:52.466 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
10:36:52.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:190 which is executed by 72 tests
1648821820
10:36:52.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
10:36:52.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:189 which is executed by 72 tests
1648821820
10:36:52.751 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
10:36:52.751 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:188 which is executed by 72 tests
1648821820
10:36:52.890 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
10:36:52.890 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:187 which is executed by 72 tests
1648821820
10:36:53.030 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:02.160 [pool-505-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9126 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:02.672 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
10:37:02.672 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:183 which is executed by 72 tests
1648821820
10:37:02.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:11.892 [pool-509-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9076 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:12.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
10:37:12.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:182 which is executed by 72 tests
1648821820
10:37:12.379 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:21.412 [pool-513-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9029 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:21.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:30.972 [pool-517-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9192 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:31.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
10:37:31.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:180 which is executed by 72 tests
1648821820
10:37:31.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:40.526 [pool-521-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9064 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:40.921 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
10:37:40.922 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:179 which is executed by 72 tests
1648821820
10:37:41.061 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:50.144 [pool-525-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9079 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:37:50.498 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
10:37:50.499 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:178 which is executed by 72 tests
1648821820
10:37:50.638 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:37:59.778 [pool-529-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9135 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:00.130 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:09.221 [pool-533-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9087 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:09.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
10:38:09.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:177 which is executed by 72 tests
1648821820
10:38:09.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:18.888 [pool-537-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9158 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:19.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
10:38:19.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:176 which is executed by 72 tests
1648821820
10:38:19.384 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:28.538 [pool-541-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9150 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:28.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
10:38:28.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:175 which is executed by 72 tests
1648821820
10:38:29.037 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
10:38:29.037 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:174 which is executed by 72 tests
1648821820
10:38:29.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
10:38:29.176 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:173 which is executed by 72 tests
1648821820
10:38:29.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
10:38:29.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:172 which is executed by 72 tests
1648821820
10:38:29.462 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:38.680 [pool-545-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9214 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:39.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
10:38:39.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:170 which is executed by 72 tests
1648821820
10:38:39.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
10:38:39.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:169 which is executed by 72 tests
1648821820
10:38:39.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
10:38:39.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:168 which is executed by 72 tests
1648821820
10:38:39.461 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:48.665 [pool-549-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9198 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:49.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
10:38:49.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:163 which is executed by 72 tests
1648821820
10:38:49.182 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:38:58.376 [pool-553-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9190 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:38:58.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:07.813 [pool-557-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9088 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:08.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
10:39:08.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2977 which is executed by 73 tests
1033054629
10:39:08.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:08.437 [pool-561-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:08.769 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:08.822 [pool-567-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:09.150 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
10:39:09.150 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:2973 which is executed by 74 tests
1033054629
10:39:09.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:09.405 [pool-573-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:09.736 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:09.792 [pool-579-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:39:10.104 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
10:39:10.104 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.complex.Complex:1127 which is executed by 80 tests
-1679819631
10:39:10.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
10:39:10.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:152 which is executed by 99 tests
1648821820
10:39:10.393 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
10:39:10.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:150 which is executed by 99 tests
1648821820
10:39:10.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:19.600 [pool-585-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9063 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:19.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
10:39:19.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:149 which is executed by 99 tests
1648821820
10:39:20.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:29.255 [pool-589-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9138 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:29.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
10:39:29.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:146 which is executed by 99 tests
1648821820
10:39:29.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:38.841 [pool-593-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9099 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:39.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
10:39:39.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:145 which is executed by 99 tests
1648821820
10:39:39.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:39:48.427 [pool-597-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9085 ms)
<> Total tests run: 35
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:39:48.804 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
10:39:48.804 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.random.MersenneTwister:144 which is executed by 99 tests
1648821820
10:39:48.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
10:39:48.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:2337 which is executed by 585 tests
-1550426518
10:39:49.132 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
10:39:49.133 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.MathUtils:2334 which is executed by 590 tests
-1550426518
10:39:49.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:49.383 [pool-601-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:49.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:49.859 [pool-607-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 232
<> Ignored tests: 0
<> Failed tests: 4
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:50.255 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
10:39:50.255 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3882 which is executed by 247 tests
1033054629
10:39:50.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
10:39:50.449 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1435 which is executed by 434 tests
1033054629
10:39:50.636 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:50.695 [pool-613-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 1.0493061443340548)
(-1.5707963267948966, 1.0846819692426812)
(-1.5707963267948966, 1.1259628536244661)
(-1.5707963267948966, 1.1746377748307648)
(-1.5707963267948966, 1.2329431437179064)
(-1.5707963267948966, 1.3047189562170503)
(-1.5707963267948966, 1.3958797346140275)
(-1.5707963267948966, 1.518186169728115)
(-1.5707963267948966, 1.6989476363991851)
(-1.5707963267948966, 2.021702998525946)
(NaN, NaN)
(0.0, 1.9722194895832201)
(0.0, 1.5986122886681096)
(0.0, 1.3669557881580754)
(0.0, 1.1931471805599454)
(0.0, 1.0493061443340548)
(0.0, 0.9232302995703838)
(0.0, 0.8092378564455549)
(0.0, 0.7022441314614823)
(0.0, 0.6000023629987077)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:51.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #143
10:39:51.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1434 which is executed by 434 tests
1033054629
10:39:51.261 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:51.364 [pool-619-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (94 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5846819692426813)
(-1.5707963267948966, 0.625962853624466)
(-1.5707963267948966, 0.6746377748307648)
(-1.5707963267948966, 0.7329431437179063)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.018186169728115)
(-1.5707963267948966, 1.1989476363991851)
(-1.5707963267948966, 1.5217029985259456)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681096)
(0.0, 0.8669557881580753)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42323029957038383)
(0.0, 0.30923785644555496)
(0.0, 0.20224413146148232)
(0.0, 0.1000023629987077)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:51.702 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #144
10:39:51.702 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1433 which is executed by 434 tests
1033054629
10:39:51.889 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:51.945 [pool-625-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.585035718990003)
(-1.5707963267948966, 0.6263816140934777)
(-1.5707963267948966, 0.6749634370105302)
(-1.5707963267948966, 0.7331685720317024)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.018441011726076)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5222614497545377)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673006157442822)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42364906003939545)
(0.0, 0.3095196630135265)
(0.0, 0.2027327308100164)
(0.0, 0.10033542987853723)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:52.269 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #145
10:39:52.269 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1432 which is executed by 434 tests
1033054629
10:39:52.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:52.521 [pool-631-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356262945335)
(-1.5707963267948966, 0.6263814841969366)
(-1.5707963267948966, 0.6749633584506374)
(-1.5707963267948966, 0.7331685343887953)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636190805)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5222612187413713)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276657161)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42364893014285443)
(0.0, 0.30951960418764374)
(0.0, 0.20273255397348056)
(0.0, 0.10033534770553987)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:52.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #146
10:39:52.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1431 which is executed by 434 tests
1033054629
10:39:53.050 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:53.110 [pool-637-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (55 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251385)
(-1.5707963267948966, 0.6263814842477058)
(-1.5707963267948966, 0.6749633584745157)
(-1.5707963267948966, 0.7331685343967154)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.018440963630523)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5222612188617801)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940632)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936236)
(0.0, 0.3095196042031161)
(0.0, 0.20273255405412263)
(0.0, 0.10033534773108436)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:53.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #147
10:39:53.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1430 which is executed by 434 tests
1033054629
10:39:53.637 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:53.694 [pool-643-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:54.025 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #148
10:39:54.025 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1429 which is executed by 434 tests
1033054629
10:39:54.209 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:54.266 [pool-649-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:54.589 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #149
10:39:54.589 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1315 which is executed by 435 tests
1033054629
10:39:54.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:54.838 [pool-655-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:55.168 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:55.223 [pool-661-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3155450954010183)
(0.0, 0.20276612896226132)
(0.0, 0.10033535989281407)
10:39:55.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #150
10:39:55.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1256 which is executed by 448 tests
1033054629
10:39:55.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #151
10:39:55.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1484 which is executed by 582 tests
1033054629
10:39:55.944 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #152
10:39:55.944 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1479 which is executed by 582 tests
1033054629
10:39:56.129 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:56.182 [pool-667-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:56.523 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:56.577 [pool-673-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:56.901 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #153
10:39:56.901 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1477 which is executed by 582 tests
1033054629
10:39:57.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:57.151 [pool-679-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:57.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #154
10:39:57.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1476 which is executed by 582 tests
1033054629
10:39:57.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:57.706 [pool-685-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:58.029 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #155
10:39:58.029 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1475 which is executed by 582 tests
1033054629
10:39:58.228 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:58.280 [pool-691-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170503)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936018)
(0.0, 0.30951960420311164)
(0.0, 0.20273255405408214)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:58.599 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #156
10:39:58.599 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1474 which is executed by 582 tests
1033054629
10:39:58.783 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:58.836 [pool-697-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:59.154 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #157
10:39:59.154 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1472 which is executed by 582 tests
1033054629
10:39:59.353 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:59.406 [pool-703-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251274)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:39:59.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #158
10:39:59.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1471 which is executed by 582 tests
1033054629
10:39:59.906 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:39:59.959 [pool-709-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061532987715)
(-1.5707963267948966, 0.585035632560249)
(-1.5707963267948966, 0.6263814826898756)
(-1.5707963267948966, 0.6749633349933412)
(-1.5707963267948966, 0.7331685326816989)
(-1.5707963267948966, 0.8047189544466259)
(-1.5707963267948966, 0.8958797435787442)
(-1.5707963267948966, 1.0184409525031513)
(-1.5707963267948966, 1.1989476354162578)
(-1.5707963267948966, 1.522261219206322)
(NaN, NaN)
(0.0, 1.4722194931561)
(0.0, 1.0986122907440548)
(0.0, 0.8673005350204327)
(0.0, 0.6931471805599453)
(0.0, 0.5493061532987715)
(0.0, 0.423648934572238)
(0.0, 0.30951961047023246)
(0.0, 0.20273253988522838)
(0.0, 0.10033534247008372)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:00.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #159
10:40:00.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1470 which is executed by 582 tests
1033054629
10:40:00.482 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:00.539 [pool-715-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340548)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340548)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:00.872 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #160
10:40:00.872 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1469 which is executed by 582 tests
1033054629
10:40:01.057 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:01.110 [pool-721-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:01.453 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #161
10:40:01.453 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1467 which is executed by 582 tests
1033054629
10:40:01.641 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:01.721 [pool-727-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251274)
(-1.5707963267948966, 0.626381484247684)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.01844096363052)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:02.038 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #162
10:40:02.038 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1466 which is executed by 582 tests
1033054629
10:40:02.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:02.275 [pool-733-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493060856817372)
(-1.5707963267948966, 0.5850355676728096)
(-1.5707963267948966, 0.6263814255953662)
(-1.5707963267948966, 0.67496329982219)
(-1.5707963267948966, 0.7331684170920783)
(-1.5707963267948966, 0.8047188389124149)
(-1.5707963267948966, 0.8958796173093924)
(-1.5707963267948966, 1.0184408463258845)
(-1.5707963267948966, 1.1989474604422325)
(-1.5707963267948966, 1.5222609842524406)
(NaN, NaN)
(0.0, 1.47221925497395)
(0.0, 1.098612112711157)
(0.0, 0.867300410389418)
(0.0, 0.6931470632553101)
(0.0, 0.5493060856817372)
(0.0, 0.4236488715412841)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:02.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #163
10:40:02.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1465 which is executed by 582 tests
1033054629
10:40:02.798 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:02.851 [pool-739-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251274)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:03.186 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #164
10:40:03.187 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1464 which is executed by 582 tests
1033054629
10:40:03.372 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:03.430 [pool-745-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:03.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #165
10:40:03.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1462 which is executed by 582 tests
1033054629
10:40:03.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:04.037 [pool-751-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.01844096363052)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936018)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:04.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #166
10:40:04.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1461 which is executed by 582 tests
1033054629
10:40:04.536 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:04.589 [pool-757-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5847998487600455)
(-1.5707963267948966, 0.626102388510602)
(-1.5707963267948966, 0.6747462974769595)
(-1.5707963267948966, 0.7330182714354023)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.0182710978228728)
(-1.5707963267948966, 1.1989476363991851)
(-1.5707963267948966, 1.5218890565817829)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8670706954675289)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.42336983445651977)
(0.0, 0.309331768444488)
(0.0, 0.2024069272109222)
(0.0, 0.10011335243372903)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:04.901 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #167
10:40:04.901 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1460 which is executed by 582 tests
1033054629
10:40:05.100 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:05.155 [pool-763-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745078)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.01844096363052)
(-1.5707963267948966, 1.1989476363991856)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940531)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936018)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:05.469 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #168
10:40:05.469 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1459 which is executed by 582 tests
1033054629
10:40:05.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:05.708 [pool-769-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:06.022 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #169
10:40:06.022 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1457 which is executed by 582 tests
1033054629
10:40:06.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:06.281 [pool-775-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:06.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #170
10:40:06.596 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1456 which is executed by 582 tests
1033054629
10:40:06.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:06.835 [pool-781-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.346573581315256)
(-1.5707963267948966, 0.34680936160993264)
(-1.5707963267948966, 0.3468526875748629)
(-1.5707963267948966, 0.34679067475868747)
(-1.5707963267948966, 0.6932974452362711)
(-1.5707963267948966, 0.6931471823303695)
(-1.5707963267948966, 0.6931471715952288)
(-1.5707963267948966, 0.6933170574949609)
(-1.5707963267948966, 1.0397207718228456)
(-1.5707963267948966, 1.3866665230552078)
(NaN, NaN)
(0.0, 1.3862943575470112)
(0.0, 1.0397207687639731)
(0.0, 0.6933770054600902)
(0.0, 0.6931471805599453)
(0.0, 0.346573581315256)
(0.0, 0.3468526816384183)
(0.0, 1.8782949150272628E-4)
(0.0, 3.256410120136356E-4)
(0.0, 2.2200055833849943E-4)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:07.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #171
10:40:07.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1455 which is executed by 582 tests
1033054629
10:40:07.351 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #172
10:40:07.351 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1454 which is executed by 582 tests
1033054629
10:40:07.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #173
10:40:07.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1453 which is executed by 582 tests
1033054629
10:40:07.720 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #174
10:40:07.720 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1452 which is executed by 582 tests
1033054629
10:40:07.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #175
10:40:07.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1378 which is executed by 582 tests
1033054629
10:40:08.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:08.142 [pool-787-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (49 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5847998487600455)
(-1.5707963267948966, 0.626102388510602)
(-1.5707963267948966, 0.6747462974769596)
(-1.5707963267948966, 0.7330182714354023)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140275)
(-1.5707963267948966, 1.018271097822873)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.5218890565817829)
(NaN, NaN)
(0.0, 1.4722194895832201)
(0.0, 1.0986122886681098)
(0.0, 0.8670706954675288)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4233698344565198)
(0.0, 0.309331768444488)
(0.0, 0.2024069272109222)
(0.0, 0.10011335243372903)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:08.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:08.539 [pool-793-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (48 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:08.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #176
10:40:08.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1376 which is executed by 582 tests
1033054629
10:40:09.063 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #177
10:40:09.063 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1375 which is executed by 582 tests
1033054629
10:40:09.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #178
10:40:09.248 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1373 which is executed by 582 tests
1033054629
10:40:09.432 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #179
10:40:09.432 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1362 which is executed by 582 tests
1033054629
10:40:09.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #180
10:40:09.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1314 which is executed by 594 tests
1033054629
10:40:09.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:09.870 [pool-799-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (51 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:10.217 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:10.274 [pool-805-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:10.587 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #181
10:40:10.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1294 which is executed by 594 tests
1033054629
10:40:10.796 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:10.851 [pool-811-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (50 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:40:11.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:40:11.218 [pool-817-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.34657359027997264)
(-1.5707963267948966, 0.44690893801104825)
(-1.5707963267948966, 0.5493061443340547)
(-1.5707963267948966, 0.6560931944830841)
(-1.5707963267948966, -0.20273255405408264)
(-1.5707963267948966, 0.34657359027997264)
(-1.5707963267948966, 0.6931471805599455)
(-1.5707963267948966, 0.9962150823451029)
(-1.5707963267948966, 0.8958797346140281)
(-1.5707963267948966, 1.1512925464970212)
(NaN, NaN)
(0.0, 0.8958797346140281)
(0.0, 0.34657359027997353)
(0.0, 0.6019864021629678)
10:43:31.533 [pool-816-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
10:43:31.534 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
10:43:31.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #182
10:43:31.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1292 which is executed by 594 tests
1033054629
10:43:31.719 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #183
10:43:31.719 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1283 which is executed by 595 tests
1033054629
10:43:31.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:43:31.998 [pool-822-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:43:32.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:43:32.425 [pool-828-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
10:43:32.741 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #184
10:43:32.741 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1272 which is executed by 595 tests
1033054629
10:43:32.923 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:43:32.980 [pool-834-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (52 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:43:33.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:43:33.384 [pool-840-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (53 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
(NaN, NaN)
10:43:33.716 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #185
10:43:33.716 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1269 which is executed by 595 tests
1033054629
10:43:33.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #186
10:43:33.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:1266 which is executed by 596 tests
1033054629
10:43:34.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:43:34.141 [pool-846-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
10:43:34.493 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
java.lang.AssertionError
    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:43:34.552 [pool-852-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (54 ms)
<> Total tests run: 116
<> Ignored tests: 0
<> Failed tests: 2
~ testAtanI(org.apache.commons.math.complex.ComplexTest)
[null]
java.lang.AssertionError    at org.junit.Assert.fail(Assert.java:86)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.junit.Assert.assertTrue(Assert.java:52)
    at org.apache.commons.math.complex.ComplexTest.testAtanI(ComplexTest.java:579)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~ testDivideZero(org.apache.commons.math.complex.ComplexTest)
[expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>]
java.lang.AssertionError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math.complex.ComplexTest.testDivideZero(ComplexTest.java:232)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

(-1.5707963267948966, 0.5493061443340549)
(-1.5707963267948966, 0.5850356263251273)
(-1.5707963267948966, 0.6263814842476839)
(-1.5707963267948966, 0.6749633584745077)
(-1.5707963267948966, 0.7331685343967135)
(-1.5707963267948966, 0.8047189562170501)
(-1.5707963267948966, 0.8958797346140276)
(-1.5707963267948966, 1.0184409636305198)
(-1.5707963267948966, 1.1989476363991853)
(-1.5707963267948966, 1.522261218861711)
(NaN, NaN)
(0.0, 1.4722194895832204)
(0.0, 1.0986122886681098)
(0.0, 0.8673005276940532)
(0.0, 0.6931471805599453)
(0.0, 0.5493061443340549)
(0.0, 0.4236489301936017)
(0.0, 0.3095196042031116)
(0.0, 0.2027325540540821)
(0.0, 0.10033534773107562)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(NaN, NaN)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
(Infinity, Infinity)
10:43:34.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #187
10:43:34.875 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:302 which is executed by 884 tests
1033054629
10:43:35.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #188
10:43:35.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.FastMath:3410 which is executed by 1157 tests
1033054629
10:43:35.252 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
10:43:35.478 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 571
10:43:35.478 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 3599
10:43:35.478 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 168
10:43:35.485 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
10:43:35.485 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 1344541ms
10:43:35.485 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
Command exited with non-zero status 255
2320.79user 23.14system 22:26.43elapsed 174%CPU (0avgtext+0avgdata 1040128maxresident)k
50912inputs+9392outputs (4major+419094minor)pagefaults 0swaps


Node: graphene-69.nancy.grid5000.fr



Date: Sat Dec  1 10:43:35 EST 2018

