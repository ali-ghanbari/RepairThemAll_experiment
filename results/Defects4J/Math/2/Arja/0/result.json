{
  "repair_end": "2018-12-01 14:12:29.874596", 
  "repair_begin": "2018-12-01 13:03:04.056117", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_854/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:44:36.876489222 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_165/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:15.731439815 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1169/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:53:15.379070177 -0500\n@@ -292,7 +292,11 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1169/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:15.383070167 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_468/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:29.694316649 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -126,19 +123,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_411/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:33:02.482602413 -0500\n@@ -278,7 +278,11 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            if (numberOfSuccesses < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t\t}\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_411/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:33:02.482602413 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_857/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:44:40.660477832 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_742/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:41.709042036 -0500\n@@ -102,7 +102,10 @@\n             throw new OutOfRangeException(p, 0, 1);\n         }\n \n-        int lower = getSupportLowerBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n@@ -111,7 +114,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,19 +132,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 105, 
          "faulty": "int lower=getSupportLowerBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_306/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:32.003004789 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1520/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:02:56.813656768 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_767/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:42:18.084922725 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_182/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:27:35.307395766 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n@@ -278,7 +282,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_182/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:35.307395766 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "this.populationSize=populationSize;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_683/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:40:11.429319208 -0500\n@@ -278,7 +278,11 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            if (numberOfSuccesses < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t\t}\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_683/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:40:11.429319208 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_312/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:41.122984892 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1050/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:50:02.287571711 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_780/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:42:36.800862332 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1099/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:51:20.443365808 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_665/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:39:41.953399346 -0500\n@@ -123,22 +123,12 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_641/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:39:04.765501764 -0500\n@@ -123,22 +123,16 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (lower == Integer.MIN_VALUE) {\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1737/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:09:01.100807360 -0500\n@@ -277,7 +277,11 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (sampleSize < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t\t}\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1737/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:09:01.100807360 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1189/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:53:46.110992379 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1189/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:46.114992370 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_334/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:31:11.658918448 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n@@ -291,7 +295,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_334/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:11.662918438 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_241/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:54.847218386 -0500\n@@ -124,21 +124,11 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_299/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:30:22.755024990 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n@@ -276,7 +280,12 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_299/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:22.755024990 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1123/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:51:59.503264454 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1123/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:51:59.503264454 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_329/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:05.970930805 -0500\n@@ -106,7 +106,10 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_501/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:35:19.194161189 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_513/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:35:38.202102661 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_893/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:35.776314192 -0500\n@@ -135,7 +135,6 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n             }\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_343/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:31:22.138895704 -0500\n@@ -292,7 +292,11 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_343/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:22.142895695 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1235/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:55:00.750805328 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "Replace", 
          "seed": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_568/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:37:11.261824556 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            numericalVarianceIsCalculated = true;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_568/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:37:11.261824556 -0500\n@@ -126,20 +126,12 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n-        return solveInverseCumulativeProbability(p, lower, upper);\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n+\t\treturn solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 142, 
          "faulty": "return solveInverseCumulativeProbability(p,lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "numericalVarianceIsCalculated=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_718/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:06.133161341 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "return solveInverseCumulativeProbability(p,lower,upper);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1220/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:54:35.150869195 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n@@ -155,7 +142,10 @@\n      * @return the smallest {@code p}-quantile of this distribution\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n-        while (lower + 1 < upper) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_454/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:34:08.178385678 -0500\n@@ -277,7 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (!numericalVarianceIsCalculated) {\n+\t\t\t\tnumericalVariance = calculateNumericalVariance();\n+\t\t\t\tnumericalVarianceIsCalculated = true;\n+\t\t\t}\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_454/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:08.178385678 -0500\n@@ -102,7 +102,10 @@\n             throw new OutOfRangeException(p, 0, 1);\n         }\n \n-        int lower = getSupportLowerBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "Replace", 
          "seed": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 105, 
          "faulty": "int lower=getSupportLowerBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_124/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:26:21.951561714 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1317/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:57:20.026462443 -0500\n@@ -134,9 +134,10 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1718/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:08:27.096886035 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            numericalVariance = calculateNumericalVariance();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1718/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:08:27.100886025 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1833/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:11:53.240410432 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_382/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:32:20.190747111 -0500\n@@ -123,22 +123,12 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_177/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:27.991412209 -0500\n@@ -124,21 +124,11 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_338/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:16.422908105 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_594/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:37:55.949695506 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_600/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:38:05.049669551 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -123,22 +126,12 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1541/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:03:27.841583735 -0500\n@@ -123,22 +123,13 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (p <= 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,\n+\t\t\t\t\tp, 0, 1);\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1399/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:59:34.134138329 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -126,19 +123,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_814/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:43:33.360683640 -0500\n@@ -102,7 +102,10 @@\n             throw new OutOfRangeException(p, 0, 1);\n         }\n \n-        int lower = getSupportLowerBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n@@ -134,9 +137,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 105, 
          "faulty": "int lower=getSupportLowerBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1171/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:17.295065312 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_873/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:06.364401001 -0500\n@@ -134,9 +134,10 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_340/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:31:18.338903947 -0500\n@@ -318,7 +318,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        numericalVariance = calculateNumericalVariance();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_340/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:18.338903947 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1381/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:59:06.730204150 -0500\n@@ -305,8 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n-                            getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n+        return FastMath.max(0, getSampleSize() + getNumberOfSuccesses()\n+\t\t\t\t- getPopulationSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1381/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:59:06.734204141 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "Replace", 
          "seed": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1252/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:55:29.718733396 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            numericalVarianceIsCalculated = true;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1252/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:55:29.726733376 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "numericalVarianceIsCalculated=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1810/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:11:13.812501167 -0500\n@@ -115,7 +115,8 @@\n                         // is important for the solving step\n         }\n \n-        int upper = getSupportUpperBound();\n+        lower -= 1;\n+\t\tint upper = getSupportUpperBound();\n         if (p == 1.0) {\n             return upper;\n         }\n@@ -126,19 +127,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 118, 
          "faulty": "int upper=getSupportUpperBound();", 
          "type": "InsertBefore", 
          "seed": "lower-=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_646/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:39:12.293480909 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "k=1.0 / k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_384/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:32:22.102740475 -0500\n@@ -116,7 +116,14 @@\n         }\n \n         int upper = getSupportUpperBound();\n-        if (p == 1.0) {\n+        if (lower == Integer.MIN_VALUE) {\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n+\t\tif (p == 1.0) {\n             return upper;\n         }\n \n@@ -134,9 +141,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 119, 
          "faulty": "if (p == 1.0) {\n  return upper;\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_922/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:46:23.988174293 -0500\n@@ -116,7 +116,10 @@\n         }\n \n         int upper = getSupportUpperBound();\n-        if (p == 1.0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (p == 1.0) {\n             return upper;\n         }\n \n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 119, 
          "faulty": "if (p == 1.0) {\n  return upper;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "k=1.0 / k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_818/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:43:37.184671756 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_818/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:43:37.184671756 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1660/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:06:46.913118453 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_161/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:10.355451942 -0500\n@@ -126,20 +126,14 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n-        return solveInverseCumulativeProbability(p, lower, upper);\n+        if (lower == Integer.MIN_VALUE) {\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n+\t\treturn solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 142, 
          "faulty": "return solveInverseCumulativeProbability(p,lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1582/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:04:37.753419728 -0500\n@@ -133,10 +133,10 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t\t}\n+\t\t\ttmp = mu + k * sigma;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_252/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:29:11.159182304 -0500\n@@ -129,14 +129,16 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (lower >= upper) {\n+\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n+\t\t\t\t\t\tlower, upper, false);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1161/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:04.443097980 -0500\n@@ -106,7 +106,10 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_129/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:26:28.471546864 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_623/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:38:39.241572958 -0500\n@@ -276,7 +276,12 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_623/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:38:39.241572958 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_227/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:28:33.943264768 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_227/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:33.943264768 -0500\n@@ -106,7 +106,10 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1383/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:59:08.642199552 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1383/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:59:08.642199552 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_639/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:39:02.865507038 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1362/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:58:34.914280819 -0500\n@@ -116,7 +116,12 @@\n         }\n \n         int upper = getSupportUpperBound();\n-        if (p == 1.0) {\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n+\t\tif (p == 1.0) {\n             return upper;\n         }\n \n@@ -126,19 +131,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 119, 
          "faulty": "if (p == 1.0) {\n  return upper;\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1011/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:48:55.719750767 -0500\n@@ -106,7 +106,8 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        lower -= 1;\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -126,19 +127,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower-=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_170/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:21.447426936 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1108/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:51:33.439331977 -0500\n@@ -277,7 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (!numericalVarianceIsCalculated) {\n+\t\t\t\tnumericalVariance = calculateNumericalVariance();\n+\t\t\t\tnumericalVarianceIsCalculated = true;\n+\t\t\t}\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1108/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:51:33.439331977 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "Replace", 
          "seed": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1546/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:03:36.005564545 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1546/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:03:36.009564536 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_728/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:21.261110281 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1091/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:51:11.279389729 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_50/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:24:32.987813173 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_952/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:47:15.480027898 -0500\n@@ -116,7 +116,10 @@\n         }\n \n         int upper = getSupportUpperBound();\n-        if (p == 1.0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (p == 1.0) {\n             return upper;\n         }\n \n@@ -134,9 +137,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 119, 
          "faulty": "if (p == 1.0) {\n  return upper;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1401/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:59:36.018133810 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1598/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:05:03.221360156 -0500\n@@ -126,7 +126,10 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n+\t\tif (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_715/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:02.313174313 -0500\n@@ -102,7 +102,10 @@\n             throw new OutOfRangeException(p, 0, 1);\n         }\n \n-        int lower = getSupportLowerBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 105, 
          "faulty": "int lower=getSupportLowerBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_396/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:32:38.018685590 -0500\n@@ -278,7 +278,11 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            if (numberOfSuccesses < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t\t}\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_396/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:32:38.018685590 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1571/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:04:18.905463873 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "InsertBefore", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_450/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:04.166398652 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_633/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:38:55.281528130 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n@@ -155,7 +142,12 @@\n      * @return the smallest {@code p}-quantile of this distribution\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n-        while (lower + 1 < upper) {\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_209/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:08.467321516 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_558/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:36:54.749872942 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_558/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:36:54.749872942 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_998/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:48:33.843810433 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n@@ -176,7 +180,11 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_998/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:48:33.847810422 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_736/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:32.269073433 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1274/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:56:03.946648840 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n@@ -155,7 +146,10 @@\n      * @return the smallest {@code p}-quantile of this distribution\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n-        while (lower + 1 < upper) {\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_55/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:24:39.127798827 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_212/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:28:11.895313865 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            numericalVarianceIsCalculated = true;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_212/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:11.899313856 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "numericalVarianceIsCalculated=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1238/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:55:04.462796091 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "return solveInverseCumulativeProbability(p,lower,upper);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1204/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:54:06.938939922 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_263/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:29:27.991145168 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_263/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:29:27.995145159 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n@@ -155,7 +142,12 @@\n      * @return the smallest {@code p}-quantile of this distribution\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n-        while (lower + 1 < upper) {\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "Replace", 
          "seed": "return numberOfSuccesses;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_423/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:33:21.350539204 -0500\n@@ -123,22 +123,12 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1601/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:05:07.337350536 -0500\n@@ -176,7 +176,11 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1601/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:05:07.337350536 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_885/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:45:24.940346041 -0500\n@@ -290,7 +290,11 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_885/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:24.944346029 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_975/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:47:55.427916282 -0500\n@@ -292,7 +292,11 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_975/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:47:55.427916282 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_296/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:18.923033370 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_187/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:42.539379534 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1563/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:04:07.433490767 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n@@ -156,6 +143,18 @@\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n         while (lower + 1 < upper) {\n+\t\t\tint xm = (lower + upper) / 2;\n+\t\t\tif (xm < lower || xm > upper) {\n+\t\t\t\txm = lower + (upper - lower) / 2;\n+\t\t\t}\n+\t\t\tdouble pm = checkedCumulativeProbability(xm);\n+\t\t\tif (pm >= p) {\n+\t\t\t\tupper = xm;\n+\t\t\t} else {\n+\t\t\t\tlower = xm;\n+\t\t\t}\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_604/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:38:10.725653416 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1709/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:08:12.628919539 -0500\n@@ -277,7 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (!numericalVarianceIsCalculated) {\n+\t\t\t\tnumericalVariance = calculateNumericalVariance();\n+\t\t\t\tnumericalVarianceIsCalculated = true;\n+\t\t\t}\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1709/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:08:12.628919539 -0500\n@@ -124,21 +124,11 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "Replace", 
          "seed": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_365/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:56.158822074 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n@@ -155,7 +142,10 @@\n      * @return the smallest {@code p}-quantile of this distribution\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n-        while (lower + 1 < upper) {\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1505/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:02:31.041717552 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            return solveInverseCumulativeProbability(p, lower, upper);\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "return solveInverseCumulativeProbability(p,lower,upper);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1337/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:57:54.094379608 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1337/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:57:54.094379608 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "Replace", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_202/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:59.799340882 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_60/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:24:45.239784569 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_619/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:38:33.525589007 -0500\n@@ -98,20 +98,22 @@\n      * </ul>\n      */\n     public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n-        if (p < 0.0 || p > 1.0) {\n-            throw new OutOfRangeException(p, 0, 1);\n-        }\n-\n         int lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +136,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 101, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}", 
          "type": "Delete", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_427/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:33:25.118526677 -0500\n@@ -277,7 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (!numericalVarianceIsCalculated) {\n+\t\t\t\tnumericalVariance = calculateNumericalVariance();\n+\t\t\t\tnumericalVarianceIsCalculated = true;\n+\t\t\t}\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_427/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:33:25.118526677 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "Replace", 
          "seed": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_526/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:36:00.826033797 -0500\n@@ -98,10 +98,6 @@\n      * </ul>\n      */\n     public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n-        if (p < 0.0 || p > 1.0) {\n-            throw new OutOfRangeException(p, 0, 1);\n-        }\n-\n         int lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n@@ -126,18 +122,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 101, 
          "faulty": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}", 
          "type": "Delete", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_392/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:32:33.106702463 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_803/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:43:15.940738087 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_816/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:43:35.284677657 -0500\n@@ -106,7 +106,10 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1323/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:57:29.450439492 -0500\n@@ -277,7 +277,11 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (numberOfSuccesses < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t\t}\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1323/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:57:29.454439483 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1288/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:56:29.250586617 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1288/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:56:29.262586587 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_372/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:32:03.698804728 -0500\n@@ -124,21 +124,11 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1451/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:00:58.745936249 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1451/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:00:58.749936239 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_881/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:19.228362891 -0500\n@@ -124,21 +124,11 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_652/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:39:21.349455904 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "k=1.0 / k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_359/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:48.578838454 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_273/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:29:43.487111064 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_945/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:47:04.092060020 -0500\n@@ -278,7 +278,11 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            if (numberOfSuccesses < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t\t}\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_945/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:47:04.096060010 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1748/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:09:19.724764311 -0500\n@@ -278,7 +278,11 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            if (numberOfSuccesses < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t\t}\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1748/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:09:19.728764301 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1395/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:59:28.490151869 -0500\n@@ -124,20 +124,14 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_570/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:37:13.137819084 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1165/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:09.739084508 -0500\n@@ -103,15 +103,15 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -129,14 +129,12 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            lower = ((int) Math.ceil(tmp)) - 1;\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1522/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:02:58.721652272 -0500\n@@ -106,7 +106,10 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_233/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:42.343246111 -0500\n@@ -134,9 +134,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_491/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:35:02.898211871 -0500\n@@ -176,7 +176,11 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_491/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:35:02.902211859 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1497/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:02:18.333747567 -0500\n@@ -106,7 +106,8 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        lower -= 1;\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -126,19 +127,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower-=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1448/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:00:54.949945280 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_387/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:32:25.910727287 -0500\n@@ -289,7 +289,12 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_387/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:32:25.914727273 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1097/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:51:18.551370741 -0500\n@@ -176,7 +176,11 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +322,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1097/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:51:18.555370731 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1827/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:11:43.220433482 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "upper=((int)Math.ceil(tmp)) - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1094/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:51:14.707380774 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1094/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:51:14.707380774 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1567/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:04:12.881477993 -0500\n@@ -123,22 +123,12 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_316/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:30:46.702972731 -0500\n@@ -290,7 +290,11 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_316/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:46.706972721 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_989/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:48:19.051851025 -0500\n@@ -135,7 +135,7 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                return solveInverseCumulativeProbability(p, lower, upper);\n             }\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "return solveInverseCumulativeProbability(p,lower,upper);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_431/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:33:30.446509016 -0500\n@@ -292,7 +292,11 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_431/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:33:30.450509003 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_367/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:58.038818014 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1465/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:01:21.729881630 -0500\n@@ -116,7 +116,10 @@\n         }\n \n         int upper = getSupportUpperBound();\n-        if (p == 1.0) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (p == 1.0) {\n             return upper;\n         }\n \n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 119, 
          "faulty": "if (p == 1.0) {\n  return upper;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_636/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:38:59.101517497 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1657/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:06:43.001127549 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1657/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:06:43.005127540 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_606/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:38:12.653647945 -0500\n@@ -276,7 +276,12 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_606/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:38:12.653647945 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1315/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:57:18.082467182 -0500\n@@ -277,7 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (!numericalVarianceIsCalculated) {\n+\t\t\t\tnumericalVariance = calculateNumericalVariance();\n+\t\t\t\tnumericalVarianceIsCalculated = true;\n+\t\t\t}\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1315/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:57:18.086467172 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "Replace", 
          "seed": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_777/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:42:33.000874541 -0500\n@@ -278,7 +278,11 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            if (numberOfSuccesses < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t\t}\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_777/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:42:33.004874529 -0500\n@@ -106,7 +106,11 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p <= 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,\n+\t\t\t\t\tp, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -134,9 +138,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_405/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:32:53.078634220 -0500\n@@ -305,7 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        numericalVarianceIsCalculated = true;\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_405/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:32:53.078634220 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "numericalVarianceIsCalculated=true;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_888/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:28.728334891 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_663/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:39:40.073404488 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "tmp=mu + k * sigma;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1378/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:59:02.938213274 -0500\n@@ -127,16 +127,16 @@\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n+            if (p <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t\t}\n+\t\t\tdouble k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1227/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:54:46.834840010 -0500\n@@ -128,15 +128,24 @@\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n+            while (lower + 1 < upper) {\n+\t\t\t\tint xm = (lower + upper) / 2;\n+\t\t\t\tif (xm < lower || xm > upper) {\n+\t\t\t\t\txm = lower + (upper - lower) / 2;\n+\t\t\t\t}\n+\t\t\t\tdouble pm = checkedCumulativeProbability(xm);\n+\t\t\t\tif (pm >= p) {\n+\t\t\t\t\tupper = xm;\n+\t\t\t\t} else {\n+\t\t\t\t\tlower = xm;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdouble tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_760/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:42:08.188954927 -0500\n@@ -129,14 +129,14 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower >= upper) {\n+\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n+\t\t\t\t\t\tlower, upper, false);\n+\t\t\t}\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_687/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:40:17.053304018 -0500\n@@ -128,15 +128,17 @@\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n+            if (lower >= upper) {\n+\t\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n+\t\t\t\t\t\tlower, upper, false);\n+\t\t\t}\n+\t\t\tdouble tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_172/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:23.331422695 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_218/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:19.187297607 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_156/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:27:03.415467614 -0500\n@@ -289,7 +289,12 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_156/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:03.419467605 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1135/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:52:19.491212955 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_137/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:26:39.499521792 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_488/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:34:59.314223082 -0500\n@@ -305,8 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n-                            getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n+        return FastMath.max(0, getSampleSize() + getNumberOfSuccesses()\n+\t\t\t\t- getPopulationSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_488/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:59.314223082 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "Replace", 
          "seed": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_174/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:25.219418445 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_752/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:57.880988670 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "InsertBefore", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1705/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:08:06.964932662 -0500\n@@ -124,7 +124,10 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n@@ -134,9 +137,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_101/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:25:46.555642702 -0500\n@@ -128,15 +128,15 @@\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n+            if (p <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t\t}\n+\t\t\tdouble tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "return lower;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_870/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:02.564412301 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_200/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:57.867345202 -0500\n@@ -115,7 +115,10 @@\n                         // is important for the solving step\n         }\n \n-        int upper = getSupportUpperBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint upper = getSupportUpperBound();\n         if (p == 1.0) {\n             return upper;\n         }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 118, 
          "faulty": "int upper=getSupportUpperBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1345/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:58:05.930350913 -0500\n@@ -124,21 +124,15 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (lower == Integer.MIN_VALUE) {\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1071/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:50:37.227479121 -0500\n@@ -120,25 +120,24 @@\n             return upper;\n         }\n \n-        // use the one-sided Chebyshev inequality to narrow the bracket\n+        while (lower + 1 < upper) {\n+\t\t\tint xm = (lower + upper) / 2;\n+\t\t\tif (xm < lower || xm > upper) {\n+\t\t\t\txm = lower + (upper - lower) / 2;\n+\t\t\t}\n+\t\t\tdouble pm = checkedCumulativeProbability(xm);\n+\t\t\tif (pm >= p) {\n+\t\t\t\tupper = xm;\n+\t\t\t} else {\n+\t\t\t\tlower = xm;\n+\t\t\t}\n+\t\t}\n+\t\t// use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 125, 
          "faulty": "final double mu=getNumericalMean();", 
          "type": "InsertBefore", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_71/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:25:01.331747134 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_332/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:09.766922557 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_970/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:47:47.875937259 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_897/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:41.428297642 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 142, 
          "faulty": "return solveInverseCumulativeProbability(p,lower,upper);", 
          "type": "Replace", 
          "seed": "return solveInverseCumulativeProbability(p,lower,upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_845/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:44:23.516529605 -0500\n@@ -276,7 +276,12 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_845/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:44:23.516529605 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_256/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:29:16.839169761 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_256/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:29:16.839169761 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_27/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:23:59.783891154 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            numericalVarianceIsCalculated = true;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -289,7 +290,12 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_27/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:23:59.815891079 -0500\n@@ -134,9 +134,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "numericalVarianceIsCalculated=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_74/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:25:04.827739020 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            numericalVarianceIsCalculated = true;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_74/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:25:04.831739012 -0500\n@@ -134,9 +134,10 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "numericalVarianceIsCalculated=true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1495/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:02:16.289752398 -0500\n@@ -126,18 +126,18 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        while (lower + 1 < upper) {\n+\t\t\tint xm = (lower + upper) / 2;\n+\t\t\tif (xm < lower || xm > upper) {\n+\t\t\t\txm = lower + (upper - lower) / 2;\n+\t\t\t}\n+\t\t\tdouble pm = checkedCumulativeProbability(xm);\n+\t\t\tif (pm >= p) {\n+\t\t\t\tupper = xm;\n+\t\t\t} else {\n+\t\t\t\tlower = xm;\n+\t\t\t}\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1175/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:53:23.003050832 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1175/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:23.003050832 -0500\n@@ -134,9 +134,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_733/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:41:28.449086191 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_733/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:28.449086191 -0500\n@@ -124,7 +124,10 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_905/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:45:54.560259344 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "k=1.0 / k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1255/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:55:33.370724352 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1619/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:05:37.341280480 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +137,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1671/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:07:07.109071520 -0500\n@@ -176,7 +176,11 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1671/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:07:07.109071520 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1854/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:12:27.268332197 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,18 +129,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_460/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:17.566355446 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1042/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:49:50.935601992 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "k=1.0 / k;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_283/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:29:59.807075233 -0500\n@@ -129,14 +129,12 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            lower = ((int) Math.ceil(tmp)) - 1;\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_413/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:33:04.430595849 -0500\n@@ -132,11 +132,8 @@\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n-            k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_113/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:26:04.643601237 -0500\n@@ -289,7 +289,12 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_113/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:26:04.643601237 -0500\n@@ -134,9 +134,10 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1798/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:10:52.608550005 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_362/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:52.398830197 -0500\n@@ -132,11 +132,7 @@\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n-            k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1343/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:58:03.866355913 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -123,22 +120,12 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "lower-=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_471/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:34:33.494304552 -0500\n@@ -292,7 +292,11 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_471/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:33.498304540 -0500\n@@ -102,7 +102,10 @@\n             throw new OutOfRangeException(p, 0, 1);\n         }\n \n-        int lower = getSupportLowerBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 105, 
          "faulty": "int lower=getSupportLowerBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_206/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:05.043329162 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1423/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:00:13.378044395 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_324/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:30:59.138945658 -0500\n@@ -305,8 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n-                            getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n+        return FastMath.max(0, getSampleSize() + getNumberOfSuccesses()\n+\t\t\t\t- getPopulationSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_324/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:59.142945650 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "Replace", 
          "seed": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_755/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:42:01.656976285 -0500\n@@ -111,7 +111,11 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,19 +130,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1686/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:07:34.917006965 -0500\n@@ -176,7 +176,11 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1686/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:07:34.921006956 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1437/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:00:37.285987348 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            numericalVariance = calculateNumericalVariance();\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1437/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:00:37.289987338 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -126,19 +123,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_144/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:26:47.431503794 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_144/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:26:47.435503785 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1842/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:12:08.460375430 -0500\n@@ -124,7 +124,19 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        while (lower + 1 < upper) {\n+\t\t\tint xm = (lower + upper) / 2;\n+\t\t\tif (xm < lower || xm > upper) {\n+\t\t\t\txm = lower + (upper - lower) / 2;\n+\t\t\t}\n+\t\t\tdouble pm = checkedCumulativeProbability(xm);\n+\t\t\tif (pm >= p) {\n+\t\t\t\tupper = xm;\n+\t\t\t} else {\n+\t\t\t\tlower = xm;\n+\t\t\t}\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n@@ -134,9 +146,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_303/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:28.207013078 -0500\n@@ -124,7 +124,10 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_425/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:33:23.230532949 -0500\n@@ -102,7 +102,10 @@\n             throw new OutOfRangeException(p, 0, 1);\n         }\n \n-        int lower = getSupportLowerBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 105, 
          "faulty": "int lower=getSupportLowerBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_189/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:44.455375237 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n@@ -155,7 +142,10 @@\n      * @return the smallest {@code p}-quantile of this distribution\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n-        while (lower + 1 < upper) {\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1268/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:55:54.462672223 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1268/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:55:54.462672223 -0500\n@@ -124,20 +124,14 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p == 1.0) {\n+\t\t\treturn upper;\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p == 1.0) {\n  return upper;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_216/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:28:17.299301814 -0500\n@@ -289,7 +289,12 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize > populationSize) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,\n+\t\t\t\t\tsampleSize, populationSize, true);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_216/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:28:17.299301814 -0500\n@@ -134,9 +134,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize > populationSize) {\n  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,sampleSize,populationSize,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1045/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:49:54.755591791 -0500\n@@ -124,20 +124,18 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (lower == Integer.MIN_VALUE) {\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_702/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:40:40.597240758 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_354/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:41.014854813 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_723/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:41:13.705135722 -0500\n@@ -102,7 +102,10 @@\n             throw new OutOfRangeException(p, 0, 1);\n         }\n \n-        int lower = getSupportLowerBound();\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tint lower = getSupportLowerBound();\n         if (p == 0.0) {\n             return lower;\n         }\n@@ -124,21 +127,11 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 105, 
          "faulty": "int lower=getSupportLowerBound();", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1533/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:03:14.513615087 -0500\n@@ -277,7 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (!numericalVarianceIsCalculated) {\n+\t\t\t\tnumericalVariance = calculateNumericalVariance();\n+\t\t\t\tnumericalVarianceIsCalculated = true;\n+\t\t\t}\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1533/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:03:14.513615087 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "Replace", 
          "seed": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_484/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:55.486235083 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 283, 
          "faulty": "return numericalVariance;", 
          "type": "Replace", 
          "seed": "return numericalVariance;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_538/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:36:21.641971170 -0500\n@@ -115,7 +115,10 @@\n                         // is important for the solving step\n         }\n \n-        int upper = getSupportUpperBound();\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n+\t\tint upper = getSupportUpperBound();\n         if (p == 1.0) {\n             return upper;\n         }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 118, 
          "faulty": "int upper=getSupportUpperBound();", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_691/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:40:22.777288589 -0500\n@@ -126,7 +126,10 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n+\t\tif (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n@@ -134,9 +137,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_139/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:26:41.431517405 -0500\n@@ -126,7 +126,14 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n+        if (lower == Integer.MIN_VALUE) {\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n+\t\tif (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n@@ -135,7 +142,6 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n             }\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1593/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:04:56.717375361 -0500\n@@ -106,7 +106,10 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p < 0.0 || p > 1.0) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "return solveInverseCumulativeProbability(p,lower,upper);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1062/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:50:23.199516186 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1062/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:50:23.203516176 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -126,19 +129,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_191/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:27:46.343371005 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_191/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:46.343371005 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "this.populationSize=populationSize;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_146/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:26:49.363499415 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_146/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:26:49.367499406 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            lower -= 1;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_369/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:31:59.934813920 -0500\n@@ -318,7 +318,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        numericalVariance = calculateNumericalVariance();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_369/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:31:59.934813920 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_486/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:34:57.398229085 -0500\n@@ -106,7 +106,10 @@\n         if (p == 0.0) {\n             return lower;\n         }\n-        if (lower == Integer.MIN_VALUE) {\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\tif (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n             }\n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1191/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:47.998987616 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "k=1.0 / k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_681/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:40:09.541324315 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -126,19 +123,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_197/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:27:54.411352934 -0500\n@@ -318,7 +318,11 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_197/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:54.415352925 -0500\n@@ -126,7 +126,10 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\tif (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n@@ -135,7 +138,6 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n             }\n         }\n \n@@ -155,7 +157,10 @@\n      * @return the smallest {@code p}-quantile of this distribution\n      */\n     protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n-        while (lower + 1 < upper) {\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\twhile (lower + 1 < upper) {\n             int xm = (lower + upper) / 2;\n             if (xm < lower || xm > upper) {\n                 /*\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 158, 
          "faulty": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1844/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 08:12:10.424370914 -0500\n@@ -277,7 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            if (!numericalVarianceIsCalculated) {\n+\t\t\t\tnumericalVariance = calculateNumericalVariance();\n+\t\t\t\tnumericalVarianceIsCalculated = true;\n+\t\t\t}\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1844/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:12:10.428370906 -0500\n@@ -134,9 +134,9 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p == 0.0) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "Replace", 
          "seed": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_769/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:42:19.988916551 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_769/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:42:19.992916538 -0500\n@@ -134,9 +134,10 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1196/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:53:55.090969737 -0500\n@@ -305,7 +305,11 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1196/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:53:55.094969727 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:02:49.219241695 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1259/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-01 07:55:38.942710564 -0500\n@@ -167,7 +167,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1259/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:55:38.942710564 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_167/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:27:17.611435578 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_291/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:30:11.415049798 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "random=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 07:02:45.423249176 -0500\n+++ /tmp/Arja_Defects4J_Math_2/patches_aq2w/Patch_1650/patched/tmp/Arja_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-01 08:06:32.017153098 -0500\n@@ -126,18 +126,9 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (p <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (p <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }
  ]
}