{
  "repair_end": "2018-12-02 21:36:41.261116", 
  "repair_begin": "2018-12-02 20:26:27.384257", 
  "patches": [
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1106/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:20:35.251453340 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1106/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:20:35.251453340 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,9 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\tdouble u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_725/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:08:57.361951716 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_725/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:08:57.361951716 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +319,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1616/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:38.345323166 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1616/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:38.349323173 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -277,7 +279,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +294,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +329,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1634/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:04.241373947 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1634/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:04.241373947 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1242/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:24:25.975982551 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1242/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:24:25.975982551 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1058/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:19:11.071278026 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1058/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:19:11.075278035 -0500\n@@ -291,7 +291,9 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses,\n+\t\t\t\tsampleSize);\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "final int[] domain=getDomain(populationSize,numberOfSuccesses,sampleSize);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1631/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:59.917365467 -0500\n@@ -124,7 +124,8 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        final double n = random.nextDouble();\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n@@ -134,9 +135,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +178,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1631/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:59.921365475 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_389/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:58:31.300686436 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1209/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:23:30.791853907 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1209/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:23:30.791853907 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1135/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:24.031554500 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1135/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:24.031554500 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +323,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_686/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:07:40.785782545 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_686/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:07:40.789782554 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double qi = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_425/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:59:34.264811549 -0500\n@@ -132,11 +132,7 @@\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n-            k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "recomputeZ();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1481/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:04.092872028 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1481/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:04.092872028 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -305,7 +307,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        final double sigma = FastMath.sqrt(getNumericalVariance());\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n@@ -318,7 +321,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "final double sigma=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1560/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:08.461140301 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1560/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:08.461140301 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1141/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:32.591572237 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1141/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:32.595572246 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1156/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:58.267634118 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1156/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:58.267634118 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +321,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1688/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:36:33.729550172 -0500\n@@ -124,7 +124,8 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        final double n = random.nextDouble();\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n@@ -134,9 +135,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +178,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1688/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:36:33.733550181 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1084/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:19:56.959373716 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1084/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:19:56.959373716 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,9 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses,\n+\t\t\t\tsampleSize);\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "final int[] domain=getDomain(populationSize,numberOfSuccesses,sampleSize);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1497/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:29.528927171 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1497/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:29.532927180 -0500\n@@ -276,8 +276,13 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +296,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1042/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:18:45.323224198 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "k=1.0 / k;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1290/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:49.096173349 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1290/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:25:49.100173360 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1219/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:23:47.707893522 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1219/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:23:47.711893531 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -291,7 +292,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_669/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:07:08.957717306 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_669/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:07:08.961717313 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_992/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:17:17.079038873 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_992/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:17:17.079038873 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +322,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_113/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:49:45.307654101 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_113/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:49:45.307654101 -0500\n@@ -290,7 +290,8 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        double upperBound = getSupportUpperBound();\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_394/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:58:39.360702446 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_394/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:58:39.360702446 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_662/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:56.309692082 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_662/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:56.313692091 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        final double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -276,7 +277,8 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        int min = Integer.MAX_VALUE;\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_449/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:00:20.124902749 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_449/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:00:20.128902758 -0500\n@@ -176,7 +176,11 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -276,7 +280,11 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (populationSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.POPULATION_SIZE, populationSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (populationSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,populationSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1395/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:28:47.696573466 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1395/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:28:47.696573466 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_191/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:52:09.519933040 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_191/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:52:09.519933040 -0500\n@@ -290,7 +290,8 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        double r = 1.0d;\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1641/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:14.945394965 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            int a = 0;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +171,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1641/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:14.949394975 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "int a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1127/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:11.259528041 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1127/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:11.263528050 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1020/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:18:05.599140939 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1184/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:22:44.875745520 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1184/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:22:44.875745520 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -277,7 +279,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            long n = 0;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -318,7 +321,9 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\tdouble u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_649/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:37.029653636 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_649/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:37.029653636 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +279,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double probability = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double probability=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1443/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:04.372741933 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1443/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:04.372741933 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_931/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:15:25.362802097 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_931/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:15:25.362802097 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_523/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:02:43.001187176 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_523/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:02:43.001187176 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double p = (double) sampleSize / (double) populationSize;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double p=(double)sampleSize / (double)populationSize;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1654/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:37.969440236 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +137,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1654/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:37.973440243 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +322,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_541/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:03:19.321259534 -0500\n@@ -129,14 +129,9 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_541/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:03:19.321259534 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_117/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:49:51.671666265 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double min = Double.POSITIVE_INFINITY;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_117/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:49:51.671666265 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_458/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:00:36.996936316 -0500\n@@ -129,14 +129,9 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_458/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:00:37.000936323 -0500\n@@ -167,7 +167,8 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        double qi = 0;\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_179/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:51:49.203893400 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_179/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:51:49.207893408 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double max = Double.NEGATIVE_INFINITY;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1385/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:28:28.516531045 -0500\n@@ -129,14 +129,15 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +174,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1449/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:12.832760418 -0500\n@@ -126,18 +126,11 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1449/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:12.836760427 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +290,19 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "int upper=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1684/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:36:27.197537272 -0500\n@@ -135,7 +135,7 @@\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n             if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n+                int i = 0;\n             }\n         }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1684/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:36:27.197537272 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1637/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:08.557382419 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1637/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:08.557382419 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +290,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +321,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_413/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:59:13.120769520 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_413/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:59:13.124769529 -0500\n@@ -276,7 +276,11 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (populationSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.POPULATION_SIZE, populationSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (populationSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,populationSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1081/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:19:52.731364912 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1081/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:19:52.731364912 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_645/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:30.629640873 -0500\n@@ -133,10 +133,7 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            final double n = random.nextGaussian();\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_645/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:30.633640882 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double probability = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double probability=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Replace", 
          "seed": "final double n=random.nextGaussian();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1530/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:21.021038355 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1530/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:21.025038363 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1225/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:23:58.339918337 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1225/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:23:58.339918337 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            long n = 0;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -318,7 +319,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        double u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_660/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:54.045687567 -0500\n@@ -103,7 +103,8 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n+        final double pivot = 40.0d;\n+\t\tif (p == 0.0) {\n             return lower;\n         }\n         if (lower == Integer.MIN_VALUE) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_660/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:54.053687583 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_658/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:51.921683332 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_658/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:51.921683332 -0500\n@@ -318,7 +318,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1306/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:12.684226912 -0500\n@@ -132,11 +132,16 @@\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n-            k = 1.0 / k;\n+            double v = 0;\n+\t\t\tk = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1306/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:12.688226919 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1490/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:18.920904192 -0500\n@@ -103,9 +103,7 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n+        final double pivot = 40.0d;\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +132,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1490/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:18.920904192 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Replace", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1479/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:01.956867389 -0500\n@@ -103,9 +103,7 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n+        final double pivot = 40.0d;\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +132,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1479/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:01.956867389 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Replace", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1004/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:17:38.387083749 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1004/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:17:38.387083749 -0500\n@@ -280,7 +280,8 @@\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n-        return numericalVariance;\n+        double r = 1.0d;\n+\t\treturn numericalVariance;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 283, 
          "faulty": "return numericalVariance;", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1583/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:44.829218164 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            int a = 0;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +171,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1583/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:44.833218172 -0500\n@@ -277,8 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n+            final double u = random.nextDouble();\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +293,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "int a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1629/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:57.637360987 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1629/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:57.641360995 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_231/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:53:20.572072180 -0500\n@@ -127,16 +127,14 @@\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n+            int a = 0;\n+\t\t\tdouble k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "int a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1012/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:17:51.223110742 -0500\n@@ -132,11 +132,9 @@\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n-            k = 1.0 / k;\n+            lower = ((int) Math.ceil(tmp)) - 1;\n+\t\t\tk = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +171,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "InsertBefore", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1622/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:46.973340072 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            int a = 0;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +171,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1622/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:46.973340072 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +294,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +325,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "int a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1581/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:42.705213623 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1543/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:40.489080245 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +137,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1543/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:40.489080245 -0500\n@@ -276,7 +276,11 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n@@ -291,7 +295,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +326,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1162/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:22:06.755654516 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1162/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:22:06.755654516 -0500\n@@ -291,7 +291,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1618/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:40.485327358 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1618/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:40.485327358 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +322,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1007/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:17:42.671092761 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1007/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:17:42.675092769 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -265,7 +266,8 @@\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        int[] out = new int[sampleSize];\n+\t\treturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 268, 
          "faulty": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "int[] out=new int[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_799/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:11:22.386275917 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -190,7 +187,8 @@\n      * inversion method</a>.\n      */\n     public int sample() {\n-        return inverseCumulativeProbability(random.nextDouble());\n+        final double mn = getNumericalMean();\n+\t\treturn inverseCumulativeProbability(random.nextDouble());\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_799/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:11:22.390275927 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 193, 
          "faulty": "return inverseCumulativeProbability(random.nextDouble());", 
          "type": "InsertBefore", 
          "seed": "final double mn=getNumericalMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_234/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:53:24.868080614 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_234/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:53:24.872080623 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_216/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:52:57.312026550 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_216/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:52:57.312026550 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -277,7 +278,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double max = Double.NEGATIVE_INFINITY;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1281/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:36.296144181 -0500\n@@ -133,10 +133,13 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1532/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:23.141042921 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1532/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:23.141042921 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_277/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:54:52.480253091 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_277/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:54:52.484253099 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +279,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1365/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:27:53.116452434 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1365/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:27:53.120452442 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +322,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        double u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_5/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:46:33.307278289 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_5/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:46:33.319278314 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1266/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:10.868086014 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_220/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:53:01.560034879 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_220/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:53:01.560034879 -0500\n@@ -292,7 +292,8 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        double weightSum = 0;\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "double weightSum=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_902/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:14:34.066692427 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_902/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:14:34.066692427 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1511/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:50.972973545 -0500\n@@ -116,7 +116,12 @@\n         }\n \n         int upper = getSupportUpperBound();\n-        if (p == 1.0) {\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n+\t\tif (p == 1.0) {\n             return upper;\n         }\n \n@@ -134,9 +139,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +182,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1511/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:50.972973545 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        final double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -278,7 +279,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 119, 
          "faulty": "if (p == 1.0) {\n  return upper;\n}", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_385/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:58:24.924673776 -0500\n@@ -129,14 +129,9 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1488/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:16.784899562 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1488/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:16.784899562 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -277,7 +279,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +294,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +325,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1025/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:18:14.127158835 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1025/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:18:14.127158835 -0500\n@@ -318,7 +318,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        double x = 0;\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_87/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:49:00.347568582 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_373/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:58:01.616627504 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_373/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:58:01.620627511 -0500\n@@ -167,7 +167,8 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        final double n = getSampleSize();\n+\t\treturn populationSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1334/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:59.324332128 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1334/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:59.324332128 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +294,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +325,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_39/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:47:31.755394635 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_39/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:47:31.759394642 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1416/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:21.760648521 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1416/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:21.764648529 -0500\n@@ -291,7 +291,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -305,7 +313,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        final double sigma = FastMath.sqrt(getNumericalVariance());\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "final double sigma=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_976/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:16:51.498984887 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_976/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:16:51.498984887 -0500\n@@ -280,7 +280,8 @@\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n-        return numericalVariance;\n+        double r = 1.0d;\n+\t\treturn numericalVariance;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 283, 
          "faulty": "return numericalVariance;", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1674/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:36:10.005503348 -0500\n@@ -103,9 +103,7 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n+        final double pivot = 40.0d;\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +132,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +168,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1674/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:36:10.005503348 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +294,19 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +333,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Replace", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1447/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:10.728755823 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1447/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:10.728755823 -0500\n@@ -305,7 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        final double sigma = FastMath.sqrt(getNumericalVariance());\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "final double sigma=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1679/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:36:18.597520298 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1679/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:36:18.597520298 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -277,7 +279,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +294,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +325,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1318/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:36.192280055 -0500\n@@ -124,19 +124,14 @@\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n-        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n+        double x = 0;\n+\t\tfinal boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1318/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:36.196280063 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 127, 
          "faulty": "final boolean chebyshevApplies=!(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)|| Double.isNaN(sigma)|| sigma == 0.0);", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_635/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:15.645610996 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_635/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:15.645610996 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "BigFraction h=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1462/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:32.076802396 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1462/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:32.076802396 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        final double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -278,7 +279,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "return 0.5 * (lower + upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_926/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:15:16.722783670 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_926/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:15:16.726783679 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_889/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:14:11.142643197 -0500\n@@ -127,16 +127,21 @@\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n+            final double pivot = 40.0d;\n+\t\t\tdouble k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_889/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:14:11.142643197 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_288/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:55:13.796295167 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_288/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:55:13.796295167 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_953/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:16:03.850883972 -0500\n@@ -132,11 +132,9 @@\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n-            k = 1.0 / k;\n+            lower = ((int) Math.ceil(tmp)) - 1;\n+\t\t\tk = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "InsertBefore", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1513/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:53.104978149 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1513/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:53.108978158 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +327,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_543/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:03:21.453263781 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_543/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:03:21.457263789 -0500\n@@ -276,7 +276,8 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        double v = 0;\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_846/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:12:54.126476715 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_846/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:12:54.126476715 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_355/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:57:25.732556310 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_355/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:57:25.732556310 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double max = Double.NEGATIVE_INFINITY;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1436/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:53.792718786 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1436/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:53.792718786 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -291,7 +292,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_101/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:49:22.927611437 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_101/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:49:22.927611437 -0500\n@@ -290,7 +290,8 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        double upperBound = getSupportUpperBound();\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_552/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:03:37.961296673 -0500\n@@ -129,14 +129,9 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_552/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:03:37.961296673 -0500\n@@ -305,7 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        final double n = random.nextDouble();\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_483/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:01:25.597033039 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_483/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:01:25.601033046 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double p = (double) sampleSize / (double) populationSize;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double p=(double)sampleSize / (double)populationSize;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1120/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:02.739510380 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1120/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:02.743510389 -0500\n@@ -291,7 +291,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1410/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:13.472630292 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_907/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:14:40.498706213 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_907/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:14:40.498706213 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_938/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:15:36.134825047 -0500\n@@ -127,16 +127,21 @@\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n+            final double pivot = 40.0d;\n+\t\t\tdouble k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1575/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:34.177195383 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1575/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:34.181195392 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1345/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:27:16.544370758 -0500\n@@ -134,12 +134,10 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n-        return solveInverseCumulativeProbability(p, lower, upper);\n+        final double x = random.nextGaussian();\n+\t\treturn solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1345/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:27:16.548370766 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 142, 
          "faulty": "return solveInverseCumulativeProbability(p,lower,upper);", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_432/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:59:46.904836681 -0500\n@@ -111,7 +111,8 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            int j = 1;\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -123,7 +124,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +136,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_432/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:59:46.904836681 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1474/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:53.428848863 -0500\n@@ -120,7 +120,10 @@\n             return upper;\n         }\n \n-        // use the one-sided Chebyshev inequality to narrow the bracket\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\t// use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n@@ -129,14 +132,22 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1474/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:53.428848863 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 125, 
          "faulty": "final double mu=getNumericalMean();", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_63/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:48:14.107479054 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_785/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:10:55.166215749 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +131,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_785/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:10:55.166215749 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "double probability=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1248/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:24:36.732007433 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1248/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:24:36.736007442 -0500\n@@ -291,7 +291,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_653/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:43.409666358 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_653/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:43.413666365 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "BigFraction h=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1286/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:42.688158756 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1286/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:25:42.692158765 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_711/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:08:29.849889101 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_711/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:08:29.849889101 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1419/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:26.016657875 -0500\n@@ -129,14 +129,15 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +174,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1419/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:26.016657875 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_402/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:58:54.192731909 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_402/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:58:54.192731909 -0500\n@@ -280,7 +280,8 @@\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n-        return numericalVariance;\n+        final double m = getNumberOfSuccesses();\n+\t\treturn numericalVariance;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 283, 
          "faulty": "return numericalVariance;", 
          "type": "InsertBefore", 
          "seed": "final double m=getNumberOfSuccesses();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1215/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:23:41.379878722 -0500\n@@ -129,14 +129,7 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1215/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:23:41.379878722 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +321,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "Delete", 
          "seed": "double qi=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_218/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:52:59.452030746 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_218/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:52:59.456030753 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_897/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:14:25.538674129 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_897/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:14:25.542674137 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_917/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:14:59.610747121 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_917/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:14:59.610747121 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -265,7 +266,8 @@\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        int[] out = new int[sampleSize];\n+\t\treturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 268, 
          "faulty": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "int[] out=new int[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_150/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:50:53.191784519 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_150/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:50:53.195784527 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +279,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1336/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:27:01.464336936 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1336/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:27:01.464336936 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_296/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:55:28.728324663 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_296/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:55:28.728324663 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1055/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:19:06.799269103 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1296/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:59.804197694 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1296/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:25:59.804197694 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1526/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:14.633024592 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1526/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:14.633024592 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +290,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -305,7 +308,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        final double sigma = FastMath.sqrt(getNumericalVariance());\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n@@ -318,7 +322,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "final double sigma=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "double qa=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1322/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:42.596294491 -0500\n@@ -129,14 +129,22 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1322/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:42.596294491 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1456/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:21.336778981 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1456/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:21.336778981 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1378/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:28:18.856509637 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1378/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:28:18.856509637 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1538/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:31.913061801 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1538/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:31.917061810 -0500\n@@ -276,8 +276,13 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1492/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:21.024908751 -0500\n@@ -126,18 +126,11 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1492/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:21.024908751 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +290,19 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "int upper=getSupportUpperBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1152/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:51.907618801 -0500\n@@ -107,15 +107,15 @@\n             return lower;\n         }\n         if (lower == Integer.MIN_VALUE) {\n-            if (checkedCumulativeProbability(lower) >= p) {\n-                return lower;\n-            }\n-        } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n-                        // is important for the solving step\n-        }\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n \n-        int upper = getSupportUpperBound();\n+        int j = 1;\n+\t\tint upper = getSupportUpperBound();\n         if (p == 1.0) {\n             return upper;\n         }\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1152/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:51.911618811 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,9 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses,\n+\t\t\t\tsampleSize);\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "final int[] domain=getDomain(populationSize,numberOfSuccesses,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 118, 
          "faulty": "int upper=getSupportUpperBound();", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1273/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:21.444110244 -0500\n@@ -129,14 +129,7 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1273/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:25:21.448110252 -0500\n@@ -291,7 +291,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1578/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:38.457204539 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1578/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:38.461204548 -0500\n@@ -277,8 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +293,23 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +336,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_852/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:13:04.734499751 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_852/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:13:04.738499759 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -265,7 +267,8 @@\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        int[] out = new int[sampleSize];\n+\t\treturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n@@ -318,7 +321,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 268, 
          "faulty": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "int[] out=new int[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1239/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:24:21.747972753 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1239/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:24:21.747972753 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -277,7 +279,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            long n = 0;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -305,7 +308,11 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n@@ -318,7 +325,9 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\tdouble u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_495/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:01:48.877079387 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_495/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:01:48.877079387 -0500\n@@ -276,7 +276,11 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (populationSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.POPULATION_SIZE, populationSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n@@ -318,7 +322,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double pivot = 40.0d;\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (populationSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,populationSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_639/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:22.005623678 -0500\n@@ -126,18 +126,7 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n+        final int max = (upper - lower) + 1;\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Replace", 
          "seed": "final int max=(upper - lower) + 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1205/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:23:24.411838923 -0500\n@@ -129,14 +129,15 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1205/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:23:24.415838932 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1664/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:50.837465570 -0500\n@@ -103,9 +103,7 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n+        final double pivot = 40.0d;\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +132,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1664/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:50.841465577 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +294,19 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +333,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Replace", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1534/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:25.349047674 -0500\n@@ -103,9 +103,7 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n+        final double pivot = 40.0d;\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +132,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1534/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:25.353047682 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,19 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +331,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Replace", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1227/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:24:00.475923315 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1227/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:24:00.475923315 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_743/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:09:32.742031679 -0500\n@@ -129,14 +129,9 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_743/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:09:32.742031679 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_163/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:51:18.191833037 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1570/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:25.705177250 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1570/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:25.709177258 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double value = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +291,19 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +330,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_226/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:53:12.132055614 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_226/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:53:12.136055621 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "double t=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_201/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:52:28.275969696 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_201/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:52:28.275969696 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +279,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1356/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:27:35.988414243 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1356/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:27:35.988414243 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_344/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:57:04.472514161 -0500\n@@ -123,20 +123,16 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_990/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:17:14.979034446 -0500\n@@ -128,15 +128,13 @@\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n+            final double x = random.nextGaussian();\n+\t\t\tdouble tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_990/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:17:14.979034446 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 131, 
          "faulty": "double tmp=mu - k * sigma;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_984/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:17:04.279011875 -0500\n@@ -127,16 +127,21 @@\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n+            final double pivot = 40.0d;\n+\t\t\tdouble k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_984/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:17:04.287011892 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_609/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:05:26.941513889 -0500\n@@ -129,14 +129,16 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_609/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:05:26.941513889 -0500\n@@ -305,7 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        final double n = random.nextDouble();\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_695/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:07:57.861818717 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_695/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:07:57.861818717 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        final double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -276,7 +277,8 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        int min = Integer.MAX_VALUE;\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_419/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:59:23.664790477 -0500\n@@ -129,14 +129,9 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_854/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:13:06.850504341 -0500\n@@ -127,16 +127,14 @@\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n+            final double pivot = 40.0d;\n+\t\t\tdouble k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_854/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:13:06.854504351 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1451/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:14.968765083 -0500\n@@ -129,14 +129,14 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +173,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1451/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:14.968765083 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "double value=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1303/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:08.416217238 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1303/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:08.416217238 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            long n = 0;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +323,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        double u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_319/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:56:14.956416084 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_319/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:56:14.960416093 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        double min = Double.POSITIVE_INFINITY;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1556/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:01.945126325 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +137,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1556/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:01.949126333 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -276,7 +277,11 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1270/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:17.200100527 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1270/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:25:17.200100527 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -265,7 +266,8 @@\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        final double n = random.nextDouble();\n+\t\treturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 268, 
          "faulty": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1425/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:34.492676486 -0500\n@@ -129,14 +129,15 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +174,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1425/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:34.496676494 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_880/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:13:54.102606511 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -126,19 +123,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "final int max=(upper - lower) + 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_578/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:04:28.737397866 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_578/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:04:28.737397866 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +319,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1235/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:24:15.379957979 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1235/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:24:15.383957988 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_123/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:50:02.231686477 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_123/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:50:02.235686485 -0500\n@@ -290,7 +290,8 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        double r = 1.0d;\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_139/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:50:33.147745854 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_139/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:50:33.147745854 -0500\n@@ -290,7 +290,8 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        double upperBound = getSupportUpperBound();\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1650/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:31.393427297 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1650/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:31.397427306 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        final double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -289,9 +290,25 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +335,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "return 0.5 * (lower + upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1656/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:40.145444517 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1656/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:40.149444526 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +291,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +326,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1173/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:22:25.863700253 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1173/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:22:25.867700262 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1566/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:19.281163492 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1566/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:19.285163501 -0500\n@@ -158,7 +158,9 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\tfinal double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -278,7 +280,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double value = 0;\n         }\n         return numericalVariance;\n     }\n@@ -289,9 +291,17 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +328,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "return 0.5 * (lower + upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_673/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:07:15.289729934 -0500\n@@ -129,14 +129,9 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double upperBound = getSupportUpperBound();\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_673/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:07:15.293729941 -0500\n@@ -305,7 +305,8 @@\n      * @return lower bound of the support\n      */\n     public int getSupportLowerBound() {\n-        return FastMath.max(0,\n+        final double n = random.nextDouble();\n+\t\treturn FastMath.max(0,\n                             getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "double upperBound=getSupportUpperBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 308, 
          "faulty": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1002/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:17:36.207079162 -0500\n@@ -132,11 +132,9 @@\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n-            k = 1.0 / k;\n+            lower = ((int) Math.ceil(tmp)) - 1;\n+\t\t\tk = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 135, 
          "faulty": "k=1.0 / k;", 
          "type": "InsertBefore", 
          "seed": "lower=((int)Math.ceil(tmp)) - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1332/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:57.192327338 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1332/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:57.192327338 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        long n = 0;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -277,7 +278,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            long n = 0;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        double u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1078/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:19:48.499356097 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1078/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:19:48.499356097 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1499/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:31.656931778 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1499/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:31.660931786 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1611/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:29.805306441 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1611/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:29.809306450 -0500\n@@ -158,7 +158,9 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\tfinal double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -278,7 +280,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double value = 0;\n         }\n         return numericalVariance;\n     }\n@@ -289,9 +291,17 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +328,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "return 0.5 * (lower + upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1602/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:14.753276995 -0500\n@@ -111,7 +111,10 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            if (p < 0.0 || p > 1.0) {\n+\t\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t\t}\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +137,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1602/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:14.753276995 -0500\n@@ -276,7 +276,11 @@\n      * {@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.\n      */\n     public double getNumericalVariance() {\n-        if (!numericalVarianceIsCalculated) {\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tif (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n@@ -291,7 +295,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +326,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 279, 
          "faulty": "if (!numericalVarianceIsCalculated) {\n  numericalVariance=calculateNumericalVariance();\n  numericalVarianceIsCalculated=true;\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "if (p < 0.0 || p > 1.0) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1093/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:20:09.719400270 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1093/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:20:09.723400278 -0500\n@@ -291,7 +291,9 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses,\n+\t\t\t\tsampleSize);\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "final int[] domain=getDomain(populationSize,numberOfSuccesses,sampleSize);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_335/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:56:47.524480575 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_335/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:56:47.528480584 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double a = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1048/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:18:56.055246646 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "final double numeratorDF=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1122/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:04.855514767 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1122/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:04.859514775 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1626/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:53.393352662 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1626/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:53.393352662 -0500\n@@ -277,8 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +293,23 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +336,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1501/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:33.768936349 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1501/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:33.772936357 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +279,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_576/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:04:26.601393608 -0500\n@@ -111,7 +111,8 @@\n                 return lower;\n             }\n         } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n+            double r = 1.0d;\n+\t\t\tlower -= 1; // this ensures cumulativeProbability(lower) < p, which\n                         // is important for the solving step\n         }\n \n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 114, 
          "faulty": "lower-=1;", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1518/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:01.668996637 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1518/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:01.672996646 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1175/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:22:27.999705350 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1175/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:22:27.999705350 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -318,7 +319,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1662/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:48.657461276 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1662/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:48.657461276 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double m=getMean();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_942/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:15:42.622838857 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_942/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:15:42.622838857 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -265,7 +266,8 @@\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        int[] out = new int[sampleSize];\n+\t\treturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 268, 
          "faulty": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "int[] out=new int[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1404/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:02.772606728 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1404/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:02.776606736 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1545/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:42.589084759 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1545/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:42.593084767 -0500\n@@ -277,8 +277,10 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +293,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_14/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:46:47.871307261 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_615/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:05:37.553535047 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_615/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:05:37.553535047 -0500\n@@ -278,7 +278,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double probability = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double probability=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1299/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:04.104207457 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1299/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:04.104207457 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            long n = 0;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -318,7 +319,9 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\tdouble u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1138/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:28.287563312 -0500\n@@ -107,15 +107,15 @@\n             return lower;\n         }\n         if (lower == Integer.MIN_VALUE) {\n-            if (checkedCumulativeProbability(lower) >= p) {\n-                return lower;\n-            }\n-        } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n-                        // is important for the solving step\n-        }\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n \n-        int upper = getSupportUpperBound();\n+        int j = 1;\n+\t\tint upper = getSupportUpperBound();\n         if (p == 1.0) {\n             return upper;\n         }\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1138/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:28.311563362 -0500\n@@ -291,7 +291,9 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses,\n+\t\t\t\tsampleSize);\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "final int[] domain=getDomain(populationSize,numberOfSuccesses,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 118, 
          "faulty": "int upper=getSupportUpperBound();", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_584/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:04:39.273418866 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_584/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:04:39.277418873 -0500\n@@ -292,7 +292,8 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        final double u = random.nextDouble();\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1301/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:06.288212412 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1301/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:06.288212412 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1412/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:15.592634957 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1412/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:15.596634966 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1509/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:31:48.736968714 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1509/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:31:48.736968714 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "return 0.5 * (lower + upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_642/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:26.337632316 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_642/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:26.341632323 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        final double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_187/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:52:03.583921450 -0500\n@@ -134,12 +134,12 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n-        return solveInverseCumulativeProbability(p, lower, upper);\n+        if (p < 0 || p > 1) {\n+\t\t\tthrow new OutOfRangeException(p, 0, 1);\n+\t\t}\n+\t\treturn solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_187/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:52:03.587921458 -0500\n@@ -290,7 +290,8 @@\n      */\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n-        final double m = getNumberOfSuccesses();\n+        double r = 1.0d;\n+\t\tfinal double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 293, 
          "faulty": "final double m=getNumberOfSuccesses();", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 142, 
          "faulty": "return solveInverseCumulativeProbability(p,lower,upper);", 
          "type": "InsertBefore", 
          "seed": "if (p < 0 || p > 1) {\n  throw new OutOfRangeException(p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_98/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:49:18.711603421 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_98/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:49:18.711603421 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double max = Double.NEGATIVE_INFINITY;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1191/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:22:57.583775648 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1191/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:22:57.587775657 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_935/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:15:31.854815932 -0500\n@@ -127,16 +127,21 @@\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n+            final double pivot = 40.0d;\n+\t\t\tdouble k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n             if (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_935/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:15:31.858815940 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 130, 
          "faulty": "double k=FastMath.sqrt((1.0 - p) / p);", 
          "type": "InsertBefore", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_904/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:14:36.198696998 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_904/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:14:36.198696998 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -265,7 +266,8 @@\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        int[] out = new int[sampleSize];\n+\t\treturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 268, 
          "faulty": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "int[] out=new int[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_836/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:12:37.254440001 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_836/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:12:37.254440001 -0500\n@@ -318,7 +318,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1061/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:19:15.367286998 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1061/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:19:15.371287007 -0500\n@@ -291,7 +291,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1342/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:27:12.196361015 -0500\n@@ -129,14 +129,15 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +174,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1342/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:27:12.196361015 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1053/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:19:04.635264581 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1053/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:19:04.639264589 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double result = Double.NaN;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -318,7 +321,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double result=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1263/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:06.540076082 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1263/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:25:06.544076092 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1133/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:21.891550068 -0500\n@@ -133,10 +133,13 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1133/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:21.895550077 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1423/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:32.316671710 -0500\n@@ -120,7 +120,10 @@\n             return upper;\n         }\n \n-        // use the one-sided Chebyshev inequality to narrow the bracket\n+        if (p == 0.0) {\n+\t\t\treturn lower;\n+\t\t}\n+\t\t// use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n@@ -129,14 +132,15 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 125, 
          "faulty": "final double mu=getNumericalMean();", 
          "type": "InsertBefore", 
          "seed": "if (p == 0.0) {\n  return lower;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_760/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:10:04.374102671 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_760/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:10:04.374102671 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +320,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1091/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:20:07.591395843 -0500\n@@ -107,13 +107,12 @@\n             return lower;\n         }\n         if (lower == Integer.MIN_VALUE) {\n-            if (checkedCumulativeProbability(lower) >= p) {\n-                return lower;\n-            }\n-        } else {\n-            lower -= 1; // this ensures cumulativeProbability(lower) < p, which\n-                        // is important for the solving step\n-        }\n+\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\treturn lower;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlower -= 1;\n+\t\t}\n \n         int upper = getSupportUpperBound();\n         if (p == 1.0) {\n@@ -133,10 +132,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1091/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:20:07.591395843 -0500\n@@ -291,7 +291,9 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses,\n+\t\t\t\tsampleSize);\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "final int[] domain=getDomain(populationSize,numberOfSuccesses,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 109, 
          "faulty": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1329/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:53.392318795 -0500\n@@ -129,14 +129,22 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1329/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:53.396318803 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_631/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:06:09.253598250 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_631/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:06:09.257598257 -0500\n@@ -292,7 +292,8 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        int max = Integer.MIN_VALUE;\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1600/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:12.605272796 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1600/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:12.609272803 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -277,7 +278,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1522/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:08.189010700 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1522/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:08.189010700 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        final double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_746/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:09:37.010041283 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double t = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1283/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:25:38.408148999 -0500\n@@ -129,14 +129,15 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n+            if (p <= 0 || p > 1) {\n+\t\t\t\tthrow new OutOfRangeException(\n+\t\t\t\t\t\tLocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1);\n+\t\t\t}\n+\t\t\tif (tmp > lower) {\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +174,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1283/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:25:38.412149008 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "if (p <= 0 || p > 1) {\n  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT,p,0,1);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1658/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:35:42.253448667 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1658/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:35:42.257448674 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1324/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:26:44.744299332 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1324/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:26:44.744299332 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_873/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:13:44.350585478 -0500\n@@ -103,9 +103,6 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +131,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_873/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:13:44.350585478 -0500\n@@ -278,7 +278,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +290,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Delete", 
          "seed": "double probability=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "final double numeratorDF=getNumeratorDegreesOfFreedom();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_55/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:48:00.535451991 -0500\n@@ -134,9 +134,7 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            double min = Double.POSITIVE_INFINITY;\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "InsertBefore", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1433/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:49.536709468 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +177,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1433/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:49.536709468 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_980/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:16:57.846998296 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_980/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:16:57.846998296 -0500\n@@ -277,7 +277,9 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double q = (double) (populationSize - sampleSize)\n+\t\t\t\t\t/ (double) populationSize;\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double q=(double)(populationSize - sampleSize) / (double)populationSize;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_844/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:12:51.954471994 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_844/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:12:51.954471994 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +323,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1588/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:51.201230994 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1588/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:51.201230994 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1593/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:59.901247975 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1593/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:59.905247984 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_498/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:01:52.657086914 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "lower-=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_89/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:49:02.459572583 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_89/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:49:02.459572583 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1143/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:34.739577311 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1143/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:34.739577311 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -291,7 +293,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +324,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1438/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:29:55.912723427 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1438/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:29:55.916723437 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +323,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1383/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:28:26.404526367 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1383/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:28:26.408526377 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -167,7 +168,11 @@\n      * @return the population size.\n      */\n     public int getPopulationSize() {\n-        return populationSize;\n+        if (populationSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.POPULATION_SIZE, populationSize);\n+\t\t}\n+\t\treturn populationSize;\n     }\n \n     /**\n@@ -176,7 +181,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +284,6 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -318,7 +323,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 170, 
          "faulty": "return populationSize;", 
          "type": "InsertBefore", 
          "seed": "if (populationSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,populationSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Delete", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1471/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:49.168839601 -0500\n@@ -103,9 +103,7 @@\n         }\n \n         int lower = getSupportLowerBound();\n-        if (p == 0.0) {\n-            return lower;\n-        }\n+        final double pivot = 40.0d;\n         if (lower == Integer.MIN_VALUE) {\n             if (checkedCumulativeProbability(lower) >= p) {\n                 return lower;\n@@ -134,9 +132,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1471/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:49.172839611 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +294,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +325,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 106, 
          "faulty": "if (p == 0.0) {\n  return lower;\n}", 
          "type": "Replace", 
          "seed": "final double pivot=40.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1088/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:20:03.359387037 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1088/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:20:03.359387037 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double t = 0;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1454/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:30:19.192774302 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1454/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:30:19.196774312 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +279,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double mean = 0;\n+\t\t\tdouble value = 0;\n         }\n         return numericalVariance;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1168/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:22:17.403680034 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1168/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:22:17.403680034 -0500\n@@ -291,7 +291,8 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        double u2 = random.nextDouble();\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1400/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:28:56.360592589 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1400/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:28:56.360592589 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -278,7 +279,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +293,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +328,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "Replace", 
          "seed": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_479/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:01:19.217020339 -0500\n@@ -126,19 +126,6 @@\n         final double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n-        if (chebyshevApplies) {\n-            double k = FastMath.sqrt((1.0 - p) / p);\n-            double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n-            k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n-        }\n-\n         return solveInverseCumulativeProbability(p, lower, upper);\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 129, 
          "faulty": "if (chebyshevApplies) {\n  double k=FastMath.sqrt((1.0 - p) / p);\n  double tmp=mu - k * sigma;\n  if (tmp > lower) {\n    lower=((int)Math.ceil(tmp)) - 1;\n  }\n  k=1.0 / k;\n  tmp=mu + k * sigma;\n  if (tmp < upper) {\n    upper=((int)Math.ceil(tmp)) - 1;\n  }\n}", 
          "type": "Delete", 
          "seed": "return 1.0 / (upper - lower + 1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1158/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:22:00.395639236 -0500\n@@ -133,10 +133,6 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1158/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:22:00.395639236 -0500\n@@ -176,7 +176,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -318,7 +319,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        double u = random.nextDouble();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "double u=random.nextDouble();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1552/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:32:55.509112512 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n@@ -173,7 +170,8 @@\n                 lower = xm;\n             }\n         }\n-        return upper;\n+        double qr = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1552/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:32:55.513112520 -0500\n@@ -158,7 +158,9 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\tfinal double x = random.nextGaussian();\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +178,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +281,7 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double value = 0;\n         }\n         return numericalVariance;\n     }\n@@ -289,9 +292,17 @@\n      * @return the variance of this distribution\n      */\n     protected double calculateNumericalVariance() {\n-        final double N = getPopulationSize();\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +329,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 176, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "return 0.5 * (lower + upper);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "final double x=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 292, 
          "faulty": "final double N=getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1606/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:34:21.065289339 -0500\n@@ -129,14 +129,8 @@\n         if (chebyshevApplies) {\n             double k = FastMath.sqrt((1.0 - p) / p);\n             double tmp = mu - k * sigma;\n-            if (tmp > lower) {\n-                lower = ((int) Math.ceil(tmp)) - 1;\n-            }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1606/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:34:21.069289346 -0500\n@@ -278,7 +278,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            final double u = random.nextDouble();\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +292,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +323,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 132, 
          "faulty": "if (tmp > lower) {\n  lower=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "while (lower + 1 < upper) {\n  int xm=(lower + upper) / 2;\n  if (xm < lower || xm > upper) {\n    xm=lower + (upper - lower) / 2;\n  }\n  double pm=checkedCumulativeProbability(xm);\n  if (pm >= p) {\n    upper=xm;\n  }\n else {\n    lower=xm;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_877/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:13:49.846597335 -0500\n@@ -134,9 +134,13 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_877/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:13:49.850597343 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -265,7 +267,8 @@\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+        int[] out = new int[sampleSize];\n+\t\treturn (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n@@ -318,7 +321,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 268, 
          "faulty": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();", 
          "type": "InsertBefore", 
          "seed": "int[] out=new int[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1125/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:21:09.127523623 -0500\n@@ -133,10 +133,13 @@\n                 lower = ((int) Math.ceil(tmp)) - 1;\n             }\n             k = 1.0 / k;\n-            tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n+            if (lower == Integer.MIN_VALUE) {\n+\t\t\t\tif (checkedCumulativeProbability(lower) >= p) {\n+\t\t\t\t\treturn lower;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlower -= 1;\n+\t\t\t}\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1125/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:21:09.131523631 -0500\n@@ -291,7 +291,9 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        final int[] domain = getDomain(populationSize, numberOfSuccesses,\n+\t\t\t\tsampleSize);\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 136, 
          "faulty": "tmp=mu + k * sigma;", 
          "type": "Delete", 
          "seed": "return (1 - p) / p;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "final int[] domain=getDomain(populationSize,numberOfSuccesses,sampleSize);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1348/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:27:20.840380377 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1586/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:33:49.093226881 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1586/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:33:49.093226881 -0500\n@@ -277,7 +277,8 @@\n      */\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n-            numericalVariance = calculateNumericalVariance();\n+            double[] out = new double[sampleSize];\n+\t\t\tnumericalVariance = calculateNumericalVariance();\n             numericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n@@ -291,7 +292,15 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tif (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +327,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 138, 
          "faulty": "upper=((int)Math.ceil(tmp)) - 1;", 
          "type": "InsertBefore", 
          "seed": "throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,p);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 280, 
          "faulty": "numericalVariance=calculateNumericalVariance();", 
          "type": "InsertBefore", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1037/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:18:36.727206202 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_1037/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:18:36.731206211 -0500\n@@ -158,7 +158,8 @@\n      * @return the number of successes.\n      */\n     public int getNumberOfSuccesses() {\n-        return numberOfSuccesses;\n+        int j = 1;\n+\t\treturn numberOfSuccesses;\n     }\n \n     /**\n@@ -176,7 +177,8 @@\n      * @return the sample size.\n      */\n     public int getSampleSize() {\n-        return sampleSize;\n+        int j = 1;\n+\t\treturn sampleSize;\n     }\n \n     /**\n@@ -278,7 +280,8 @@\n     public double getNumericalVariance() {\n         if (!numericalVarianceIsCalculated) {\n             numericalVariance = calculateNumericalVariance();\n-            numericalVarianceIsCalculated = true;\n+            double result = Double.NaN;\n+\t\t\tnumericalVarianceIsCalculated = true;\n         }\n         return numericalVariance;\n     }\n@@ -291,7 +294,11 @@\n     protected double calculateNumericalVariance() {\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n-        final double n = getSampleSize();\n+        if (numberOfSuccesses < 0) {\n+\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);\n+\t\t}\n+\t\tfinal double n = getSampleSize();\n         return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n@@ -318,7 +325,8 @@\n      * @return upper bound of the support\n      */\n     public int getSupportUpperBound() {\n-        return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n+        final double n = getSampleSize();\n+\t\treturn FastMath.min(getNumberOfSuccesses(), getSampleSize());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 179, 
          "faulty": "return sampleSize;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 161, 
          "faulty": "return numberOfSuccesses;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 321, 
          "faulty": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());", 
          "type": "InsertBefore", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 294, 
          "faulty": "final double n=getSampleSize();", 
          "type": "InsertBefore", 
          "seed": "if (numberOfSuccesses < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,numberOfSuccesses);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 281, 
          "faulty": "numericalVarianceIsCalculated=true;", 
          "type": "InsertBefore", 
          "seed": "double result=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_408/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:59:04.692752773 -0500\n@@ -123,7 +123,8 @@\n         // use the one-sided Chebyshev inequality to narrow the bracket\n         // cf. AbstractRealDistribution.inverseCumulativeProbability(double)\n         final double mu = getNumericalMean();\n-        final double sigma = FastMath.sqrt(getNumericalVariance());\n+        double v = 0;\n+\t\tfinal double sigma = FastMath.sqrt(getNumericalVariance());\n         final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n                 Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n         if (chebyshevApplies) {\n@@ -134,9 +135,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 126, 
          "faulty": "final double sigma=FastMath.sqrt(getNumericalVariance());", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Replace", 
          "seed": "if (lower == Integer.MIN_VALUE) {\n  if (checkedCumulativeProbability(lower) >= p) {\n    return lower;\n  }\n}\n else {\n  lower-=1;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 14:26:10.276554747 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_598/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t2018-12-02 15:05:06.185472511 -0500\n@@ -134,9 +134,6 @@\n             }\n             k = 1.0 / k;\n             tmp = mu + k * sigma;\n-            if (tmp < upper) {\n-                upper = ((int) Math.ceil(tmp)) - 1;\n-            }\n         }\n \n         return solveInverseCumulativeProbability(p, lower, upper);\n\n\n--- /tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 14:26:14.076554659 -0500\n+++ /tmp/GenProg_Defects4J_Math_2/patches_1h0f/Patch_598/patched/tmp/GenProg_Defects4J_Math_2/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\t2018-12-02 15:05:06.185472511 -0500\n@@ -292,7 +292,8 @@\n         final double N = getPopulationSize();\n         final double m = getNumberOfSuccesses();\n         final double n = getSampleSize();\n-        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n+        int max = Integer.MIN_VALUE;\n+\t\treturn (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java", 
          "line": 137, 
          "faulty": "if (tmp < upper) {\n  upper=((int)Math.ceil(tmp)) - 1;\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java", 
          "line": 295, 
          "faulty": "return (n * m * (N - n)* (N - m)) / (N * N * (N - 1));", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ]
    }
  ]
}