{
  "repair_end": "2018-12-02 02:16:14.620554", 
  "repair_begin": "2018-12-02 02:12:55.991604", 
  "patches": [
    {
      "diff": "--- /tmp/Kali_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 20:12:43.349470283 -0500\n+++ /tmp/Kali_Defects4J_Closure_33/patches_3qww/Patch_2/patched/tmp/Kali_Defects4J_Closure_33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\t2018-12-01 20:16:14.180751829 -0500\n@@ -567,7 +567,7 @@\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n+        if (false) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n\n\n", 
      "edits": [
        {
          "path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java", 
          "line": 570, 
          "faulty": "if (!isPropertyTypeDeclared(prop)) {\n  JSType typeToInfer=propType;\n  if (!hasProperty(prop)) {\n    typeToInfer=getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n  }\n  defineInferredProperty(prop,typeToInfer,null);\n}", 
          "type": "RedirectBranch false"
        }
      ]
    }
  ]
}